<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>compass &#8211; Andrew Morgan on Databases</title>
	<atom:link href="./feed/index.html" rel="self" type="application/rss+xml" />
	<link>./../../index.html</link>
	<description>Database technologies - especially around scalability and High Availability</description>
	<lastBuildDate>Tue, 22 Nov 2016 13:18:47 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>Adding Document Validation Rules Using MongoDB Compass 1.5</title>
		<link>./../../mongodb/adding-document-validation-rules-using-mongodb-compass-1-5/index.html</link>
					<comments>./../../mongodb/adding-document-validation-rules-using-mongodb-compass-1-5/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Tue, 22 Nov 2016 13:18:47 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[compass]]></category>
		<category><![CDATA[Document Validation]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Compass]]></category>
		<guid isPermaLink="false">./../../index.html?p=4305</guid>

					<description><![CDATA[Adding Document Validation Rules Using MongoDB Compass 1.5 This post looks at a new feature in MongoDB Compass 1.5 (in beta at the time of writing) which allows document validation rules to be added from the GUI rather from the mongo shell command line. This makes it easy to create and modify rules that ensure]]></description>
										<content:encoded><![CDATA[<h1>Adding Document Validation Rules Using MongoDB Compass 1.5</h1>
<p>This post looks at a new feature in <a href="https://www.mongodb.com/products/compass" title="MongoDB Compass – the GUI for MongoDB">MongoDB Compass</a> 1.5 (in beta at the time of writing) which allows document validation rules to be added from the GUI rather from the <code>mongo</code> shell command line. This makes it easy to create and modify rules that ensure that all documents written to a collection contain the data you expect to be there.</p>
<h2>Introduction</h2>
<p>One of MongoDB’s primary attractions for developers is that it gives them the ability to start application development without first needing to define a formal schema. Operations teams appreciate the fact that they don&#8217;t need to perform a time-consuming schema upgrade operation every time the developers need to store a different attribute. For business leaders, the application gets launched much faster, and new features can be rolled out more frequently. MongoDB powers agility.</p>
<p>Many projects reach a point where it&#8217;s necessary to enforce rules on what&#8217;s being stored in the database – for example, that for any document in a particular collection, you can be certain that specific attributes are present in every document. Reasons for this include:</p>
<ul>
<li>Different development teams can work with the same data, each needing to know what they can expect to find in a particular collection.</li>
<li>Development teams working on different applications can be spread over multiple sites, which means that a clear agreement on the format of shared data is important.</li>
<li>Development teams from different companies may be working with the same collections; misunderstandings about what data should be present can lead to issues.</li>
</ul>
<p>As an example, an e-commerce website may centralize product catalog feeds from multiple vendors into a single collection. If one of the vendors alters the format of its product catalog, global catalog searches could fail.</p>
<p>To date, this resulted in developers building their own validation logic &#8211; either within the application code (possibly multiple times for different applications) or by adding middleware such as Mongoose.</p>
<p>To address the challenges discussed above, while at the same time maintaining the benefits of a dynamic schema, MongoDB 3.2 introduced <a href="https://docs.mongodb.com/v3.2/core/document-validation/" title="Validating documents in MongoDB">document validations</a>. Adding and viewing validation rules required understanding the correct commands to run from the <code>mongo</code> shell&#8217;s command line.</p>
<p><a href="https://www.mongodb.com/products/compass" title="The Easiest Way to Explore and Manipulate Your MongoDB Data">MongoDB Compass</a> 1.5 allows users to view, add, and modify document validation rules through its GUI, making them more accessible to both developers and DBAs.</p>
<h2>Validating Documents in MongoDB</h2>
<p>Document Validation provides significant flexibility to customize which parts of the documents are <strong>and are not</strong> validated for any collection. For any attribute it might be appropriate to check:</p>
<ul>
<li>That the attribute exists</li>
<li>If an attribute does exist, that it is of the correct type</li>
<li>That the value is in a particular format (e.g., regular expressions can be used to check if the contents of the string matches a particular pattern)</li>
<li>That the value falls within a given range</li>
</ul>
<p>Further, it may be necessary to combine these checks – for example that the document contains the user&#8217;s name <em>and</em> either their email address <em>or</em> phone number, <em>and</em> if the email address does exist, then it must be correctly formed.</p>
<p>Adding the validation checks from the command line is intuitive to developers or DBAs familiar with the MongoDB query language as it uses the same expression syntax as a <code>find</code> query to search the database. For others, it can be a little intimidating.</p>
<p>As an example, the following snippet adds validations to the <code>contacts</code> collection that validates:</p>
<ul>
<li>The year of birth is no later than 1994</li>
<li>The document contains a phone number and/or an email address</li>
<li>When present, the phone number and email address are strings</li>
</ul>
<pre><code>db.runCommand({
   collMod: "contacts",
   validator: { 
      $and: [
        {yearOfBirth: {$lte: 1994}},
        {$or: [ 
                  {"contact.phone": { $type: "string"}}, 
                  {"email": { $type: "string"}}
              ]}]
    }})
</code></pre>
<p>Note that <a href="https://docs.mongodb.com/manual/reference/operator/query/type/" title="$type selects the documents where the value of the field is an instance of the specified BSON type.">types can be specified using either a number or a string alias</a>.</p>
<p>Wouldn&#8217;t it be nice to be able to define these rules through a GUI rather than from the command line?</p>
<h2>Using MongoDB Compass to Add Document Validation Rules</h2>
<p>If you don&#8217;t already have MongoDB Compass 1.5 (or later) installed, <a href="https://www.mongodb.com/download-center#compass" title="Download MongoDB Compass – GUI data management tool for MongoDB">download it</a> and start the application. You&#8217;ll then be asked to provide details on how to connect to your database.</p>
<p>MongoDB Compass is free for evaluation and for use in development, for production, a <a href="https://www.mongodb.com/products/mongodb-professional" title="Expert support and a comprehensive management platform for MongoDB">MongoDB Professional</a> of <a href="https://www.mongodb.com/products/mongodb-enterprise-advanced" title="The Best Way to Run MongoDB in Your Data Center. Supported. Secure. Automated.">MongoDB Enterprise Advanced</a> subscription is required.</p>
<p>If you don&#8217;t have a database to test this on, the simplest option is to <a href="https://www.mongodb.com/cloud" title="MongoDB Hosted Service in the cloud – MongoDB Atlas">create a new MongoDB Atlas cluster</a>. Details on launching a MongoDB Atlas cluster can be found in <a href="https://www.mongodb.com/blog/post/using-mongodb-atlas-from-your-favorite-language-or-framework">this post</a>.</p>
<p>Note that MongoDB Compass currently only accepts a single server address rather than the list of replica set members in the standard Atlas connect string and so it&#8217;s necessary to explicitly provide Compass with the address of the current primary – find that by clicking on the cluster in the Atlas GUI (Figure 1).</p>
<div id="attachment_4307" style="width: 290px" class="wp-caption alignleft"><a href="./../../wp-content/uploads/2016/11/MongoDB_Atlas_identify_primary.png"><img decoding="async" aria-describedby="caption-attachment-4307" class="wp-image-4307 size-medium" src="./../../wp-content/uploads/2016/11/MongoDB_Atlas_identify_primary-300x204.png" alt="Identify the replica set primary" width="280" srcset="./../../wp-content/uploads/2016/11/MongoDB_Atlas_identify_primary-300x204.png 300w, ./../../wp-content/uploads/2016/11/MongoDB_Atlas_identify_primary.png 505w" sizes="(max-width: 300px) 100vw, 300px" /></a><p id="caption-attachment-4307" class="wp-caption-text">Figure 1: Identify the replica set primary</p></div>
<div id="attachment_4309" style="width: 240px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2016/11/Connect_MongoDB_Compass_to_MongoDB_Atlas.png"><img decoding="async" aria-describedby="caption-attachment-4309" class="wp-image-4309 size-medium" src="./../../wp-content/uploads/2016/11/Connect_MongoDB_Compass_to_MongoDB_Atlas-235x300.png" alt="Connect MongoDB Compass to MongoDB Atlas" width="230" srcset="./../../wp-content/uploads/2016/11/Connect_MongoDB_Compass_to_MongoDB_Atlas-235x300.png 235w, ./../../wp-content/uploads/2016/11/Connect_MongoDB_Compass_to_MongoDB_Atlas.png 496w" sizes="(max-width: 235px) 100vw, 235px" /></a><p id="caption-attachment-4309" class="wp-caption-text">Figure 2: Connect MongoDB Compass to MongoDB Atlas</p></div>
<p>The connection panel can then be populated as shown in Figure 2.</p>
<h3>Load Data and Check in MongoDB Compass</h3>
<p>If you don&#8217;t already have a populated MongoDB collection, create one now. For example, use <code>curl</code> to download a pre-prepared JSON file containing contact data and use <a href="https://docs.mongodb.com/manual/reference/program/mongoimport/" title="Import JSON, CSV, or TSV data into MongoDB"><code>mongoimport</code></a> to load it into your database:</p>
<pre><code class="bash">curl -o contacts.json http://clusterdb.com/upload/contacts.json
mongoimport -h cluster0-shard-00-00-qfovx.mongodb.net -d clusterdb -c contacts --ssl -u billy -p SECRET --authenticationDatabase admin contacts.json
</code></pre>
<p>Connect MongoDB Compass to your database (Figure 3).</p>
<div id="attachment_4310" style="width: 1286px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/11/connect_compass_to_atlas.png"><img fetchpriority="high" decoding="async" aria-describedby="caption-attachment-4310" class="wp-image-4310 size-full" src="./../../wp-content/uploads/2016/11/connect_compass_to_atlas.png" alt="Connect MongoDB Compass to database" width="1276" height="737" srcset="./../../wp-content/uploads/2016/11/connect_compass_to_atlas.png 1276w, ./../../wp-content/uploads/2016/11/connect_compass_to_atlas-300x173.png 300w, ./../../wp-content/uploads/2016/11/connect_compass_to_atlas-768x444.png 768w, ./../../wp-content/uploads/2016/11/connect_compass_to_atlas-1024x591.png 1024w" sizes="(max-width: 1276px) 100vw, 1276px" /></a><p id="caption-attachment-4310" class="wp-caption-text">Figure 3: Connect MongoDB Compass to database</p></div>
<p>Select the <em>contacts</em> data and browse the schema (Figure 4).</p>
<div id="attachment_4311" style="width: 1292px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/11/compass_check_schema.png"><img decoding="async" aria-describedby="caption-attachment-4311" class="wp-image-4311 size-full" src="./../../wp-content/uploads/2016/11/compass_check_schema.png" alt="Check schema in MongoDB Compass" width="1282" height="739" srcset="./../../wp-content/uploads/2016/11/compass_check_schema.png 1282w, ./../../wp-content/uploads/2016/11/compass_check_schema-300x173.png 300w, ./../../wp-content/uploads/2016/11/compass_check_schema-768x443.png 768w, ./../../wp-content/uploads/2016/11/compass_check_schema-1024x590.png 1024w" sizes="(max-width: 1282px) 100vw, 1282px" /></a><p id="caption-attachment-4311" class="wp-caption-text">Figure 4: Check schema in MongoDB Compass</p></div>
<p>Browse some documents (Figure 5).</p>
<div id="attachment_4312" style="width: 1290px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/11/compass_browse_documents.png"><img decoding="async" aria-describedby="caption-attachment-4312" class="size-full wp-image-4312" src="./../../wp-content/uploads/2016/11/compass_browse_documents.png" alt="Browse documents using MongoDB Compass" width="1280" height="740" srcset="./../../wp-content/uploads/2016/11/compass_browse_documents.png 1280w, ./../../wp-content/uploads/2016/11/compass_browse_documents-300x173.png 300w, ./../../wp-content/uploads/2016/11/compass_browse_documents-768x444.png 768w, ./../../wp-content/uploads/2016/11/compass_browse_documents-1024x592.png 1024w" sizes="(max-width: 1280px) 100vw, 1280px" /></a><p id="caption-attachment-4312" class="wp-caption-text">Figure 5: Browse documents using MongoDB Compass</p></div>
<h3>Add Document Validation Rules</h3>
<p>In this section, we build the document validation rule shown earlier.</p>
<p>Navigate to the Validation tab in MongoDB Compass GUI and select the desired <em>validation action</em> and <em>validation level</em>. The effects of these settings are shown in Figure 6. Any warnings generated by the rules are written to the MongoDB log.</p>
<div id="attachment_4313" style="width: 1610px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/11/document_validation_settings.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4313" class="size-full wp-image-4313" src="./../../wp-content/uploads/2016/11/document_validation_settings.png" alt="MongoDB document validation configuration parameters" width="1600" height="662" srcset="./../../wp-content/uploads/2016/11/document_validation_settings.png 1600w, ./../../wp-content/uploads/2016/11/document_validation_settings-300x124.png 300w, ./../../wp-content/uploads/2016/11/document_validation_settings-768x318.png 768w, ./../../wp-content/uploads/2016/11/document_validation_settings-1024x424.png 1024w" sizes="auto, (max-width: 1600px) 100vw, 1600px" /></a><p id="caption-attachment-4313" class="wp-caption-text">Figure 6: MongoDB document validation configuration parameters</p></div>
<p>When adding document validation rules to an existing collection, you may want to start with fairly permissive rules so that existing applications aren&#8217;t broken before you have chance to clean things up. Once you&#8217;re confident that all applications are following the rules you could then become stricter. Figure 7 shows a possible life cycle for a collection.</p>
<div id="attachment_4314" style="width: 1431px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/11/colllection_lifecycle.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4314" class="size-full wp-image-4314" src="./../../wp-content/uploads/2016/11/colllection_lifecycle.png" alt="Life cycle of a MongoDB collection" width="1421" height="250" srcset="./../../wp-content/uploads/2016/11/colllection_lifecycle.png 1421w, ./../../wp-content/uploads/2016/11/colllection_lifecycle-300x53.png 300w, ./../../wp-content/uploads/2016/11/colllection_lifecycle-768x135.png 768w, ./../../wp-content/uploads/2016/11/colllection_lifecycle-1024x180.png 1024w" sizes="auto, (max-width: 1421px) 100vw, 1421px" /></a><p id="caption-attachment-4314" class="wp-caption-text">Figure 7: Life cycle of a MongoDB collection</p></div>
<p>This post is starting with a new collection and so you can go straight to <em>error</em>/<em>strict</em> as shown in Figure 8.</p>
<div id="attachment_4315" style="width: 1288px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/11/error_strict.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4315" class="size-full wp-image-4315" src="./../../wp-content/uploads/2016/11/error_strict.png" alt="Set document validation to error/strict" width="1278" height="447" srcset="./../../wp-content/uploads/2016/11/error_strict.png 1278w, ./../../wp-content/uploads/2016/11/error_strict-300x105.png 300w, ./../../wp-content/uploads/2016/11/error_strict-768x269.png 768w, ./../../wp-content/uploads/2016/11/error_strict-1024x358.png 1024w" sizes="auto, (max-width: 1278px) 100vw, 1278px" /></a><p id="caption-attachment-4315" class="wp-caption-text">Figure 8: Set document validation to error/strict</p></div>
<p>Multiple rules for the document can then be added using the GUI (Figure 9). Note that the rule for the email address uses a regular expression (<code>^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$</code>) to test that the address is properly formatted – going further than the original rule.</p>
<div id="attachment_4316" style="width: 1276px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/11/compass_define_validation_rules.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4316" class="size-full wp-image-4316" src="./../../wp-content/uploads/2016/11/compass_define_validation_rules.png" alt="Add new document validation rule through MongoDB Compass" width="1266" height="609" srcset="./../../wp-content/uploads/2016/11/compass_define_validation_rules.png 1266w, ./../../wp-content/uploads/2016/11/compass_define_validation_rules-300x144.png 300w, ./../../wp-content/uploads/2016/11/compass_define_validation_rules-768x369.png 768w, ./../../wp-content/uploads/2016/11/compass_define_validation_rules-1024x493.png 1024w" sizes="auto, (max-width: 1266px) 100vw, 1266px" /></a><p id="caption-attachment-4316" class="wp-caption-text">Figure 9: Add new document validation rule through MongoDB Compass</p></div>
<p>Clicking <em>UPDATE</em> applies the change and then you can review it by pressing the <em>JSON</em> button (Figure 10).</p>
<div id="attachment_4317" style="width: 1286px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/11/json_view_of_validation_rule.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4317" class="size-full wp-image-4317" src="./../../wp-content/uploads/2016/11/json_view_of_validation_rule.png" alt="JSON view of new document validation rule" width="1276" height="616" srcset="./../../wp-content/uploads/2016/11/json_view_of_validation_rule.png 1276w, ./../../wp-content/uploads/2016/11/json_view_of_validation_rule-300x145.png 300w, ./../../wp-content/uploads/2016/11/json_view_of_validation_rule-768x371.png 768w, ./../../wp-content/uploads/2016/11/json_view_of_validation_rule-1024x494.png 1024w" sizes="auto, (max-width: 1276px) 100vw, 1276px" /></a><p id="caption-attachment-4317" class="wp-caption-text">Figure 10: JSON view of new document validation rule</p></div>
<p>At this point, a problem appears. Compass has combined the 3 sub-rules with an <strong>and</strong> relationship but our intent was to test that the document contained either an email address <strong>or</strong> a phone number and that <code>yearOfBirth</code> was no later than 1994. Fortunately, for these more complex checks, the JSON can be altered directly within Compass:</p>
<pre><code>{
  "$and": [
    {"yearOfBirth": {"$lte": 1994}}, 
    {
      "$or": [
        {"contact.email": {
          "$regex": "^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$",
          "$options": ""
          }
        },
        {
          "$and": [
            {"contact.phone": {"$type": 2}},
            {"contact.email": {"$exists": false}}
          ]
        }
      ]
    }
  ]
}
</code></pre>
<p>Paste the refined rule into Compass and press <em>UPDATE</em> (Figure 11).</p>
<div id="attachment_4318" style="width: 1289px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/11/manually_edit_rules.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4318" class="size-full wp-image-4318" src="./../../wp-content/uploads/2016/11/manually_edit_rules.png" alt="Manually edit validation rules in MongoDB Compass" width="1279" height="624" srcset="./../../wp-content/uploads/2016/11/manually_edit_rules.png 1279w, ./../../wp-content/uploads/2016/11/manually_edit_rules-300x146.png 300w, ./../../wp-content/uploads/2016/11/manually_edit_rules-768x375.png 768w, ./../../wp-content/uploads/2016/11/manually_edit_rules-1024x500.png 1024w" sizes="auto, (max-width: 1279px) 100vw, 1279px" /></a><p id="caption-attachment-4318" class="wp-caption-text">Figure 11: Manually edit validation rules in MongoDB Compass</p></div>
<p>Recall that this rule checks that the <code>yearOfBirth</code> is no later than 1994 and that there is a phone number (formatted as a string)or a properly formatted email address.</p>
<h3>Test The Rules</h3>
<p>However you write to the database, the document validation rules are applied in the same way – through any of the drivers, or through the <code>mongo</code> shell. For this post we can test the rules directly from the MongoDB Compass GUI, from the <em>DOCUMENTS</em> tab. Select a document and try changing the <code>yearOfBirth</code> to a year later than 1994 as shown in Figure 12.</p>
<div id="attachment_4319" style="width: 1287px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/11/compass_failed_validation.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4319" class="size-full wp-image-4319" src="./../../wp-content/uploads/2016/11/compass_failed_validation.png" alt="hange fails document validation" width="1277" height="491" srcset="./../../wp-content/uploads/2016/11/compass_failed_validation.png 1277w, ./../../wp-content/uploads/2016/11/compass_failed_validation-300x115.png 300w, ./../../wp-content/uploads/2016/11/compass_failed_validation-768x295.png 768w, ./../../wp-content/uploads/2016/11/compass_failed_validation-1024x394.png 1024w" sizes="auto, (max-width: 1277px) 100vw, 1277px" /></a><p id="caption-attachment-4319" class="wp-caption-text">Figure 12: Change fails document validation</p></div>
<h3>Find the Offending Documents Already in the Collection</h3>
<p>There are a number of ways to track down existing documents that don&#8217;t meet the new rules. A very simple option is to query the database using the negation of the rule definition by wrapping the validation document in a <code>$nor</code> clause:</p>
<pre><code>{"$nor": [
  {
    "$and": [
      {"yearOfBirth": {"$lte": 1994}}, 
      {
        "$or": [
          {"contact.email": {
            "$regex": "^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$",
            "$options": ""
            }
          },
          {"contact.phone": {"$type": 2}}
        ]
      }
    ]
  }]
}
</code></pre>
<p>The query document can be pasted into the query bar in Compass and then pressing <em>APPLY</em> reveals that there are 206 documents with <code>yearOfBirth</code> greater than 1994 – Figure 13.</p>
<div id="attachment_4320" style="width: 1286px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/11/find_offending_documents.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4320" class="size-full wp-image-4320" src="./../../wp-content/uploads/2016/11/find_offending_documents.png" alt="Find documents not matching the validation rules" width="1276" height="735" srcset="./../../wp-content/uploads/2016/11/find_offending_documents.png 1276w, ./../../wp-content/uploads/2016/11/find_offending_documents-300x173.png 300w, ./../../wp-content/uploads/2016/11/find_offending_documents-768x442.png 768w, ./../../wp-content/uploads/2016/11/find_offending_documents-1024x590.png 1024w" sizes="auto, (max-width: 1276px) 100vw, 1276px" /></a><p id="caption-attachment-4320" class="wp-caption-text">Figure 13: Find documents not matching the validation rules</p></div>
<h5>Cleaning up Offending Documents</h5>
<p>Potentially more problematic is how to clean up the existing documents which do not match the validation rules, as you need to decide what should happen to them. The good news is that the same <code>$nor</code> document used above can be used as a filter when executing your chosen action.</p>
<p>For example, if you decided that the offending documents should not be in the collection at all then this command can be run from the <code>mongo</code> shell command line to delete them:</p>
<pre><code>use clusterdb
db.contacts.remove(
{"$nor": [
  {
    "$and": [
      {"yearOfBirth": {"$lte": 1994}}, 
      {
        "$or": [
          {"contact.email": {
            "$regex": "^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$",
            "$options": ""
            }
          },
          {"contact.phone": {"$type": 2}}
        ]
      }
    ]
  }]
})
</code></pre>
<h4>Another Example – Coping with Multiple Schema Versions</h4>
<p>A tricky problem to solve with RDBMSs is the versioning of data models; with MongoDB it&#8217;s very straight-forward to set up validations that can cope with different versions of documents, with each version having a different set of checks applied. In the example validation checks below, the following logic is applied:</p>
<ul>
<li>If the document is unversioned (possibly dating to the time before validations were added), then no checks are applied</li>
<li>For version 1, the document is checked to make sure that the <code>name</code> key exists</li>
<li>For version 2 documents, the type of the <code>name</code> key is also validated to ensure that it is a string</li>
</ul>
<pre><code>{"$or": [
  {version: {"$exists": false}},
  {"$and": [
    {version: 1},
    {Name: {"$exists": true}}
  ]},
  {"$and": [
    {version: 2},
    {Name: {"$exists": true, "$type": "string"}}
  ]}
]} 
</code></pre>
<p>In this way, multiple versions of documents can exist within the same collection, and the application can lazily up-version them over time. Note that the <code>version</code> attribute is user-defined.</p>
<h4>Where MongoDB Document Validation Excels (vs. RDBMSs)</h4>
<p>In MongoDB, document validation is simple to set up – especially now that it can be done through the MongoDB Compass GUI. You can avoid the maintenance headache of stored procedures – which for many types of validation would be required in an RDBMS – and because the familiar MongoDB query language is used, there is no new syntax to learn.</p>
<p>The functionality is very flexible and it can enforce constraints on as little or as much of the schema as required. You get the best of both worlds – a dynamic schema for rapidly changing, polymorphic data, with the option to enforce strict validation checks against specific attributes from the onset of your project, or much later on. You can also use the Compass GUI to find and modify individual, pre-existing documents that don&#8217;t follow any new rules. If you initially have no validations defined, they can still be added later – even once in production, across thousand of servers.</p>
<p>It is always a concern whether adding extra checks will impact the performance of the system; in our tests, document validation adds a negligible overhead.</p>
<h4>So, is all Data Validation Now Done in the Database?</h4>
<p>The answer is &#8220;probably not&#8221; – either because there&#8217;s a limit to what can be done in the database or because there will always be a more appropriate place for some checks. Here are some areas to consider:</p>
<ul>
<li>For a good user experience, checks should be made as early and as high up the stack as is sensible. For example, the format of an entered email address should be first checked in the browser rather than waiting for the request to be processed and an attempt made to write it to the database.</li>
<li>Any validations which need to compare values between keys, other documents, or external information cannot currently be implemented within the database.</li>
<li>Many checks are best made within the application&#8217;s business logic – for example &#8220;is this user allowed to use these services in their home country&#8221;; the checks in the database are primarily there to protect against coding errors.</li>
<li>If you need information on <strong>why</strong> the document failed validation, the developer or application will need to check the document against each of the sub-rules within the collection&#8217;s validation rule in turn as the error message doesn&#8217;t currently give this level of detail.</li>
</ul>
<h4>Summary</h4>
<p>In this post, we&#8217;ve taken a look at the powerful document validation functionality that was added back in MongoDB 3.2. We then explored how MongoDB Compass 1.5 adds the convenience of being able to define these rules through an intuitive GUI.</p>
<p>This is just one of the recent enhancements to MongoDB Compass; others include:</p>
<ul>
<li><a href="https://www.mongodb.com/blog/post/visualizing-your-data-with-mongodb-compass" title="CRUD operations in MongoDB Compass">Create, remove, update, delete, or clone existing documents</a></li>
<li>Provide real-time performance statistics</li>
<li><a href="https://www.mongodb.com/blog/post/visualizing-your-data-with-mongodb-compass" title="Visual Query Exlain in MongoDB Compass">Visualize query explain plans</a></li>
<li>Review index usage</li>
<li>Create new indexes</li>
</ul>
<p>A summary of the enhancements added in MongoDB Compass 1.4 &amp; 1.5 can be found in <a href="https://www.mongodb.com/collateral/mongodb-3-4-whats-new" title="What's new in MongoDB 3.4">MongoDB 3.4 – What&#8217;s New</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mongodb/adding-document-validation-rules-using-mongodb-compass-1-5/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
