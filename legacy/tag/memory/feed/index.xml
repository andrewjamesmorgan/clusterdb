<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Memory &#8211; Andrew Morgan on Databases</title>
	<atom:link href="./feed/index.html" rel="self" type="application/rss+xml" />
	<link>./../../index.html</link>
	<description>Database technologies - especially around scalability and High Availability</description>
	<lastBuildDate>Fri, 07 Nov 2014 17:01:53 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>Active-Active Replication, Performance Improvements &#038; Operational Enhancements &#8211; some of what&#8217;s available in the new MySQL Cluster 7.4.2 DMR</title>
		<link>./../../mysql-cluster/active-active-replication-performance-improvements-operational-enhancements-some-of-whats-available-in-the-new-mysql-cluster-7-4-2-dmr/index.html</link>
					<comments>./../../mysql-cluster/active-active-replication-performance-improvements-operational-enhancements-some-of-whats-available-in-the-new-mysql-cluster-7-4-2-dmr/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 07 Nov 2014 17:01:53 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[7.4]]></category>
		<category><![CDATA[Memory]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster 7.4]]></category>
		<category><![CDATA[Replication]]></category>
		<guid isPermaLink="false">./../../index.html?p=3969</guid>

					<description><![CDATA[Oracle have just made availble the new MySQL Cluster 7.4.2 Development Milestone Release &#8211; it can be downloaded from the development release tab here. Note that this is not a GA release and so we wouldn&#8217;t recommend using it in production. This is the second DMR for MySQL 7.4; the delta between this DMR and]]></description>
										<content:encoded><![CDATA[<p><a href="./../../wp-content/uploads/2014/07/MySQL_Cluster_400.png"><img fetchpriority="high" decoding="async" src="./../../wp-content/uploads/2014/07/MySQL_Cluster_400.png" alt="MySQL Cluster Logo" width="400" height="168" class="alignright size-full wp-image-3934" srcset="./../../wp-content/uploads/2014/07/MySQL_Cluster_400.png 400w, ./../../wp-content/uploads/2014/07/MySQL_Cluster_400-300x126.png 300w" sizes="(max-width: 400px) 100vw, 400px" /></a></p>
<p>Oracle have just made availble the new MySQL Cluster 7.4.2 Development Milestone Release &#8211; it can be <a href="http://dev.mysql.com/downloads/cluster/" title="download the MySQL Cluster 7.4.2 Development Milestone Release" target="_blank">downloaded from the development release tab here</a>. Note that this is not a GA release and so we wouldn&#8217;t recommend using it in production.</p>
<p>This is the second DMR for MySQL 7.4; the delta between this DMR and 7.4.1 can be viewed in the <a href="http://dev.mysql.com/doc/relnotes/mysql-cluster/7.4/en/mysql-cluster-news-5-6-21-ndb-7-4-2.html" title="MySQL Cluster 7.4.2 Release Notes" target="_blank">MySQL Cluster 7.4.2 Release Notes</a></p>
<p>There are three main focus areas for this DMR and the purpose of this post is to briefly introduce them:</p>
<ul>
<li>Active-Active (Multi-Master) Replication</li>
<li>Performance</li>
<li>Operational improvements (speeding up of restarts; enhanced memory reporting)</li>
</ul>
<h2>Active-Active (Multi-Master) Replication</h2>
<p>MySQL Cluster allows bi-directional replication between two (or more) clusters. Replication within each cluster is synchronous but between clusters it is asynchronous which means the following scenario is possible:</p>
<table summary="Active-Active asynchronous replication can lead to inconsistencies between databases" width="260" border="1" align="center">
<caption align="center">Conflict with asynchronous replication</caption>
<tbody>
<tr>
<th scope="col" align="center" width="80">Site A</th>
<th scope="col" align="center" width="100">Replication</th>
<th scope="col" align="center" width="80">Site B</th>
</tr>
<tr>
<td align="center">x == 10</td>
<td></td>
<td align="center">x == 10</td>
</tr>
<tr>
<td align="center">x = 11</td>
<td></td>
<td align="center">x = 20</td>
</tr>
<tr>
<td></td>
<td align="center">&#8212; x=11 &#8211;&gt;</td>
<td align="center">x == 11</td>
</tr>
<tr>
<td align="center">x==20</td>
<td align="center">&lt;&#8211; x=20 &#8212;</td>
<td></td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>In this example a value (column for a row in a table) is set to 11 on site A and the change is queued for replication to site B. In the mean time, an application sets the value to 20 on site B and that change is queued for replication to site A. Once both sites have received and applied the replicated change from the other cluster site A contains the value 20 while site B contains 11 &#8211; in other words the databases are now inconsistent.</p>
<h2>How MySQL Cluster implements eventual consistency</h2>
<p>There are two phases to establishing consistency between both clusters after an inconsistency has been introduced:</p>
<ol>
<li>Detect that a conflict has happened</li>
<li>Resolve the inconsistency</li>
</ol>
<p>The following animation illustrates how MySQL Cluster 7.2 detects that an inconsistency has been introduced by the asynchronous, active-active replication:</p>
<div id="attachment_2149" style="width: 610px" class="wp-caption alignnone"><a href="./../../wp-content/uploads/2011/11/ReflectingGCI1.gif"><img decoding="async" aria-describedby="caption-attachment-2149" class="size-full wp-image-2149" title="ReflectingGCI" src="./../../wp-content/uploads/2011/11/ReflectingGCI1.gif" alt="" width="600" height="463" /></a><p id="caption-attachment-2149" class="wp-caption-text">Detecting conflicts</p></div>
<p>While we typically consider the 2 clusters in an active-active replication configuration to be peers, in this case we designate one to be the primary and the other the secondary. Reads and writes can still be sent to either cluster but it is the responsibility of the primary to identify that a conflict has arisen and then remove the inconsistency.</p>
<p>A logical clock is used to identify (in relative terms) when a change is made on the primary &#8211; for those who know something of the MySQL Cluster internals, we use the index of the Global Checkpoint that the update is contained in. For all tables that have this feature turned on, an extra, hidden column is automatically added on the primary &#8211; this represents the value of the logical clock when the change was made.</p>
<p>Once the change has been applied on the primary, there is a &#8220;window of conflict&#8221; for the effected row(s) during which if a different change is made to the same row(s) on the secondary then there will be an inconsistency. Once the slave on the secondary has applied the change from the primary, it will send a replication event back to the slave on the primary, containing the primary&#8217;s clock value associated with the changes that have just been applied on the secondary. (Remember that the clock is actually the Global Checkpoint Index and so this feature is sometimes referred to as Reflected GCI). Once the slave on the primary has received this event, it knows that all changes tagged with a clock value no later than the reflected GCI are now safe &#8211; the window of conflict has closed.</p>
<p>If an application modifies this same row on the secondary before the replication event from the primary was applied then it will send an associated replication event to the slave on the primary <strong>before</strong> it reflects the new GCI. The slave on the primary will process this replication event and compare the clock value recorded with the effected rows with the latest reflected GCI; as the clock value for the conflicting row is higher the primary recognises that a conflict has occured and will launch the algorithm to resolve the inconsistency.</p>
<p><a href="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15.png"><img decoding="async" src="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-300x109.png" alt="Options for MySQL Cluster replication conflict detection/resolution" width="300" height="109" class="alignright size-medium wp-image-3950" srcset="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-300x109.png 300w, ./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-1024x372.png 1024w, ./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-900x327.png 900w, ./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15.png 1728w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>After a conflict has been detected, you have the option of having the database simply report the conflict to the application or have it roll back just the conflicting row or the entire transaction and all subsequent transactions that were dependent on it.</p>
<p>So &#8211; what&#8217;s new in 7.4.1?</p>
<ul>
<li>Detects conflicts between inserts and updates</li>
<li>Option to roll back entire transaction (and dependent transactions) rather than just the conflicting row</li>
<li>All conflicts are handled before switching primary &#8211; avoiding potential race conditions</li>
</ul>
<p>As mentioned at the start of this post, this is pre-GA and there are some extra enhancements we plan on including in the final version:</p>
<ul>
<li>Handle deletes which conflict with other operations</li>
<li>Roll back transactions that have <strong>read</strong> a row that had been rolled back due to a conflict</li>
</ul>
<h3>Performance</h3>
<p><a href="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23.png"><img loading="lazy" decoding="async" src="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23-300x197.png" alt="MySQL CLuster 7.4.1 Read-Write Performance" width="300" height="197" class="alignright size-medium wp-image-3952" srcset="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23-300x197.png 300w, ./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23.png 864w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><br />
Being a scaled-out, in-memory, real-time database, MySQL Cluster performance has always been great but we continue to work on making it faster each release. In particular, we want to keep pace with the trend of having more and more cores rather than faster ones. 7.4 continues along the path of better exploiting multiple cores &#8211; as can be seen from these benchmark results.<br />
<a href="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15.png"><img loading="lazy" decoding="async" src="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15-300x199.png" alt="MySQL CLuster 7.4.1 Read Performance" width="300" height="199" class="alignright size-medium wp-image-3951" srcset="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15-300x199.png 300w, ./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15.png 842w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><br />
Just make sure that you&#8217;re using the multi-threaded data node (ndbmtd rather than ndbd) and have <a href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-programs-ndbmtd.html" title="MySQL Cluster - configuring multi-threaded datanodes" target="_blank">configured how many threads it should use</a>.</p>
<h3>Faster Restarts</h3>
<p>You can restart MySQL Cluster processes (nodes) without losing database service (for example if adding extra memory to a server) and so on the face of it, the speed of the restarts isn&#8217;t that important. Having said that, while the node is restarting you&#8217;ve lost some of your high-availability which for super-critical applications can make you nervous. Additionally, faster restarts mean that you can complete maintenance activities faster &#8211; for example, a software upgrade requires a rolling restart of all of the nodes &#8211; if you have 48 data nodes then you want each of the data nodes to restart as quickly as possible.</p>
<p>MySQL 7.4.1 includes a number of optimisations to the restart code and so if you&#8217;re already using MySQL Cluster, it might be interesting to see how much faster it gets for your application. We also have some extra optimisations in the works that you can expect to see in later 7.4 versions.</p>
<h3>Extra Memory Reporting</h3>
<p>MySQL Cluster presents a lot of monitoring information through the <a href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-ndbinfo.html" title="ndbinfo database" target="_blank">ndbinfo database</a> and in 7.4 we&#8217;ve added some extra information on how memory is used for individual tables.</p>
<p>For example; to see how much memory is being used by each data node for a particular table&#8230;</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql> CREATE DATABASE clusterdb;USE clusterdb;
mysql> CREATE TABLE simples (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY) ENGINE=NDB;
mysql> SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |      131072 |       5504 |        172 |
|    1 |    2 |      131072 |       1280 |         40 |
|    2 |    0 |      131072 |       5504 |        172 |
|    2 |    2 |      131072 |       1280 |         40 |
|    3 |    1 |      131072 |       3104 |         97 |
|    3 |    3 |      131072 |       4256 |        133 |
|    4 |    1 |      131072 |       3104 |         97 |
|    4 |    3 |      131072 |       4256 |        133 |
+------+------+-------------+------------+------------+
</pre>
<p>When you delete rows from a MySQL Cluster table, the memory is not actually freed up and so if you check the existing <a href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-ndbinfo-memoryusage.html" title="memoryusage table" target="_blank">memoryusage table</a> you won&#8217;t see a change. This memory will be reused when you add new rows to that same table. In MySQL Cluster 7.4, it&#8217;s possible to see how much memory is in that state for a table&#8230;</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql> SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |      131072 |       5504 |        172 |
|    1 |    2 |      131072 |       1280 |         40 |
|    2 |    0 |      131072 |       5504 |        172 |
|    2 |    2 |      131072 |       1280 |         40 |
|    3 |    1 |      131072 |       3104 |         97 |
|    3 |    3 |      131072 |       4256 |        133 |
|    4 |    1 |      131072 |       3104 |         97 |
|    4 |    3 |      131072 |       4256 |        133 |
+------+------+-------------+------------+------------+
mysql> DELETE FROM clusterdb.simples LIMIT 1;
mysql> SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |      131072 |       5504 |        172 |
|    1 |    2 |      131072 |       1312 |         41 |
|    2 |    0 |      131072 |       5504 |        172 |
|    2 |    2 |      131072 |       1312 |         41 |
|    3 |    1 |      131072 |       3104 |         97 |
|    3 |    3 |      131072 |       4288 |        134 |
|    4 |    1 |      131072 |       3104 |         97 |
|    4 |    3 |      131072 |       4288 |        134 |
+------+------+-------------+------------+------------+
</pre>
<p>As a final example, we can check whether a table is being evenly sharded accross the data nodes (in this case a realy bad sharding key was chosen)&#8230;</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql> CREATE TABLE simples (id INT NOT NULL AUTO_INCREMENT, \
        species VARCHAR(20) DEFAULT "Human", 
        PRIMARY KEY(id, species)) engine=ndb PARTITION BY KEY(species);

// Add some data

mysql> SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |           0 |          0 |          0 |
|    1 |    2 |      196608 |      11732 |        419 |
|    2 |    0 |           0 |          0 |          0 |
|    2 |    2 |      196608 |      11732 |        419 |
|    3 |    1 |           0 |          0 |          0 |
|    3 |    3 |           0 |          0 |          0 |
|    4 |    1 |           0 |          0 |          0 |
|    4 |    3 |           0 |          0 |          0 |
+------+------+-------------+------------+------------+
</pre>
<p>If you get chance to try out this new release then please let us know how you get on &#8211; either through a comment on this blog, a <a href="http://bugs.mysql.com/" title="MySQL bug report" target="_blank">MySQL bug report</a> or a post to the <a href="http://forums.mysql.com/list.php?25" title="MySQL Cluster Forum" target="_blank">MySQL Cluster Forum</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql-cluster/active-active-replication-performance-improvements-operational-enhancements-some-of-whats-available-in-the-new-mysql-cluster-7-4-2-dmr/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Replacing MEMORY storage engine with MySQL Cluster</title>
		<link>./../../mysql-cluster/replacing-memory-storage-engine-with-mysql-cluster-2/index.html</link>
					<comments>./../../mysql-cluster/replacing-memory-storage-engine-with-mysql-cluster-2/index.html#comments</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Tue, 13 Jul 2010 15:33:00 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[Memory]]></category>
		<category><![CDATA[MySQL]]></category>
		<guid isPermaLink="false">./../../index.html?p=1187</guid>

					<description><![CDATA[Many people use the MySQL MEMORY storage engine for applications where they don&#8217;t need their data to be highly available or even survive restarts. Where this works best is for applications that are dominated by reads and (obviously) where the data doesn&#8217;t need to survive any kinds of problems (or where it can be recovered]]></description>
										<content:encoded><![CDATA[<p>Many people use the MySQL MEMORY storage engine for applications where they don&#8217;t need their data to be highly available or even survive restarts. Where this works best is for applications that are dominated by reads and (obviously) where the data doesn&#8217;t need to survive any kinds of problems (or where it can be recovered from another source). Typical applications are :<a href="./../../wp-content/uploads/2010/07/Cluster-and-MEMORY-performance.jpg"><img loading="lazy" decoding="async" class="alignright size-medium wp-image-1184" title="Cluster and MEMORY performance" src="./../../wp-content/uploads/2010/07/Cluster-and-MEMORY-performance-300x180.jpg" alt="" width="300" height="180" /></a></p>
<div id="_mcePaste">
<ul>
<li>Caching of small tables to reduce the latency of database look-ups.</li>
<li>Simple session management (i.e. with no analytics or reporting on the session data).</li>
<li>Buffering of multiple updates for batched inserts into tables managed by other MySQL storage engines.  (Note requires additional custom application development).</li>
</ul>
</div>
<p>While great for some applications (at least initially), as the application requirements start to grow (need for transactions, data persistence/durability, increasing number of write operations, need to scale) then either you need to migrate away from MEMORY or implement more and more data management functionality needs in your application.</p>
<p>Why not consider using MySQL Cluster instead? While the headline Cluster configurations may scale out horizontally and provide 99.999+% availability, it is simple to configure out those features to provide a pure-memory, single host database as described in &#8220;<a href="./../../mysql-cluster/how-can-a-database-be-in-memory-and-durable-at-the-same-time/index.html" target="_blank">How can a database be in-memory and durable at the same time?</a>&#8220;. What&#8217;s more if/when you need to add extra capabilities such as ACID transactions, scalability and high availability then those features are all available to you.</p>
<p>If you&#8217;re constrained to a single server and your application only reads data then there is a performance impact in using MySQL Cluster (in benchmarks, throughput was 3x higher for MEMORY) <strong>but</strong> remember that you can scale out MySQL Cluster to increase performance and for models with modest write rates MySQL Cluster provides a massive performance boost even when constrained to 1 server (as shown in the graph at the head of this post, Cluster delivers a 30x improvement performance improvement when running a Sysbench benchmark &#8211; together with a 3x reduction in latency). The biggest single reason for the massive performance difference is that MySQL Cluster has row-based locks whereas MEMORY uses table-level locks.</p>
<p>For a more detailed comparison, take a look at the new &#8220;<a href="http://www.mysql.com/why-mysql/white-papers/mysql-wp_cluster-7.0_Cluster_MEMORY.php" target="_blank">Scaling Web Services with MySQL Cluster: An Alternative to the MySQL Memory Storage Engine</a>&#8221; white paper and/or listen to the associated <a href="http://www.mysql.com/news-and-events/web-seminars/display-551.html" target="_blank">webinar</a>.</p>
<h3>Migrating Data from The Memory Storage Engine to MySQL Cluster</h3>
<p>As a starting point, it is important to understand that the MySQL Server (mysqld) binary that is provided as part of MySQL Community Edition or MySQL Enterprise Server is not suitable for use with MySQL Cluster.  Therefore it is necessary to migrate your database to an instance of mysqld that is packaged with the MySQL Cluster software.</p>
<p>This post looks at how to migrate your data from a ‘regular’ MySQL Server to MySQL Cluster. Although MySQL Cluster is typically run over multiple servers to provide High Availability (HA), for this example migration it is run on a single server (the logic being that we’re replacing a MEMORY database that has no HA requirements). If you want to move to a HA configuration then the main change is that the MySQL Cluster configuration should include more nodes (processes) and they should be spread across multiple physical hosts. The example actually goes a step further in compromising HA and turns off the checkpointing of data to disk for the migrated tables – getting closer to the behavior of MEMORY tables.</p>
<p>For this example, there are assumed to be 2 MySQL installations on the server – the original binaries in <span style="color: #333399;">&lt;mysql-bin&gt;</span> and the ones for MySQL Cluster in <span style="color: #333399;">&lt;mysql-cluster-bin&gt;</span>.</p>
<p>Data in MyISAM and InnoDB tables (including system data such as user privileges and stored procedures) will appear in the new MySQL Server automatically.  By default the contents (but not schema) for the MEMORY tables will be lost. If it is important to keep that MEMORY data then use the mysqldump command to make a copy:</p>
<pre style="padding-left: 30px;"><span style="color: #333399;">[my_db]$ &lt;mysql-bin&gt;/mysqldump -h 127.0.0.1 -P3306 -u root --no-create-db --no-create-info --result-file=./data.txt --databases clusterdb &gt; memory_data.txt</span></pre>
<p>Create a new configuration file for the MySQL Cluster deployment:</p>
<p><span style="white-space: pre;"> </span><strong>my_db/conf/config.ini:</strong></p>
<pre style="padding-left: 60px;"><span style="color: #993300;">[ndbd default]
</span><span style="color: #993300;">noofreplicas=1
</span><span style="color: #993300;">datadir=/home/billy/mysql/my_db/data
</span><span style="color: #993300;">DataMemory=1000M
</span><span style="color: #993300;">IndexMemory=10M</span></pre>
<pre style="padding-left: 60px;"><span style="color: #993300;">[ndbd]
</span><span style="color: #993300;">hostname=localhost</span></pre>
<pre style="padding-left: 60px;"><span style="color: #993300;">[ndb_mgmd]
</span><span style="color: #993300;">hostname=localhost
</span><span style="color: #993300;">datadir=/home/billy/mysql/my_db/data</span></pre>
<pre style="padding-left: 60px;"><span style="color: #993300;">[mysqld]</span></pre>
<p>Start up the management node and data node for the Cluster:</p>
<pre style="padding-left: 30px;"><span style="color: #333399;">[my_db]$ &lt;mysql-cluster-bin&gt;/ndb_mgmd -f conf/config.ini --configdir=./conf/ --initial
</span><span style="color: #333399;">[my_db]$ &lt;mysql-cluster-bin&gt;/ndbd -c 127.0.0.1:1186</span></pre>
<p>Wait until the nodes are started:</p>
<pre style="padding-left: 30px;"><span style="color: #333399;">[my_db]$ &lt;mysql-cluster-bin&gt;/ndb_mgm -e show</span></pre>
<pre style="padding-left: 30px;"><span style="color: #333399;">Connected to Management Server at: localhost:1186
</span><span style="color: #333399;">Cluster Configuration
</span><span style="color: #333399;">---------------------</span></pre>
<pre style="padding-left: 30px;"><span style="color: #333399;">[ndbd(NDB)]</span><span style="white-space: pre;"><span style="color: #333399;">	</span></span><span style="color: #333399;"> 1 node(s)
</span><span style="color: #333399;">id=1</span><span style="white-space: pre;"><span style="color: #333399;">	</span></span><span style="color: #333399;"> @127.0.0.1</span><span style="white-space: pre;"><span style="color: #333399;">	</span></span><span style="color: #333399;"> (mysql-5.1.44 ndb-7.1.3, Nodegroup: 0, Master)</span></pre>
<pre style="padding-left: 30px;"><span style="color: #333399;">[ndb_mgmd(MGM)] 1 node(s)
</span><span style="color: #333399;">id=2</span><span style="white-space: pre;"><span style="color: #333399;">	</span></span><span style="color: #333399;"> @127.0.0.1</span><span style="white-space: pre;"><span style="color: #333399;">	</span></span><span style="color: #333399;">(mysql-5.1.44 ndb-7.1.3)</span></pre>
<pre style="padding-left: 30px;"><span style="color: #333399;">[mysqld(API)]</span><span style="white-space: pre;"><span style="color: #333399;">	</span></span><span style="color: #333399;"> 1 node(s)
</span><span style="color: #333399;">id=3 (not connected, accepting connect from any host)</span></pre>
<p>Edit the configuration file (from the original MySQL Server) by adding the highlighted rows:</p>
<p style="padding-left: 30px;"><strong>my_db/conf/my.cnf:</strong></p>
<pre style="padding-left: 60px;"><span style="color: #993300;">[mysqld]
</span><span style="color: #993300;">ndbcluster
</span><span style="color: #993300;">datadir=/home/billy/mysql/my_db/data
</span><span style="color: #993300;">basedir=/usr/local/mysqlc # The MySQL Cluster installation, not the original</span></pre>
<p>Stop the original MySQL Server:</p>
<pre style="padding-left: 30px;"><span style="color: #333399;">[my_db]$ &lt;mysql-bin&gt;/mysqladmin -u root -h 127.0.0.1 -P 3306 shutdown</span></pre>
<p>Start the new MySQL Server:</p>
<pre style="padding-left: 30px;"><span style="color: #333399;">[my_db]$ &lt;mysql-cluster-bin&gt;/mysqld --defaults-file=conf/my.cnf &amp;</span></pre>
<p>Make sure that the original database is upgraded so that the MySQL Cluster version of mysqld can properly use it and you get all of the benefits (for example, real-time reporting with ndbinfo):</p>
<pre style="padding-left: 30px;"><span style="color: #333399;">[my_db]$ &lt;mysql-cluster-bin&gt;/mysql_upgrade</span></pre>
<p>Convert the MEMORY tables into MySQL Cluster ones (engine=ndb) with checkpointing to disk (logging) turned off:</p>
<pre style="padding-left: 30px;"><span style="color: #333399;">[my_db]$ &lt;mysql-cluster-bin&gt;/ mysql -u root -h 127.0.0.1 -P 3306</span></pre>
<pre style="padding-left: 30px;"><span style="color: #333399;">mysql&gt; SET ndb_table_no_logging=1;
</span><span style="color: #333399;">mysql&gt; ALTER TABLE tab1 engine=ndb;
</span><span style="color: #333399;">mysql&gt; ALTER TABLE tab2 engine=ndb;
</span><span style="color: #333399;">mysql&gt; ALTER TABLE tab3 engine=ndb;
</span><span style="color: #333399;">mysql&gt; SET ndb_table_no_logging=0;</span></pre>
<p>If the contents of the MEMORY tables were backed up then that data can optionally be loaded at this point (original MyISAM and InnoDB table data will already be populated):</p>
<pre style="padding-left: 30px;"><span style="color: #333399;">mysql&gt; SOURCE memory_data.txt;</span></pre>
<p>Finally, if there is any intent to use MySQL replication with the new version of the database then check that each of the tables has a primary key defined. If there is a table without a primary key then either make one or more of the existing columns be the primary key or add a new, auto-incrementing one:</p>
<pre style="padding-left: 30px;"><span style="color: #333399;">mysql&gt; ALTER TABLE tab1 ADD COLUMN id BIGINT AUTO_INCREMENT PRIMARY KEY;</span></pre>
<p>This procedure involves loss of service while the data is migrated (it assumes that there is not enough memory available on the server for both databases to exist in parallel). If there is extra capacity available (at least during the migration) then it is possible to avoid the downtime by using replication.</p>
<p>In many cases, the migration would not be from a single MySQL Server to a single-server MySQL Cluster deployment, but instead from a pool of independent MySQL Servers (where the application shards data across them) to a multi-server MySQL deployment. This allows the application to stop sharding the data as all mysqld instances in the Cluster have visibility of all of the data. In this scenario, if the data from the original MySQL Servers needs to be maintained then a mysqldump would be performed on each of those Servers (for all tables) and the data loaded into any of the MySQL Servers in the MySQL Cluster deployment.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql-cluster/replacing-memory-storage-engine-with-mysql-cluster-2/feed/index.html</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
	</channel>
</rss>
