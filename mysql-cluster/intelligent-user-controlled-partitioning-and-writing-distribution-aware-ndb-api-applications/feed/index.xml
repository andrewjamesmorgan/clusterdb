<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>
	Comments on: Intelligent user-controlled partitioning and writing distribution-aware NDB API Applications	</title>
	<atom:link href="/mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications/feed" rel="self" type="application/rss+xml" />
	<link>/mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications</link>
	<description>Database technologies - especially around scalability and High Availability</description>
	<lastBuildDate>Fri, 22 Mar 2013 09:57:38 +0000</lastBuildDate>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>
		By: andrew		</title>
		<link>/mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications#comment-104</link>

		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 22 Mar 2013 09:57:38 +0000</pubDate>
		<guid isPermaLink="false">/?p=248#comment-104</guid>

					<description><![CDATA[In reply to &lt;a href=&quot;/mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications#comment-103&quot;&gt;Song Yi&lt;/a&gt;.

Song Yi,

 I&#039;m afraid you&#039;re exhaustin my knowledge on using the NDB API directly - might be time for you to open a Service Request so that the support team can look into it for you.

Andrew.]]></description>
			<content:encoded><![CDATA[<p>In reply to <a href="/mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications#comment-103">Song Yi</a>.</p>
<p>Song Yi,</p>
<p> I&#8217;m afraid you&#8217;re exhaustin my knowledge on using the NDB API directly &#8211; might be time for you to open a Service Request so that the support team can look into it for you.</p>
<p>Andrew.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Song Yi		</title>
		<link>/mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications#comment-103</link>

		<dc:creator><![CDATA[Song Yi]]></dc:creator>
		<pubDate>Fri, 22 Mar 2013 09:05:50 +0000</pubDate>
		<guid isPermaLink="false">/?p=248#comment-103</guid>

					<description><![CDATA[Andrew,

Yes, it is our case.
Take the services table in the above blog post as example,
We create an index on sub_id to speed up the search by sub_id.
Then, we invoke ndb index scan api by sub_id=1.

Will ndb automatically limit the scan on the single target node? As sub_id is partition key.
Note, the following dist aware api parameters are NOT set:
startTransaction(&quot;names&quot;, 1)
readTuples(parallel=1)

And I tested on lab, the ndbinfo.counters can NOT show which node are involved by index scan(range scan), because RANGE_SCANS counters are associated with the **DBTC** (transaction co-ordinator) kernel block.
The RANGE_SCANS counter always increase on only ONE node, I guess it is the TC node.]]></description>
			<content:encoded><![CDATA[<p>Andrew,</p>
<p>Yes, it is our case.<br />
Take the services table in the above blog post as example,<br />
We create an index on sub_id to speed up the search by sub_id.<br />
Then, we invoke ndb index scan api by sub_id=1.</p>
<p>Will ndb automatically limit the scan on the single target node? As sub_id is partition key.<br />
Note, the following dist aware api parameters are NOT set:<br />
startTransaction(&#8220;names&#8221;, 1)<br />
readTuples(parallel=1)</p>
<p>And I tested on lab, the ndbinfo.counters can NOT show which node are involved by index scan(range scan), because RANGE_SCANS counters are associated with the **DBTC** (transaction co-ordinator) kernel block.<br />
The RANGE_SCANS counter always increase on only ONE node, I guess it is the TC node.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: andrew		</title>
		<link>/mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications#comment-102</link>

		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 15 Mar 2013 11:01:17 +0000</pubDate>
		<guid isPermaLink="false">/?p=248#comment-102</guid>

					<description><![CDATA[In reply to &lt;a href=&quot;/mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications#comment-101&quot;&gt;Song Yi&lt;/a&gt;.

Hi Song Yi,

 note that you can still make the system distribution-aware if the sharding key is *part* of the primary key for each of your tables by specifying that column with PARTITION BY KEY. Is this possible in you case?

 To find out which data nodes are involved then you could look how the values change for each node using the ndbinfo.counters table http://dev.mysql.com/doc/refman/5.5/en/mysql-cluster-ndbinfo-counters.html

Regards, Andrew.]]></description>
			<content:encoded><![CDATA[<p>In reply to <a href="/mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications#comment-101">Song Yi</a>.</p>
<p>Hi Song Yi,</p>
<p> note that you can still make the system distribution-aware if the sharding key is *part* of the primary key for each of your tables by specifying that column with PARTITION BY KEY. Is this possible in you case?</p>
<p> To find out which data nodes are involved then you could look how the values change for each node using the ndbinfo.counters table <a href="http://dev.mysql.com/doc/refman/5.5/en/mysql-cluster-ndbinfo-counters.html" rel="nofollow ugc">http://dev.mysql.com/doc/refman/5.5/en/mysql-cluster-ndbinfo-counters.html</a></p>
<p>Regards, Andrew.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Song Yi		</title>
		<link>/mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications#comment-101</link>

		<dc:creator><![CDATA[Song Yi]]></dc:creator>
		<pubDate>Fri, 08 Mar 2013 08:40:40 +0000</pubDate>
		<guid isPermaLink="false">/?p=248#comment-101</guid>

					<description><![CDATA[Hi Andrew,

I have a question on distribution aware for ndb index scan.

http://www.mysql.com/why-mysql/white-papers/building-subscriber-databases-using-mysql-cluster/

On the above whitepaper, Figure 7: Optimizing Index Scans with NDB API,
index scan set the level of parallelism to 1;
Then index scan only run on one ndb node.

But our product sub tables really have 3 kinds of key, so can not partition all sub records on one ndb node group, may spread on 3 node groups.
So, we can not use dist aware solution, but we still want to check the index scan performance.

Our table index columns **include** partition key, so MySQL should know the index scan result records are partitioned on one ndb node group.
Then, will ndb index scan automatically limit the scan on the single target node?
Or, ndb index scan still do the scan on all nodes? This will waste many nodes resource, since they have no result records at all.]]></description>
			<content:encoded><![CDATA[<p>Hi Andrew,</p>
<p>I have a question on distribution aware for ndb index scan.</p>
<p><a href="http://www.mysql.com/why-mysql/white-papers/building-subscriber-databases-using-mysql-cluster/" rel="nofollow ugc">http://www.mysql.com/why-mysql/white-papers/building-subscriber-databases-using-mysql-cluster/</a></p>
<p>On the above whitepaper, Figure 7: Optimizing Index Scans with NDB API,<br />
index scan set the level of parallelism to 1;<br />
Then index scan only run on one ndb node.</p>
<p>But our product sub tables really have 3 kinds of key, so can not partition all sub records on one ndb node group, may spread on 3 node groups.<br />
So, we can not use dist aware solution, but we still want to check the index scan performance.</p>
<p>Our table index columns **include** partition key, so MySQL should know the index scan result records are partitioned on one ndb node group.<br />
Then, will ndb index scan automatically limit the scan on the single target node?<br />
Or, ndb index scan still do the scan on all nodes? This will waste many nodes resource, since they have no result records at all.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: andrew		</title>
		<link>/mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications#comment-100</link>

		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Mon, 10 Sep 2012 14:06:31 +0000</pubDate>
		<guid isPermaLink="false">/?p=248#comment-100</guid>

					<description><![CDATA[In reply to &lt;a href=&quot;/mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications#comment-99&quot;&gt;Jude&lt;/a&gt;.

Hi Jude,

 partitioning is a little different with MySQL Cluster as it defines how tables should be partitioned between node groups which can in turn have a big impact on latency and throughput. &lt;a href=&quot;/mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications/&quot; title=&quot;Optimize MySQL Cluster performance with partitioning&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;This post&lt;/a&gt; helps explain how to optimize your schema/application to exploit this.

 By default, the Primary Key is the partition key and is hashed to identify the partition. You can override this to indicate that only a subset of the columns from a multi-column PK should be used as the partition key. You can do this when creating the table or later using ALTER TABLE. Wherever you define it, it takes effect no matter how you access the database (i.e. all mysqld, the NDB API or other native APIs (that all call the NDB API).

 In other words, you can pre-create the table and override the default partitioning key through any mysqld.

 I&#039;m not certain how the persistent annotation is used within ClusterJ but it can&#039;t hurt to set it to match what you&#039;ve defined in your schema as it may help performance.

Andrew.]]></description>
			<content:encoded><![CDATA[<p>In reply to <a href="/mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications#comment-99">Jude</a>.</p>
<p>Hi Jude,</p>
<p> partitioning is a little different with MySQL Cluster as it defines how tables should be partitioned between node groups which can in turn have a big impact on latency and throughput. <a href="/mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications/" title="Optimize MySQL Cluster performance with partitioning" target="_blank" rel="nofollow">This post</a> helps explain how to optimize your schema/application to exploit this.</p>
<p> By default, the Primary Key is the partition key and is hashed to identify the partition. You can override this to indicate that only a subset of the columns from a multi-column PK should be used as the partition key. You can do this when creating the table or later using ALTER TABLE. Wherever you define it, it takes effect no matter how you access the database (i.e. all mysqld, the NDB API or other native APIs (that all call the NDB API).</p>
<p> In other words, you can pre-create the table and override the default partitioning key through any mysqld.</p>
<p> I&#8217;m not certain how the persistent annotation is used within ClusterJ but it can&#8217;t hurt to set it to match what you&#8217;ve defined in your schema as it may help performance.</p>
<p>Andrew.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Jude		</title>
		<link>/mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications#comment-99</link>

		<dc:creator><![CDATA[Jude]]></dc:creator>
		<pubDate>Sat, 01 Sep 2012 15:10:07 +0000</pubDate>
		<guid isPermaLink="false">/?p=248#comment-99</guid>

					<description><![CDATA[Hi Andrew,

Nice post explaining about partitioning of rows in the MySQL cluster. 

Would you happen to have an example of how to partition using ClusterJ? I&#039;m using ClusterJ and i&#039;m about to use partitioning to get a better performance, how ever, i have a few confusions and hoping you would clear it for me.

1. Since i&#039;m using ClusterJ, would defining the partition key column(s) help if it is just defined in the CREATE TABLE DDL? (i think only mysqld would understand this).. does clusterJ understand the partition key from the DDL and automatically partition rows during inserts via this mechanism?

2. ClusterJ uses annotations for defining partition keys. If i just define the partition key annotation for any column, would the records be automatically partitioned for any inserts that are executed? Or is it mandatory to call &#039;session.setPartitionKey(Table.class, Paritition-key-value)&#039; during all my inserts? Considering that some tables use composite primary keys as well.]]></description>
			<content:encoded><![CDATA[<p>Hi Andrew,</p>
<p>Nice post explaining about partitioning of rows in the MySQL cluster. </p>
<p>Would you happen to have an example of how to partition using ClusterJ? I&#8217;m using ClusterJ and i&#8217;m about to use partitioning to get a better performance, how ever, i have a few confusions and hoping you would clear it for me.</p>
<p>1. Since i&#8217;m using ClusterJ, would defining the partition key column(s) help if it is just defined in the CREATE TABLE DDL? (i think only mysqld would understand this).. does clusterJ understand the partition key from the DDL and automatically partition rows during inserts via this mechanism?</p>
<p>2. ClusterJ uses annotations for defining partition keys. If i just define the partition key annotation for any column, would the records be automatically partitioned for any inserts that are executed? Or is it mandatory to call &#8216;session.setPartitionKey(Table.class, Paritition-key-value)&#8217; during all my inserts? Considering that some tables use composite primary keys as well.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: admin		</title>
		<link>/mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications#comment-98</link>

		<dc:creator><![CDATA[admin]]></dc:creator>
		<pubDate>Tue, 06 Oct 2009 09:36:22 +0000</pubDate>
		<guid isPermaLink="false">/?p=248#comment-98</guid>

					<description><![CDATA[In reply to &lt;a href=&quot;/mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications#comment-97&quot;&gt;Mike van Lammeren&lt;/a&gt;.

Hi Mike,

 in general, MySQL Cluster performs best when an individual transaction can be handled by a single data node. As all of the data is in memory, it is extremely fast for the data node to work on that data. Where it gets slower is when there needs to be lots of messaging between nodes.

 There are some cases where the MySQL Server node can be smart and break up the work between data nodes and so get the benefits of adding parallelism and if the application is only processing one transaction at a time then that might improve performance. It&#039;s more typical with Cluster though that the applications would be working on multiple sub_ids at the same time and so that is where you leverage the power of multiple, shared-nothing data nodes.

The good news is that it&#039;s extremely simple to change the partitioning for an existing database and so the best answer is to try it for yourself with your schema and application :)

Andrew.]]></description>
			<content:encoded><![CDATA[<p>In reply to <a href="/mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications#comment-97">Mike van Lammeren</a>.</p>
<p>Hi Mike,</p>
<p> in general, MySQL Cluster performs best when an individual transaction can be handled by a single data node. As all of the data is in memory, it is extremely fast for the data node to work on that data. Where it gets slower is when there needs to be lots of messaging between nodes.</p>
<p> There are some cases where the MySQL Server node can be smart and break up the work between data nodes and so get the benefits of adding parallelism and if the application is only processing one transaction at a time then that might improve performance. It&#8217;s more typical with Cluster though that the applications would be working on multiple sub_ids at the same time and so that is where you leverage the power of multiple, shared-nothing data nodes.</p>
<p>The good news is that it&#8217;s extremely simple to change the partitioning for an existing database and so the best answer is to try it for yourself with your schema and application 🙂</p>
<p>Andrew.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Mike van Lammeren		</title>
		<link>/mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications#comment-97</link>

		<dc:creator><![CDATA[Mike van Lammeren]]></dc:creator>
		<pubDate>Wed, 30 Sep 2009 21:43:50 +0000</pubDate>
		<guid isPermaLink="false">/?p=248#comment-97</guid>

					<description><![CDATA[I am trying to understand the ramifications of setting &quot;partition by key&quot; on the &quot;services&quot; table. By storing all the &quot;services&quot; records with the associated &quot;names&quot; record, aren&#039;t we preventing the ndbd nodes from working on a query in parallel?

If there are many hundreds or thousands of &quot;services&quot; records per &quot;names&quot; record, then wouldn&#039;t it be better if they were spread around? So that each of the 4 nodes, for example, could pull 1/4 of the records?

What am I missing?]]></description>
			<content:encoded><![CDATA[<p>I am trying to understand the ramifications of setting &#8220;partition by key&#8221; on the &#8220;services&#8221; table. By storing all the &#8220;services&#8221; records with the associated &#8220;names&#8221; record, aren&#8217;t we preventing the ndbd nodes from working on a query in parallel?</p>
<p>If there are many hundreds or thousands of &#8220;services&#8221; records per &#8220;names&#8221; record, then wouldn&#8217;t it be better if they were spread around? So that each of the 4 nodes, for example, could pull 1/4 of the records?</p>
<p>What am I missing?</p>
]]></content:encoded>
		
			</item>
	</channel>
</rss>
