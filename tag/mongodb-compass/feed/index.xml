<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>MongoDB Compass &#8211; Andrew Morgan on Databases</title>
	<atom:link href="/tag/mongodb-compass/feed" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Database technologies - especially around scalability and High Availability</description>
	<lastBuildDate>Tue, 22 Nov 2016 13:18:47 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>Adding Document Validation Rules Using MongoDB Compass 1.5</title>
		<link>/mongodb/adding-document-validation-rules-using-mongodb-compass-1-5</link>
					<comments>/mongodb/adding-document-validation-rules-using-mongodb-compass-1-5#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Tue, 22 Nov 2016 13:18:47 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[compass]]></category>
		<category><![CDATA[Document Validation]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Compass]]></category>
		<guid isPermaLink="false">/?p=4305</guid>

					<description><![CDATA[Adding Document Validation Rules Using MongoDB Compass 1.5 This post looks at a new feature in MongoDB Compass 1.5 (in beta at the time of writing) which allows document validation rules to be added from the GUI rather from the mongo shell command line. This makes it easy to create and modify rules that ensure]]></description>
										<content:encoded><![CDATA[<h1>Adding Document Validation Rules Using MongoDB Compass 1.5</h1>
<p>This post looks at a new feature in <a href="https://www.mongodb.com/products/compass" title="MongoDB Compass – the GUI for MongoDB">MongoDB Compass</a> 1.5 (in beta at the time of writing) which allows document validation rules to be added from the GUI rather from the <code>mongo</code> shell command line. This makes it easy to create and modify rules that ensure that all documents written to a collection contain the data you expect to be there.</p>
<h2>Introduction</h2>
<p>One of MongoDB’s primary attractions for developers is that it gives them the ability to start application development without first needing to define a formal schema. Operations teams appreciate the fact that they don&#8217;t need to perform a time-consuming schema upgrade operation every time the developers need to store a different attribute. For business leaders, the application gets launched much faster, and new features can be rolled out more frequently. MongoDB powers agility.</p>
<p>Many projects reach a point where it&#8217;s necessary to enforce rules on what&#8217;s being stored in the database – for example, that for any document in a particular collection, you can be certain that specific attributes are present in every document. Reasons for this include:</p>
<ul>
<li>Different development teams can work with the same data, each needing to know what they can expect to find in a particular collection.</li>
<li>Development teams working on different applications can be spread over multiple sites, which means that a clear agreement on the format of shared data is important.</li>
<li>Development teams from different companies may be working with the same collections; misunderstandings about what data should be present can lead to issues.</li>
</ul>
<p>As an example, an e-commerce website may centralize product catalog feeds from multiple vendors into a single collection. If one of the vendors alters the format of its product catalog, global catalog searches could fail.</p>
<p>To date, this resulted in developers building their own validation logic &#8211; either within the application code (possibly multiple times for different applications) or by adding middleware such as Mongoose.</p>
<p>To address the challenges discussed above, while at the same time maintaining the benefits of a dynamic schema, MongoDB 3.2 introduced <a href="https://docs.mongodb.com/v3.2/core/document-validation/" title="Validating documents in MongoDB">document validations</a>. Adding and viewing validation rules required understanding the correct commands to run from the <code>mongo</code> shell&#8217;s command line.</p>
<p><a href="https://www.mongodb.com/products/compass" title="The Easiest Way to Explore and Manipulate Your MongoDB Data">MongoDB Compass</a> 1.5 allows users to view, add, and modify document validation rules through its GUI, making them more accessible to both developers and DBAs.</p>
<h2>Validating Documents in MongoDB</h2>
<p>Document Validation provides significant flexibility to customize which parts of the documents are <strong>and are not</strong> validated for any collection. For any attribute it might be appropriate to check:</p>
<ul>
<li>That the attribute exists</li>
<li>If an attribute does exist, that it is of the correct type</li>
<li>That the value is in a particular format (e.g., regular expressions can be used to check if the contents of the string matches a particular pattern)</li>
<li>That the value falls within a given range</li>
</ul>
<p>Further, it may be necessary to combine these checks – for example that the document contains the user&#8217;s name <em>and</em> either their email address <em>or</em> phone number, <em>and</em> if the email address does exist, then it must be correctly formed.</p>
<p>Adding the validation checks from the command line is intuitive to developers or DBAs familiar with the MongoDB query language as it uses the same expression syntax as a <code>find</code> query to search the database. For others, it can be a little intimidating.</p>
<p>As an example, the following snippet adds validations to the <code>contacts</code> collection that validates:</p>
<ul>
<li>The year of birth is no later than 1994</li>
<li>The document contains a phone number and/or an email address</li>
<li>When present, the phone number and email address are strings</li>
</ul>
<pre><code>db.runCommand({
   collMod: "contacts",
   validator: { 
      $and: [
        {yearOfBirth: {$lte: 1994}},
        {$or: [ 
                  {"contact.phone": { $type: "string"}}, 
                  {"email": { $type: "string"}}
              ]}]
    }})
</code></pre>
<p>Note that <a href="https://docs.mongodb.com/manual/reference/operator/query/type/" title="$type selects the documents where the value of the field is an instance of the specified BSON type.">types can be specified using either a number or a string alias</a>.</p>
<p>Wouldn&#8217;t it be nice to be able to define these rules through a GUI rather than from the command line?</p>
<h2>Using MongoDB Compass to Add Document Validation Rules</h2>
<p>If you don&#8217;t already have MongoDB Compass 1.5 (or later) installed, <a href="https://www.mongodb.com/download-center#compass" title="Download MongoDB Compass – GUI data management tool for MongoDB">download it</a> and start the application. You&#8217;ll then be asked to provide details on how to connect to your database.</p>
<p>MongoDB Compass is free for evaluation and for use in development, for production, a <a href="https://www.mongodb.com/products/mongodb-professional" title="Expert support and a comprehensive management platform for MongoDB">MongoDB Professional</a> of <a href="https://www.mongodb.com/products/mongodb-enterprise-advanced" title="The Best Way to Run MongoDB in Your Data Center. Supported. Secure. Automated.">MongoDB Enterprise Advanced</a> subscription is required.</p>
<p>If you don&#8217;t have a database to test this on, the simplest option is to <a href="https://www.mongodb.com/cloud" title="MongoDB Hosted Service in the cloud – MongoDB Atlas">create a new MongoDB Atlas cluster</a>. Details on launching a MongoDB Atlas cluster can be found in <a href="https://www.mongodb.com/blog/post/using-mongodb-atlas-from-your-favorite-language-or-framework">this post</a>.</p>
<p>Note that MongoDB Compass currently only accepts a single server address rather than the list of replica set members in the standard Atlas connect string and so it&#8217;s necessary to explicitly provide Compass with the address of the current primary – find that by clicking on the cluster in the Atlas GUI (Figure 1).</p>
<div id="attachment_4307" style="width: 290px" class="wp-caption alignleft"><a href="/wp-content/uploads/2016/11/MongoDB_Atlas_identify_primary.png"><img decoding="async" aria-describedby="caption-attachment-4307" class="wp-image-4307 size-medium" src="/wp-content/uploads/2016/11/MongoDB_Atlas_identify_primary-300x204.png" alt="Identify the replica set primary" width="280" srcset="/wp-content/uploads/2016/11/MongoDB_Atlas_identify_primary-300x204.png 300w, /wp-content/uploads/2016/11/MongoDB_Atlas_identify_primary.png 505w" sizes="(max-width: 300px) 100vw, 300px" /></a><p id="caption-attachment-4307" class="wp-caption-text">Figure 1: Identify the replica set primary</p></div>
<div id="attachment_4309" style="width: 240px" class="wp-caption alignright"><a href="/wp-content/uploads/2016/11/Connect_MongoDB_Compass_to_MongoDB_Atlas.png"><img decoding="async" aria-describedby="caption-attachment-4309" class="wp-image-4309 size-medium" src="/wp-content/uploads/2016/11/Connect_MongoDB_Compass_to_MongoDB_Atlas-235x300.png" alt="Connect MongoDB Compass to MongoDB Atlas" width="230" srcset="/wp-content/uploads/2016/11/Connect_MongoDB_Compass_to_MongoDB_Atlas-235x300.png 235w, /wp-content/uploads/2016/11/Connect_MongoDB_Compass_to_MongoDB_Atlas.png 496w" sizes="(max-width: 235px) 100vw, 235px" /></a><p id="caption-attachment-4309" class="wp-caption-text">Figure 2: Connect MongoDB Compass to MongoDB Atlas</p></div>
<p>The connection panel can then be populated as shown in Figure 2.</p>
<h3>Load Data and Check in MongoDB Compass</h3>
<p>If you don&#8217;t already have a populated MongoDB collection, create one now. For example, use <code>curl</code> to download a pre-prepared JSON file containing contact data and use <a href="https://docs.mongodb.com/manual/reference/program/mongoimport/" title="Import JSON, CSV, or TSV data into MongoDB"><code>mongoimport</code></a> to load it into your database:</p>
<pre><code class="bash">curl -o contacts.json http://clusterdb.com/upload/contacts.json
mongoimport -h cluster0-shard-00-00-qfovx.mongodb.net -d clusterdb -c contacts --ssl -u billy -p SECRET --authenticationDatabase admin contacts.json
</code></pre>
<p>Connect MongoDB Compass to your database (Figure 3).</p>
<div id="attachment_4310" style="width: 1286px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/11/connect_compass_to_atlas.png"><img fetchpriority="high" decoding="async" aria-describedby="caption-attachment-4310" class="wp-image-4310 size-full" src="/wp-content/uploads/2016/11/connect_compass_to_atlas.png" alt="Connect MongoDB Compass to database" width="1276" height="737" srcset="/wp-content/uploads/2016/11/connect_compass_to_atlas.png 1276w, /wp-content/uploads/2016/11/connect_compass_to_atlas-300x173.png 300w, /wp-content/uploads/2016/11/connect_compass_to_atlas-768x444.png 768w, /wp-content/uploads/2016/11/connect_compass_to_atlas-1024x591.png 1024w" sizes="(max-width: 1276px) 100vw, 1276px" /></a><p id="caption-attachment-4310" class="wp-caption-text">Figure 3: Connect MongoDB Compass to database</p></div>
<p>Select the <em>contacts</em> data and browse the schema (Figure 4).</p>
<div id="attachment_4311" style="width: 1292px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/11/compass_check_schema.png"><img decoding="async" aria-describedby="caption-attachment-4311" class="wp-image-4311 size-full" src="/wp-content/uploads/2016/11/compass_check_schema.png" alt="Check schema in MongoDB Compass" width="1282" height="739" srcset="/wp-content/uploads/2016/11/compass_check_schema.png 1282w, /wp-content/uploads/2016/11/compass_check_schema-300x173.png 300w, /wp-content/uploads/2016/11/compass_check_schema-768x443.png 768w, /wp-content/uploads/2016/11/compass_check_schema-1024x590.png 1024w" sizes="(max-width: 1282px) 100vw, 1282px" /></a><p id="caption-attachment-4311" class="wp-caption-text">Figure 4: Check schema in MongoDB Compass</p></div>
<p>Browse some documents (Figure 5).</p>
<div id="attachment_4312" style="width: 1290px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/11/compass_browse_documents.png"><img decoding="async" aria-describedby="caption-attachment-4312" class="size-full wp-image-4312" src="/wp-content/uploads/2016/11/compass_browse_documents.png" alt="Browse documents using MongoDB Compass" width="1280" height="740" srcset="/wp-content/uploads/2016/11/compass_browse_documents.png 1280w, /wp-content/uploads/2016/11/compass_browse_documents-300x173.png 300w, /wp-content/uploads/2016/11/compass_browse_documents-768x444.png 768w, /wp-content/uploads/2016/11/compass_browse_documents-1024x592.png 1024w" sizes="(max-width: 1280px) 100vw, 1280px" /></a><p id="caption-attachment-4312" class="wp-caption-text">Figure 5: Browse documents using MongoDB Compass</p></div>
<h3>Add Document Validation Rules</h3>
<p>In this section, we build the document validation rule shown earlier.</p>
<p>Navigate to the Validation tab in MongoDB Compass GUI and select the desired <em>validation action</em> and <em>validation level</em>. The effects of these settings are shown in Figure 6. Any warnings generated by the rules are written to the MongoDB log.</p>
<div id="attachment_4313" style="width: 1610px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/11/document_validation_settings.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4313" class="size-full wp-image-4313" src="/wp-content/uploads/2016/11/document_validation_settings.png" alt="MongoDB document validation configuration parameters" width="1600" height="662" srcset="/wp-content/uploads/2016/11/document_validation_settings.png 1600w, /wp-content/uploads/2016/11/document_validation_settings-300x124.png 300w, /wp-content/uploads/2016/11/document_validation_settings-768x318.png 768w, /wp-content/uploads/2016/11/document_validation_settings-1024x424.png 1024w" sizes="auto, (max-width: 1600px) 100vw, 1600px" /></a><p id="caption-attachment-4313" class="wp-caption-text">Figure 6: MongoDB document validation configuration parameters</p></div>
<p>When adding document validation rules to an existing collection, you may want to start with fairly permissive rules so that existing applications aren&#8217;t broken before you have chance to clean things up. Once you&#8217;re confident that all applications are following the rules you could then become stricter. Figure 7 shows a possible life cycle for a collection.</p>
<div id="attachment_4314" style="width: 1431px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/11/colllection_lifecycle.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4314" class="size-full wp-image-4314" src="/wp-content/uploads/2016/11/colllection_lifecycle.png" alt="Life cycle of a MongoDB collection" width="1421" height="250" srcset="/wp-content/uploads/2016/11/colllection_lifecycle.png 1421w, /wp-content/uploads/2016/11/colllection_lifecycle-300x53.png 300w, /wp-content/uploads/2016/11/colllection_lifecycle-768x135.png 768w, /wp-content/uploads/2016/11/colllection_lifecycle-1024x180.png 1024w" sizes="auto, (max-width: 1421px) 100vw, 1421px" /></a><p id="caption-attachment-4314" class="wp-caption-text">Figure 7: Life cycle of a MongoDB collection</p></div>
<p>This post is starting with a new collection and so you can go straight to <em>error</em>/<em>strict</em> as shown in Figure 8.</p>
<div id="attachment_4315" style="width: 1288px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/11/error_strict.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4315" class="size-full wp-image-4315" src="/wp-content/uploads/2016/11/error_strict.png" alt="Set document validation to error/strict" width="1278" height="447" srcset="/wp-content/uploads/2016/11/error_strict.png 1278w, /wp-content/uploads/2016/11/error_strict-300x105.png 300w, /wp-content/uploads/2016/11/error_strict-768x269.png 768w, /wp-content/uploads/2016/11/error_strict-1024x358.png 1024w" sizes="auto, (max-width: 1278px) 100vw, 1278px" /></a><p id="caption-attachment-4315" class="wp-caption-text">Figure 8: Set document validation to error/strict</p></div>
<p>Multiple rules for the document can then be added using the GUI (Figure 9). Note that the rule for the email address uses a regular expression (<code>^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$</code>) to test that the address is properly formatted – going further than the original rule.</p>
<div id="attachment_4316" style="width: 1276px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/11/compass_define_validation_rules.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4316" class="size-full wp-image-4316" src="/wp-content/uploads/2016/11/compass_define_validation_rules.png" alt="Add new document validation rule through MongoDB Compass" width="1266" height="609" srcset="/wp-content/uploads/2016/11/compass_define_validation_rules.png 1266w, /wp-content/uploads/2016/11/compass_define_validation_rules-300x144.png 300w, /wp-content/uploads/2016/11/compass_define_validation_rules-768x369.png 768w, /wp-content/uploads/2016/11/compass_define_validation_rules-1024x493.png 1024w" sizes="auto, (max-width: 1266px) 100vw, 1266px" /></a><p id="caption-attachment-4316" class="wp-caption-text">Figure 9: Add new document validation rule through MongoDB Compass</p></div>
<p>Clicking <em>UPDATE</em> applies the change and then you can review it by pressing the <em>JSON</em> button (Figure 10).</p>
<div id="attachment_4317" style="width: 1286px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/11/json_view_of_validation_rule.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4317" class="size-full wp-image-4317" src="/wp-content/uploads/2016/11/json_view_of_validation_rule.png" alt="JSON view of new document validation rule" width="1276" height="616" srcset="/wp-content/uploads/2016/11/json_view_of_validation_rule.png 1276w, /wp-content/uploads/2016/11/json_view_of_validation_rule-300x145.png 300w, /wp-content/uploads/2016/11/json_view_of_validation_rule-768x371.png 768w, /wp-content/uploads/2016/11/json_view_of_validation_rule-1024x494.png 1024w" sizes="auto, (max-width: 1276px) 100vw, 1276px" /></a><p id="caption-attachment-4317" class="wp-caption-text">Figure 10: JSON view of new document validation rule</p></div>
<p>At this point, a problem appears. Compass has combined the 3 sub-rules with an <strong>and</strong> relationship but our intent was to test that the document contained either an email address <strong>or</strong> a phone number and that <code>yearOfBirth</code> was no later than 1994. Fortunately, for these more complex checks, the JSON can be altered directly within Compass:</p>
<pre><code>{
  "$and": [
    {"yearOfBirth": {"$lte": 1994}}, 
    {
      "$or": [
        {"contact.email": {
          "$regex": "^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$",
          "$options": ""
          }
        },
        {
          "$and": [
            {"contact.phone": {"$type": 2}},
            {"contact.email": {"$exists": false}}
          ]
        }
      ]
    }
  ]
}
</code></pre>
<p>Paste the refined rule into Compass and press <em>UPDATE</em> (Figure 11).</p>
<div id="attachment_4318" style="width: 1289px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/11/manually_edit_rules.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4318" class="size-full wp-image-4318" src="/wp-content/uploads/2016/11/manually_edit_rules.png" alt="Manually edit validation rules in MongoDB Compass" width="1279" height="624" srcset="/wp-content/uploads/2016/11/manually_edit_rules.png 1279w, /wp-content/uploads/2016/11/manually_edit_rules-300x146.png 300w, /wp-content/uploads/2016/11/manually_edit_rules-768x375.png 768w, /wp-content/uploads/2016/11/manually_edit_rules-1024x500.png 1024w" sizes="auto, (max-width: 1279px) 100vw, 1279px" /></a><p id="caption-attachment-4318" class="wp-caption-text">Figure 11: Manually edit validation rules in MongoDB Compass</p></div>
<p>Recall that this rule checks that the <code>yearOfBirth</code> is no later than 1994 and that there is a phone number (formatted as a string)or a properly formatted email address.</p>
<h3>Test The Rules</h3>
<p>However you write to the database, the document validation rules are applied in the same way – through any of the drivers, or through the <code>mongo</code> shell. For this post we can test the rules directly from the MongoDB Compass GUI, from the <em>DOCUMENTS</em> tab. Select a document and try changing the <code>yearOfBirth</code> to a year later than 1994 as shown in Figure 12.</p>
<div id="attachment_4319" style="width: 1287px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/11/compass_failed_validation.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4319" class="size-full wp-image-4319" src="/wp-content/uploads/2016/11/compass_failed_validation.png" alt="hange fails document validation" width="1277" height="491" srcset="/wp-content/uploads/2016/11/compass_failed_validation.png 1277w, /wp-content/uploads/2016/11/compass_failed_validation-300x115.png 300w, /wp-content/uploads/2016/11/compass_failed_validation-768x295.png 768w, /wp-content/uploads/2016/11/compass_failed_validation-1024x394.png 1024w" sizes="auto, (max-width: 1277px) 100vw, 1277px" /></a><p id="caption-attachment-4319" class="wp-caption-text">Figure 12: Change fails document validation</p></div>
<h3>Find the Offending Documents Already in the Collection</h3>
<p>There are a number of ways to track down existing documents that don&#8217;t meet the new rules. A very simple option is to query the database using the negation of the rule definition by wrapping the validation document in a <code>$nor</code> clause:</p>
<pre><code>{"$nor": [
  {
    "$and": [
      {"yearOfBirth": {"$lte": 1994}}, 
      {
        "$or": [
          {"contact.email": {
            "$regex": "^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$",
            "$options": ""
            }
          },
          {"contact.phone": {"$type": 2}}
        ]
      }
    ]
  }]
}
</code></pre>
<p>The query document can be pasted into the query bar in Compass and then pressing <em>APPLY</em> reveals that there are 206 documents with <code>yearOfBirth</code> greater than 1994 – Figure 13.</p>
<div id="attachment_4320" style="width: 1286px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/11/find_offending_documents.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4320" class="size-full wp-image-4320" src="/wp-content/uploads/2016/11/find_offending_documents.png" alt="Find documents not matching the validation rules" width="1276" height="735" srcset="/wp-content/uploads/2016/11/find_offending_documents.png 1276w, /wp-content/uploads/2016/11/find_offending_documents-300x173.png 300w, /wp-content/uploads/2016/11/find_offending_documents-768x442.png 768w, /wp-content/uploads/2016/11/find_offending_documents-1024x590.png 1024w" sizes="auto, (max-width: 1276px) 100vw, 1276px" /></a><p id="caption-attachment-4320" class="wp-caption-text">Figure 13: Find documents not matching the validation rules</p></div>
<h5>Cleaning up Offending Documents</h5>
<p>Potentially more problematic is how to clean up the existing documents which do not match the validation rules, as you need to decide what should happen to them. The good news is that the same <code>$nor</code> document used above can be used as a filter when executing your chosen action.</p>
<p>For example, if you decided that the offending documents should not be in the collection at all then this command can be run from the <code>mongo</code> shell command line to delete them:</p>
<pre><code>use clusterdb
db.contacts.remove(
{"$nor": [
  {
    "$and": [
      {"yearOfBirth": {"$lte": 1994}}, 
      {
        "$or": [
          {"contact.email": {
            "$regex": "^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$",
            "$options": ""
            }
          },
          {"contact.phone": {"$type": 2}}
        ]
      }
    ]
  }]
})
</code></pre>
<h4>Another Example – Coping with Multiple Schema Versions</h4>
<p>A tricky problem to solve with RDBMSs is the versioning of data models; with MongoDB it&#8217;s very straight-forward to set up validations that can cope with different versions of documents, with each version having a different set of checks applied. In the example validation checks below, the following logic is applied:</p>
<ul>
<li>If the document is unversioned (possibly dating to the time before validations were added), then no checks are applied</li>
<li>For version 1, the document is checked to make sure that the <code>name</code> key exists</li>
<li>For version 2 documents, the type of the <code>name</code> key is also validated to ensure that it is a string</li>
</ul>
<pre><code>{"$or": [
  {version: {"$exists": false}},
  {"$and": [
    {version: 1},
    {Name: {"$exists": true}}
  ]},
  {"$and": [
    {version: 2},
    {Name: {"$exists": true, "$type": "string"}}
  ]}
]} 
</code></pre>
<p>In this way, multiple versions of documents can exist within the same collection, and the application can lazily up-version them over time. Note that the <code>version</code> attribute is user-defined.</p>
<h4>Where MongoDB Document Validation Excels (vs. RDBMSs)</h4>
<p>In MongoDB, document validation is simple to set up – especially now that it can be done through the MongoDB Compass GUI. You can avoid the maintenance headache of stored procedures – which for many types of validation would be required in an RDBMS – and because the familiar MongoDB query language is used, there is no new syntax to learn.</p>
<p>The functionality is very flexible and it can enforce constraints on as little or as much of the schema as required. You get the best of both worlds – a dynamic schema for rapidly changing, polymorphic data, with the option to enforce strict validation checks against specific attributes from the onset of your project, or much later on. You can also use the Compass GUI to find and modify individual, pre-existing documents that don&#8217;t follow any new rules. If you initially have no validations defined, they can still be added later – even once in production, across thousand of servers.</p>
<p>It is always a concern whether adding extra checks will impact the performance of the system; in our tests, document validation adds a negligible overhead.</p>
<h4>So, is all Data Validation Now Done in the Database?</h4>
<p>The answer is &#8220;probably not&#8221; – either because there&#8217;s a limit to what can be done in the database or because there will always be a more appropriate place for some checks. Here are some areas to consider:</p>
<ul>
<li>For a good user experience, checks should be made as early and as high up the stack as is sensible. For example, the format of an entered email address should be first checked in the browser rather than waiting for the request to be processed and an attempt made to write it to the database.</li>
<li>Any validations which need to compare values between keys, other documents, or external information cannot currently be implemented within the database.</li>
<li>Many checks are best made within the application&#8217;s business logic – for example &#8220;is this user allowed to use these services in their home country&#8221;; the checks in the database are primarily there to protect against coding errors.</li>
<li>If you need information on <strong>why</strong> the document failed validation, the developer or application will need to check the document against each of the sub-rules within the collection&#8217;s validation rule in turn as the error message doesn&#8217;t currently give this level of detail.</li>
</ul>
<h4>Summary</h4>
<p>In this post, we&#8217;ve taken a look at the powerful document validation functionality that was added back in MongoDB 3.2. We then explored how MongoDB Compass 1.5 adds the convenience of being able to define these rules through an intuitive GUI.</p>
<p>This is just one of the recent enhancements to MongoDB Compass; others include:</p>
<ul>
<li><a href="https://www.mongodb.com/blog/post/visualizing-your-data-with-mongodb-compass" title="CRUD operations in MongoDB Compass">Create, remove, update, delete, or clone existing documents</a></li>
<li>Provide real-time performance statistics</li>
<li><a href="https://www.mongodb.com/blog/post/visualizing-your-data-with-mongodb-compass" title="Visual Query Exlain in MongoDB Compass">Visualize query explain plans</a></li>
<li>Review index usage</li>
<li>Create new indexes</li>
</ul>
<p>A summary of the enhancements added in MongoDB Compass 1.4 &amp; 1.5 can be found in <a href="https://www.mongodb.com/collateral/mongodb-3-4-whats-new" title="What's new in MongoDB 3.4">MongoDB 3.4 – What&#8217;s New</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/adding-document-validation-rules-using-mongodb-compass-1-5/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Language-Specific Views in MongoDB 3.4</title>
		<link>/mongodb/language-specific-views-in-mongodb-3-4</link>
					<comments>/mongodb/language-specific-views-in-mongodb-3-4#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Wed, 16 Nov 2016 13:50:47 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[collations]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[mongodb 3.4]]></category>
		<category><![CDATA[MongoDB Compass]]></category>
		<category><![CDATA[views]]></category>
		<guid isPermaLink="false">/?p=4293</guid>

					<description><![CDATA[Language-Specific Views in MongoDB 3.4 Introduction This post shows you how to create multiple language-specific views on top of a common collection. Each view is optimized for its language with a collated index which only presents entries for documents in that language. Additionally, each view excludes some fields from the underlying collection – further limiting]]></description>
										<content:encoded><![CDATA[<h1>Language-Specific Views in MongoDB 3.4</h1>
<h4>Introduction</h4>
<p>This post shows you how to create multiple language-specific views on top of a common collection. Each view is optimized for its language with a collated index which only presents entries for documents in that language. Additionally, each view excludes some fields from the underlying collection – further limiting the data that can be seen through the that view. Finally, user-defined roles are created to restrict users to just the view(s) they should be able to see, ensuring they can only access the data that they&#8217;re entitled to.</p>
<p>In the course of setting up this environment, a number of features are demonstrated:</p>
<ul>
<li><strong><a href="https://docs.mongodb.com/master/core/views/#reference-views">Read-Only Views</a></strong> (<em>New in MongoDB 3.4</em>): DBAs can define non-materialized views that expose only a subset of data from an underlying collection, i.e. a view that filters out entire documents or specific fields, such as Personally Identifiable Information (PII) from sales data or health records. As a result, risks of data exposure are dramatically reduced. DBAs can define a view of a collection that&#8217;s generated from an aggregation over another collection(s) or view.</li>
<li><strong><a href="https://docs.mongodb.com/master/reference/collation/">Multiple Language Collations</a></strong> (<em>New in MongoDB 3.4</em>): Applications addressing global audiences require handling content that spans many languages. Each language has different rules governing the comparison and sorting of data. MongoDB collations allow users to build applications that adhere to these language-specific comparison rules for over 100 different languages and locales. Developers can specify collations for collections, indexes, views, or for individual operations.</li>
<li><strong><a href="https://docs.mongodb.com/manual/core/index-partial/">Partial Indexes</a></strong>: Partial indexes balance delivering good query performance while consuming fewer system resources. For example, consider an order processing application. The <code>order</code> collection is frequently queried by the application to display all incomplete orders for a particular user. Building an index on the userID field of the collection is necessary for good performance. However, only a small percentage of orders are in progress at a given time. Limiting the index on <code>userID</code> to contain only orders that are in the “active” state could reduce the number of index entries from millions to thousands, saving working set memory and disk space, while speeding up queries even further as smaller indexes result in faster searches.</li>
<li><strong><a href="https://docs.mongodb.com/manual/core/security-user-defined-roles/">User Defined Roles</a></strong>: User-defined roles, enable administrators to assign finely-grained privileges to users and applications, based on the specific functionality they require. MongoDB provides the ability to specify user privileges at both the database, collection, and view levels.</li>
<li><strong><a href="https://www.mongodb.com/products/compass">MongoDB Compass</a></strong>: MongoDB Compass is the easiest way for DBAs to explore and manage MongoDB data. As the GUI for MongoDB, Compass enables users to visually explore their data, and run ad-hoc queries in seconds – all with zero knowledge of MongoDB&#8217;s query language. The latest Compass release expands functionality to allow users to manipulate documents directly from the GUI, optimize performance, and create data governance controls. </li>
</ul>
<h4>The Data Set</h4>
<p>The example used in this post is built on a collection containing documents for customers from multiple countries – one of the fields indicates a customer&#8217;s country, but there is no field that identifies their spoken language. To fix that, we infer their language from their country to create a new <code>language</code> field in each document:</p>
<pre><code class="js">db.customers.updateMany(
    {country: "China"},
    {$set: {language: "Chinese"}})

db.customers.updateMany(
    {country: "Germany"},
    {$set: {language: "German"}})

db.customers.updateMany(
    {country: {$in: ["USA", "Canada", "United Kingdom"]}},
    {$set: {language: "English"}})
</code></pre>
<p>A typical document now looks like this:</p>
<pre><code class="js">db.customers.findOne()
{
    "_id" : ObjectId("57fb8fbb99b01440193088eb"),
    "first_name" : "Ben",
    "last_name" : "Dixon",
    "country" : "Germany",
    "avatar" : "https://robohash.org/quiseumquam.bmp?size=50x50&amp;set=set1",
    "ip_address" : "10.102.15.35",
    "dependents" : [
        {
            "name" : "Ben",
            "birthday" : "12-Apr-1994"
        },
        {
            "name" : "Lucas",
            "birthday" : "22-Jun-2016"
        },
        {
            "name" : "Erik",
            "birthday" : "05-Jul-2005"
        }
    ],
    "birthday" : "02-Jul-1964",
    "salary" : "£910070.80",
    "skills" : [
        {
            "skill" : "Cvent"
        },
        {
            "skill" : "TKI"
        }
    ],
    "gender" : "Male",
    "language" : "German"
}
</code></pre>
<p>You might ask why we need to add this extra field rather than simply calculating the language each time it&#8217;s needed? The answer is that multiple countries share the same language and partial indexes don&#8217;t allow us to use the <code>$or</code> or <code>$in</code> operators.</p>
<p>At this stage, the only index on the collection is on the <code>_id</code> field:</p>
<pre><code class="js">db.customers.getIndexes()
[
    {
        "v" : 2,
        "key" : {
            "_id" : 1
        },
        "name" : "_id_",
        "ns" : "production.customers"
    }
]
</code></pre>
<p>If you want to work through this example for yourself then the following steps will populate a collection called &#8220;customers&#8221; in a database called <code>production</code>:</p>
<pre><code class="bash">curl -o customers.tgz http://clusterdb.com/upload/customers.tgz
tar fxz customers.tgz
mongorestore
</code></pre>
<p>There should be 111,000 documents in the collection after running <code>mongorestore</code>:</p>
<pre><code class="js">use production
db.customers.findOne()
{
    "_id" : ObjectId("57fb8fbb99b01440193088eb"),
    "first_name" : "Ben",
    "last_name" : "Dixon",
    "country" : "Germany",
    "avatar" : "https://robohash.org/quiseumquam.bmp?size=50x50&amp;set=set1",
    "ip_address" : "10.102.15.35",
    "dependents" : [
        {
            "name" : "Ben",
            "birthday" : "12-Apr-1994"
        },
        {
            "name" : "Lucas",
            "birthday" : "22-Jun-2016"
        },
        {
            "name" : "Erik",
            "birthday" : "05-Jul-2005"
        }
    ],
    "birthday" : "02-Jul-1964",
    "salary" : "£910070.80",
    "skills" : [
        {
            "skill" : "Cvent"
        },
        {
            "skill" : "TKI"
        }
    ],
    "gender" : "Male",
    "language" : "German"
}

db.customers.count()
111000
</code></pre>
<h4>Adding Indexes</h4>
<p>Collations – allow values to be compared and sorted using rules specific to a local language. In this example, we are supporting 3 languages: English, German, and Chinese. For each of these languages, a collated index will later be used to correctly sort the customers based on their last and first name.</p>
<p>To this end, collation-specific, compound (<code>last_name</code> + <code>first_name</code>) indexes are created:</p>
<pre><code class="js">db.customers.createIndex( 
    {last_name: 1, first_name : 1 }, 
    {name: "chinese_name_index",
     collation: {locale: "zh" },
     partialFilterExpression: { language: "Chinese" } 
    }
);

db.customers.createIndex( 
    {last_name: 1, first_name : 1 }, 
    {name: "english_name_index",
     collation: {locale: "en" },
     partialFilterExpression: { language: "English" } 
    }
);

db.customers.createIndex( 
    {last_name: 1, first_name : 1 }, 
    {name: "german_name_index",
     collation: {locale: "de" },
     partialFilterExpression: { language: "German" } 
    }
);
</code></pre>
<p>The exact behaviour of comparisons and sorting using the collated index can be further refined by including additional parameters alongside the <code>locale</code> in the collation documentation. Details of these optional parameters can be found in the <a href="https://docs.mongodb.com/master/reference/collation/">collation documentation</a>.</p>
<p>Note that each of those indexes is partial, only containing entries for document where <code>language</code> is set to the matching value. This saves memory and disk space, and speeds up both reads and writes.</p>
<p>This is the final set of indexes:</p>
<pre><code class="js">db.customers.getIndexes()
[
    {
        "v" : 2,
        "key" : {
            "_id" : 1
        },
        "name" : "_id_",
        "ns" : "production.customers"
    },
    {
        "v" : 2,
        "key" : {
            "last_name" : 1,
            "first_name" : 1
        },
        "name" : "german_name_index",
        "ns" : "production.customers",
        "partialFilterExpression" : {
            "language" : "German"
        },
        "collation" : {
            "locale" : "de",
            "caseLevel" : false,
            "caseFirst" : "off",
            "strength" : 3,
            "numericOrdering" : false,
            "alternate" : "non-ignorable",
            "maxVariable" : "punct",
            "normalization" : false,
            "backwards" : false,
            "version" : "57.1"
        }
    },
    {
        "v" : 2,
        "key" : {
            "last_name" : 1,
            "first_name" : 1
        },
        "name" : "chinese_name_index",
        "ns" : "production.customers",
        "partialFilterExpression" : {
            "language" : "Chinese"
        },
        "collation" : {
            "locale" : "zh",
            "caseLevel" : false,
            "caseFirst" : "off",
            "strength" : 3,
            "numericOrdering" : false,
            "alternate" : "non-ignorable",
            "maxVariable" : "punct",
            "normalization" : false,
            "backwards" : false,
            "version" : "57.1"
        }
    },
    {
        "v" : 2,
        "key" : {
            "last_name" : 1,
            "first_name" : 1
        },
        "name" : "english_name_index",
        "ns" : "production.customers",
        "partialFilterExpression" : {
            "language" : "English"
        },
        "collation" : {
            "locale" : "en",
            "caseLevel" : false,
            "caseFirst" : "off",
            "strength" : 3,
            "numericOrdering" : false,
            "alternate" : "non-ignorable",
            "maxVariable" : "punct",
            "normalization" : false,
            "backwards" : false,
            "version" : "57.1"
        }
    }
]
</code></pre>
<h4>Create Views</h4>
<p>A view is created for each language to:</p>
<ul>
<li>Filter out any documents where the <code>language</code> field doesn&#8217;t match that of the view</li>
<li>Remove the <code>salary</code>, <code>country</code>, and <code>language</code> fields</li>
<li>Indicate which collation should be used</li>
</ul>
<pre><code class="js">db.createView(
    "chineseSpeakersRedacted",
    "customers",
    [
        {$match: {
            language: "Chinese",
            last_name: {$exists: true}
        }},
        {$project: {
            salary: 0, 
            country: 0,
            language: 0
            }
        }
    ],
    {collation: {locale: "zh"}}
)

db.createView(
    "englishSpeakersRedacted",
    "customers",
    [
        {$match: {
            language: "English",
            last_name: {$exists: true}
        }},
        {$project: {
            salary: 0, 
            country: 0,
            language: 0
            }
        }
    ],
    {collation: {locale: "en"}}
)

db.createView(
    "germanSpeakersRedacted",
    "customers",
    [
        {$match: {
            language: "German",
            last_name: {$exists: true}
        }},
        {$project: {
            salary: 0, 
            country: 0,
            language: 0
            }
        }
    ],
    {collation: {locale: "de"}}
)
</code></pre>
<p>You might ask why <code>last_name: {$exists: true}</code> is included in the <code>$match</code> stage? The reason is that it encourages the optimizer to use our language-specific partial indexes when using these views.</p>
<p>Note that this is using the <a href="https://docs.mongodb.com/manual/core/aggregation-pipeline/">MongoDB Aggregation Framework</a> and so you could add lots of other <a href="https://docs.mongodb.com/manual/reference/operator/aggregation/">operations</a>, including: unwinding arrays, looking up values from other collections, grouping data, and adding new, computed fields.</p>
<p>The views now appear like collections and can be queried in the same manner (note that they are ready-only):</p>
<pre><code class="js">show collections

chineseSpeakersRedacted
customers
englishSpeakersRedacted
germanSpeakersRedacted
system.views

db.germanSpeakersRedacted.find({last_name: "Cole"}, {first_name:1, _id:0, gender:1}).sort({first_name: 1})
{ "first_name" : "Amelie", "gender" : "Female" }
{ "first_name" : "Amelie", "gender" : "Female" }
{ "first_name" : "Amelie", "gender" : "Female" }
{ "first_name" : "Amelie", "gender" : "Female" }
{ "first_name" : "Amelie", "gender" : "Female" }
{ "first_name" : "Amelie", "gender" : "Female" }
{ "first_name" : "Amelie", "gender" : "Female" }
{ "first_name" : "Amelie", "gender" : "Female" }
{ "first_name" : "Amelie", "gender" : "Female" }
{ "first_name" : "Anna", "gender" : "Female" }
{ "first_name" : "Anna", "gender" : "Female" }
{ "first_name" : "Anna", "gender" : "Female" }
{ "first_name" : "Anna", "gender" : "Female" }
{ "first_name" : "Anna", "gender" : "Female" }
{ "first_name" : "Anna", "gender" : "Female" }
{ "first_name" : "Anna", "gender" : "Female" }
{ "first_name" : "Anna", "gender" : "Female" }
{ "first_name" : "Anton", "gender" : "Male" }
{ "first_name" : "Anton", "gender" : "Male" }
{ "first_name" : "Anton", "gender" : "Male" }
</code></pre>
<p>The query above searches for all documents where the <code>last_name</code> is <code>Cole</code> (because this query is using the German view, behind the scenes, all non-German documents have already been filtered out), discards all but the <code>first_name</code> and <code>gender</code> fields, and then sorts by the <code>first_name</code> (using the German collation).</p>
<p><code>explain()</code> confirms that the German collation index was used:</p>
<pre><code class="js">db.germanSpeakersRedacted.find({last_name: "Cole"}, {first_name:1, _id:0, gender:1}).sort({first_name: 1}).explain()
{
    "stages" : [
        {
            "$cursor" : {
                "query" : {
                    "$and" : [
                        {
                            "language" : "German",
                            "last_name" : {
                                "$exists" : true
                            }
                        },
                        {
                            "last_name" : "Cole"
                        }
                    ]
                },
                "fields" : {
                    "first_name" : 1,
                    "gender" : 1,
                    "_id" : 0
                },
                "queryPlanner" : {
                    "plannerVersion" : 1,
                    "namespace" : "production.customers",
                    "indexFilterSet" : false,
                    "parsedQuery" : {
                        "$and" : [
                            {
                                "language" : {
                                    "$eq" : "German"
                                }
                            },
                            {
                                "last_name" : {
                                    "$eq" : "Cole"
                                }
                            },
                            {
                                "last_name" : {
                                    "$exists" : true
                                }
                            }
                        ]
                    },
                    "collation" : {
                        "locale" : "de",
                        "caseLevel" : false,
                        "caseFirst" : "off",
                        "strength" : 3,
                        "numericOrdering" : false,
                        "alternate" : "non-ignorable",
                        "maxVariable" : "punct",
                        "normalization" : false,
                        "backwards" : false,
                        "version" : "57.1"
                    },
                    "winningPlan" : {
                        "stage" : "FETCH",
                        "filter" : {
                            "$and" : [
                                {
                                    "last_name" : {
                                        "$exists" : true
                                    }
                                },
                                {
                                    "language" : {
                                        "$eq" : "German"
                                    }
                                }
                            ]
                        },
                        "inputStage" : {
                            "stage" : "IXSCAN",
                            "keyPattern" : {
                                "last_name" : 1,
                                "first_name" : 1
                            },
                            "indexName" : "german_name_index",
                            "collation" : {
                                "locale" : "de",
                                "caseLevel" : false,
                                "caseFirst" : "off",
                                "strength" : 3,
                                "numericOrdering" : false,
                                "alternate" : "non-ignorable",
                                "maxVariable" : "punct",
                                "normalization" : false,
                                "backwards" : false,
                                "version" : "57.1"
                            },
                            "isMultiKey" : false,
                            "multiKeyPaths" : {
                                "last_name" : [ ],
                                "first_name" : [ ]
                            },
                            "isUnique" : false,
                            "isSparse" : false,
                            "isPartial" : true,
                            "indexVersion" : 2,
                            "direction" : "forward",
                            "indexBounds" : {
                                "last_name" : [
                                    "[\"-E?1\u0001\b\u0001\u0007\", \"-E?1\u0001\b\u0001\u0007\"]"
                                ],
                                "first_name" : [
                                    "[MinKey, MaxKey]"
                                ]
                            }
                        }
                    },
                    "rejectedPlans" : [ ]
                }
            }
        },
        {
            "$project" : {
                "language" : false,
                "country" : false,
                "salary" : false
            }
        },
        {
            "$sort" : {
                "sortKey" : {
                    "first_name" : 1
                }
            }
        },
        {
            "$project" : {
                "_id" : false,
                "gender" : true,
                "first_name" : true
            }
        }
    ],
    "ok" : 1
</code></pre>
<h4>User-Defined Roles – Limiting Access to the Views</h4>
<p>One of the reasons for creating the views was to protect some of the data (the customers&#8217; salaries) as not all users should see this information. At this point, all users can still access the base &#8220;customers&#8221; collection and so we&#8217;ve fallen short of that objective. User-defined roles to the rescue!</p>
<p>We create an <code>admin</code> user that has the built in <a href="https://docs.mongodb.com/manual/reference/built-in-roles/#root"><code>root</code> role</a> and so can access any database, create new users, and perform any other activity:</p>
<pre><code class="js">use admin
db.createUser({
    user: "admin",
    pwd: "secret",
    roles: [
        {role:"root",db:"admin"}
        ]
    })
</code></pre>
<p>The next step is to create a role that only gives its members read access to the <code>germanSpeakersRedacted</code> collection (within the <code>production</code> database):</p>
<pre><code class="js">use admin
db.createRole(
   {
     role: "germanViewer",
     privileges: [
       { resource: { db: "production", collection: "germanSpeakersRedacted" },  actions: [ "find" ] }
     ],
     roles: []
   }
)
</code></pre>
<p>You can then create one or more users that have <code>germanViewer</code> within their defined roles:</p>
<pre><code class="js">use admin
db.createUser({
    user: "germanIT",
    pwd: "secret",
    roles: [
        {role:"germanViewer",db:"admin"}
        ]
    })
</code></pre>
<p>Additional privileges can be added to existing roles using <a href="https://docs.mongodb.com/manual/reference/command/grantPrivilegesToRole/#dbcmd.grantPrivilegesToRole"><code>grantPrivilegesToRole</code></a> and extra roles can be assigned to existing users using <a href="https://docs.mongodb.com/manual/reference/command/grantRolesToUser/#dbcmd.grantRolesToUser"><code>grantRolesToUser</code></a>.</p>
<p>For these access controls to work, users must be created with appropriate permissions and the MongoDB server process must be started with the <code>--auth</code> option:</p>
<pre><code class="bash">mongod --auth
</code></pre>
<p>When connecting to the database as our newly-created <code>admin</code> user, the base <code>customers</code> collection is still accessible:</p>
<pre><code class="js">mongo -u admin -p secret --authenticationDatabase admin

use production
db.customers.findOne()

{
    "_id" : ObjectId("57fb8fbb99b01440193088eb"),
    "first_name" : "Ben",
    "last_name" : "Dixon",
    "country" : "Germany",
    "avatar" : "https://robohash.org/quiseumquam.bmp?size=50x50&amp;set=set1",
    "ip_address" : "10.102.15.35",
    "dependents" : [
        {
            "name" : "Ben",
            "birthday" : "12-Apr-1994"
        },
        {
            "name" : "Lucas",
            "birthday" : "22-Jun-2016"
        },
        {
            "name" : "Erik",
            "birthday" : "05-Jul-2005"
        }
    ],
    "birthday" : "02-Jul-1964",
    "salary" : "£910070.80",
    "skills" : [
        {
            "skill" : "Cvent"
        },
        {
            "skill" : "TKI"
        }
    ],
    "gender" : "Male",
    "language" : "German"
}
</code></pre>
<p>When connecting as the <code>germanIT</code> user, only the German view can be accessed:</p>
<pre><code class="js">mongo -u germanIT -p secret --authenticationDatabase admin

use production

show collections
2016-10-28T10:24:03.765+0100 E QUERY    [main] Error: listCollections failed: {
    "ok" : 0,
    "errmsg" : "not authorized on production to execute command { listCollections: 1.0, filter: {} }",
    "code" : 13,
    "codeName" : "Unauthorized"
} :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
DB.prototype._getCollectionInfosCommand@src/mongo/shell/db.js:805:1
DB.prototype.getCollectionInfos@src/mongo/shell/db.js:817:19
DB.prototype.getCollectionNames@src/mongo/shell/db.js:828:16
shellHelper.show@src/mongo/shell/utils.js:748:9
shellHelper@src/mongo/shell/utils.js:645:15
@(shellhelp2):1:1

db.customers.findOne()
2016-10-21T14:40:19.477+0100 E QUERY    [main] Error: error: {
    "ok" : 0,
    "errmsg" : "not authorized on production to execute command { find: \"customers\", filter: {}, limit: 1.0, singleBatch: true }",
    "code" : 13,
    "codeName" : "Unauthorized"
} :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
DBCommandCursor@src/mongo/shell/query.js:702:1
DBQuery.prototype._exec@src/mongo/shell/query.js:117:28
DBQuery.prototype.hasNext@src/mongo/shell/query.js:288:5
DBCollection.prototype.findOne@src/mongo/shell/collection.js:294:10
@(shell):1:1

db.germanSpeakersRedacted.findOne()
{
    "_id" : ObjectId("57fb8fbb99b01440193088eb"),
    "first_name" : "Ben",
    "last_name" : "Dixon",
    "avatar" : "https://robohash.org/quiseumquam.bmp?size=50x50&amp;set=set1",
    "ip_address" : "10.102.15.35",
    "dependents" : [
        {
            "name" : "Ben",
            "birthday" : "12-Apr-1994"
        },
        {
            "name" : "Lucas",
            "birthday" : "22-Jun-2016"
        },
        {
            "name" : "Erik",
            "birthday" : "05-Jul-2005"
        }
    ],
    "birthday" : "02-Jul-1964",
    "skills" : [
        {
            "skill" : "Cvent"
        },
        {
            "skill" : "TKI"
        }
    ],
    "gender" : "Male"
}
</code></pre>
<h4>MongoDB Compass – Viewing Views Graphically</h4>
<p>While the <code>mongo</code> shell is very powerful and flexible, it is often easier to understand and navigate your data graphically, this is where <a href="https://www.mongodb.com/products/compass">MongoDB Compass</a> is invaluable. The good news is that MongoDB Compass handles views in exactly the same way as it does collections.</p>
<p>In Figure 1, we can view the documents in the base, <code>customers</code>, collection. Note that the <code>salary</code> value is visible.</p>
<p><em><div id="attachment_4295" style="width: 1366px" class="wp-caption alignright"><a href="/wp-content/uploads/2016/11/Compass_original_schema.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4295" src="/wp-content/uploads/2016/11/Compass_original_schema.png" alt="View data in MongoDB base customers collection" width="1356" height="840" class="size-full wp-image-4295" srcset="/wp-content/uploads/2016/11/Compass_original_schema.png 1356w, /wp-content/uploads/2016/11/Compass_original_schema-300x186.png 300w, /wp-content/uploads/2016/11/Compass_original_schema-768x476.png 768w, /wp-content/uploads/2016/11/Compass_original_schema-1024x634.png 1024w" sizes="auto, (max-width: 1356px) 100vw, 1356px" /></a><p id="caption-attachment-4295" class="wp-caption-text">Figure 1: View data in base customers collection</p></div></em></p>
<p>Figure 2 confirms that the <code>salary</code> field has been removed from the German view.</p>
<div id="attachment_4298" style="width: 1366px" class="wp-caption alignright"><a href="/wp-content/uploads/2016/11/Compass_german_speakers.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4298" src="/wp-content/uploads/2016/11/Compass_german_speakers.png" alt="Salary has been redacted from the German view" width="1356" height="841" class="size-full wp-image-4298" srcset="/wp-content/uploads/2016/11/Compass_german_speakers.png 1356w, /wp-content/uploads/2016/11/Compass_german_speakers-300x186.png 300w, /wp-content/uploads/2016/11/Compass_german_speakers-768x476.png 768w, /wp-content/uploads/2016/11/Compass_german_speakers-1024x635.png 1024w" sizes="auto, (max-width: 1356px) 100vw, 1356px" /></a><p id="caption-attachment-4298" class="wp-caption-text">Figure 2: Salary has been redacted from the German view</p></div>
<p>In Figure 3, we see that only Chinese documents have been included in the Chinese view.</p>
<div id="attachment_4299" style="width: 1369px" class="wp-caption alignright"><a href="/wp-content/uploads/2016/11/Compass_Chinese_speakers.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4299" src="/wp-content/uploads/2016/11/Compass_Chinese_speakers.png" alt="Chinese view contains only Chinese documents" width="1359" height="841" class="size-full wp-image-4299" srcset="/wp-content/uploads/2016/11/Compass_Chinese_speakers.png 1359w, /wp-content/uploads/2016/11/Compass_Chinese_speakers-300x186.png 300w, /wp-content/uploads/2016/11/Compass_Chinese_speakers-768x475.png 768w, /wp-content/uploads/2016/11/Compass_Chinese_speakers-1024x634.png 1024w" sizes="auto, (max-width: 1359px) 100vw, 1359px" /></a><p id="caption-attachment-4299" class="wp-caption-text">Figure 3: Chinese view contains only Chinese documents</p></div>
<h4>Next Steps</h4>
<p>Collation and read-only views are just 2 of the exciting new features added in MongoDB 3.4 – read more and these and everything else that&#8217;s new in <a href="https://www.mongodb.com/collateral/mongodb-3.4-whats-new" title="What's new in MongoDB 3.4">MongoDB 3.4: What’s New</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/language-specific-views-in-mongodb-3-4/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Processing Data Streams with Amazon Kinesis and MongoDB Atlas</title>
		<link>/mongodb/mongodb_amazon_kinesis</link>
					<comments>/mongodb/mongodb_amazon_kinesis#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Tue, 08 Nov 2016 18:09:24 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[Amazon]]></category>
		<category><![CDATA[Amazon Kinesis]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Atlas]]></category>
		<category><![CDATA[MongoDB Compass]]></category>
		<guid isPermaLink="false">/?p=4276</guid>

					<description><![CDATA[This post provides an introduction to Amazon Kinesis: its architecture, what it provides, and how it&#8217;s typically used. It goes on to step through how to implement an application where data is ingested by Amazon Kinesis before being processed and then stored in MongoDB Atlas. This is part of a series of posts which examine]]></description>
										<content:encoded><![CDATA[<p>This post provides an introduction to Amazon Kinesis: its architecture, what it provides, and how it&#8217;s typically used. It goes on to step through how to implement an application where data is ingested by Amazon Kinesis before being processed and then stored in MongoDB Atlas.</p>
<p>This is part of a <a href="/mongodb/using-mongodb-atlas-from-your-favorite-language-or-framework">series of posts which examine how to use MongoDB Atlas with a number of complementary technologies and frameworks</a>.</p>
<h2>Introduction to Amazon Kinesis</h2>
<p>The role of Amazon Kinesis is to get large volumes of streaming data into AWS where it can then be processed, analyzed, and moved between AWS services. The service is designed to ingest and store terabytes of data every hour, from multiple sources. Kinesis provides high availability, including synchronous replication within an AWS region. It also transparently handles scalability, adding and removing resources as needed.</p>
<p>Once the data is inside AWS, it can be processed or analyzed immediately, as well as being stored using other AWS services (such as S3) for later use. By storing the data in MongoDB, it can be used both to drive real-time, operational decisions as well as for deeper analysis.</p>
<p>As the number, variety, and velocity of data sources grow, new architectures and technologies are needed. Technologies like Amazon Kinesis and <a href="https://www.mongodb.com/blog/post/mongodb-and-data-streaming-implementing-a-mongodb-kafka-consumer" title="Data Streaming with Apache Kafka &amp; MongoDB">Apache Kafka</a> are focused on ingesting the massive flow of data from multiple fire hoses and then routing it to the systems that need it – optionally filtering, aggregating, and analyzing en-route.</p>
<div id="attachment_4277" style="width: 1201px" class="wp-caption alignright"><a href="/wp-content/uploads/2016/11/kinesis-architecture.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4277" class="wp-image-4277 size-full" src="/wp-content/uploads/2016/11/kinesis-architecture.png" alt="AWS Kinesis Architecture" width="1191" height="636" srcset="/wp-content/uploads/2016/11/kinesis-architecture.png 1191w, /wp-content/uploads/2016/11/kinesis-architecture-300x160.png 300w, /wp-content/uploads/2016/11/kinesis-architecture-768x410.png 768w, /wp-content/uploads/2016/11/kinesis-architecture-1024x547.png 1024w" sizes="auto, (max-width: 1191px) 100vw, 1191px" /></a><p id="caption-attachment-4277" class="wp-caption-text">Figure 1: AWS Kinesis Architecture</p></div>
<p>Typical data sources include:</p>
<ul>
<li>IoT assets and devices(e.g., sensor readings)</li>
<li>On-line purchases from an ecommerce store</li>
<li>Log files</li>
<li>Video game activity</li>
<li>Social media posts</li>
<li>Financial market data feeds</li>
</ul>
<p>Rather than leave this data to fester in text files, Kinesis can ingest the data, allowing it to be processed to find patterns, detect exceptions, drive operational actions, and provide aggregations to be displayed through dashboards.</p>
<p>There are actually 3 services which make up Amazon Kinesis:</p>
<ul>
<li><strong>Amazon Kinesis Firehose</strong> is the simplest way to load massive volumes of streaming data into AWS. The capacity of your Firehose is adjusted automatically to keep pace with the stream throughput. It can optionally compress and encrypt the data before it&#8217;s stored.</li>
<li><strong>Amazon Kinesis Streams</strong> are similar to the Firehose service but give you more control, allowing for:
<ul>
<li>Multi-stage processing</li>
<li>Custom stream partitioning rules</li>
<li>Reliable storage of the stream data until it has been processed.</li>
</ul>
</li>
<li><strong>Amazon Kinesis Analytics</strong> is the simplest way to process the data once it has been ingested by either Kinesis Firehose or Streams. The user provides SQL queries which are then applied to analyze the data; the results can then be displayed, stored, or sent to another Kinesis stream for further processing.</li>
</ul>
<p>This post focuses on Amazon Kinesis Streams, in particular, implementing a <em>consumer</em> that ingests the data, enriches it, and then stores it in MongoDB.</p>
<h3>Accessing Kinesis Streams – the Libraries</h3>
<p>There are multiple ways to read (consume) and write (produce) data with Kinesis Streams:</p>
<ul>
<li><a href="https://www.mongodb.com/blog/post/Amazon%20Kinesis%20Streams%20API">Amazon Kinesis Streams API</a>
<ul>
<li>Provides two APIs for putting data into an Amazon Kinesis stream: <a href="http://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecord.html">PutRecord</a> and <a href="http://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecords.html">PutRecords</a></li>
</ul>
</li>
<li><a href="http://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-kpl.html">Amazon Kinesis Producer Library (KPL)</a>
<ul>
<li>Easy to use and highly configurable Java library that helps you put data into an Amazon Kinesis stream. Amazon Kinesis Producer Library (KPL) presents a simple, asynchronous, high throughput, and reliable interface.</li>
</ul>
</li>
<li><a href="http://docs.aws.amazon.com/streams/latest/dev/writing-with-agents.html">Amazon Kinesis Agent</a>
<ul>
<li>The agent continuously monitors a set of files and sends new entries to your Stream or Firehose.</li>
</ul>
</li>
<li><a href="http://docs.aws.amazon.com/kinesis/latest/dev/developing-consumer-apps-with-kcl.html">Amazon Kinesis Client Library (KCL)</a>
<ul>
<li>A Java library that helps you easily build Amazon Kinesis Applications for reading and processing data from an Amazon Kinesis stream. KCL handles issues such as adapting to changes in stream volume, load-balancing streaming data, coordinating distributed services, providing fault-tolerance, and processing data.</li>
</ul>
</li>
<li><a href="https://github.com/awslabs/amazon-kinesis-client/tree/master/src/main/java/com/amazonaws/services/kinesis/multilang">Amazon Kinesis Client Library MultiLangDemon</a>
<ul>
<li>The MultiLangDemon is used as a proxy by non-Java applications to use the Kinesis Client Library.</li>
</ul>
</li>
<li><a href="https://github.com/awslabs/amazon-kinesis-connectors">Amazon Kinesis Connector Library</a>
<ul>
<li>A library that helps you easily integrate Amazon Kinesis with other AWS services and third-party tools.</li>
</ul>
</li>
<li><a href="https://github.com/awslabs/kinesis-storm-spout">Amazon Kinesis Storm Spout</a>
<ul>
<li>A library that helps you easily integrate Amazon Kinesis Streams with Apache Storm.</li>
</ul>
</li>
</ul>
<p>The example application in this post use the Kinesis Agent and the Kinesis Client Library MultiLangDemon (with Node.js).</p>
<h2>Role of MongoDB Atlas</h2>
<p>MongoDB is a distributed database delivering a flexible schema for rapid application development, rich queries, idiomatic drivers, and built in redundancy and scale-out. This makes it the go-to database for anyone looking to build modern applications.</p>
<p><a href="https://www.mongodb.com/cloud">MongoDB Atlas</a> is a hosted database service for MongoDB. It provides all of the features of MongoDB, without the operational heavy lifting required for any new application. MongoDB Atlas is available on demand through a pay-as-you-go model and billed on an hourly basis, letting you focus on what you do best.</p>
<p>It’s easy to get started – use a simple GUI to select the instance size, region, and features you need. MongoDB Atlas provides:</p>
<ul>
<li>Security features to protect access to your data</li>
<li>Built in replication for always-on availability, tolerating complete data center failure</li>
<li>Backups and point in time recovery to protect against data corruption</li>
<li>Fine-grained monitoring to let you know when to scale. Additional instances can be provisioned with the push of a button</li>
<li>Automated patching and one-click upgrades for new major versions of the database, enabling you to take advantage of the latest and greatest MongoDB features</li>
<li>A choice of regions and billing options</li>
</ul>
<p>Like Amazon Kinesis, MongoDB Atlas is a natural fit for users looking to simplify their development and operations work, letting them focus on what makes their application unique rather than commodity (albeit essential) plumbing. Also like Kinesis, you only pay for MongoDB Atlas when you&#8217;re using it with no upfront costs and no charges after you terminate your cluster.</p>
<h2>Example Application</h2>
<p>The rest of this post focuses on building a system to process log data. There are 2 sources of log data:</p>
<ol>
<li>A simple client that acts as a Kinesis Streams <em>producer</em>, generating sensor readings and writing them to a stream</li>
<li><em>Amazon Kinesis Agent</em> monitoring a SYSLOG file and sending each log event to a stream</li>
</ol>
<p>In both cases, the data is consumed from the stream using the same <em>consumer</em>, which adds some metadata to each entry and then stores it in MongoDB Atlas.</p>
<h3>Create Kinesis IAM Policy in AWS</h3>
<p>From the <a href="https://console.aws.amazon.com/iam">IAM section of the AWS console</a> use the wizard to create a new policy. The policy should grant permission to perform specific actions on a particular stream (in this case &#8220;ClusterDBStream&#8221;) and the results should look similar to this:</p>
<p><script src="https://gist.github.com/am-MongoDB/aab01421f66be44ae5d53fd2e4d031ee.js"></script></p>
<p>Next, create a new user and associate it with the new policy. <strong>Important</strong>: Take a note of the <em>AWS_ACCESS_KEY_ID</em> and <em>AWS_SECRET_ACCESS_KEY</em>.</p>
<h3>Create MongoDB Atlas Cluster</h3>
<p>Register with <a href="https://www.mongodb.com/cloud" title="MongoDB Atlas cloud-hosted database service">MongoDB Atlas</a> and use the simple GUI to select the instance size, region, and features you need (Figure 2).</p>
<p><a href="/wp-content/uploads/2016/11/Create_MongoDB_Atlas_Cluster.gif"><img loading="lazy" decoding="async" class="alignright size-full wp-image-4278" src="/wp-content/uploads/2016/11/Create_MongoDB_Atlas_Cluster.gif" alt="create mongodb atlas cluster" width="960" height="540" /></a></p>
<p>Create a user with read and write privileges for just the database that will be used for your application, as shown in Figure 3.</p>
<div id="attachment_4279" style="width: 833px" class="wp-caption alignright"><a href="/wp-content/uploads/2016/11/Create_Application_User_in_MongoDB_Atlas.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4279" class="size-full wp-image-4279" src="/wp-content/uploads/2016/11/Create_Application_User_in_MongoDB_Atlas.png" alt="Creating an Application user in MongoDB Atlas" width="823" height="922" srcset="/wp-content/uploads/2016/11/Create_Application_User_in_MongoDB_Atlas.png 823w, /wp-content/uploads/2016/11/Create_Application_User_in_MongoDB_Atlas-268x300.png 268w, /wp-content/uploads/2016/11/Create_Application_User_in_MongoDB_Atlas-768x860.png 768w" sizes="auto, (max-width: 823px) 100vw, 823px" /></a><p id="caption-attachment-4279" class="wp-caption-text">Figure 3: Creating an Application user in MongoDB Atlas</p></div>
<p>You must also add the IP address of your application server to the IP Whitelist in the MongoDB Atlas security tab (Figure 4). Note that if multiple application servers will be accessing MongoDB Atlas then an IP address range can be specified in CIDR format (IP Address/number of significant bits).</p>
<div id="attachment_4280" style="width: 1770px" class="wp-caption alignright"><a href="/wp-content/uploads/2016/11/Add_IP_Address_Range_to_MongoDB_Atlas.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4280" class="wp-image-4280 size-full" src="/wp-content/uploads/2016/11/Add_IP_Address_Range_to_MongoDB_Atlas.png" alt="Add App Server IP Address(es) to MongoDB Atlas" width="1760" height="876" srcset="/wp-content/uploads/2016/11/Add_IP_Address_Range_to_MongoDB_Atlas.png 1760w, /wp-content/uploads/2016/11/Add_IP_Address_Range_to_MongoDB_Atlas-300x149.png 300w, /wp-content/uploads/2016/11/Add_IP_Address_Range_to_MongoDB_Atlas-768x382.png 768w, /wp-content/uploads/2016/11/Add_IP_Address_Range_to_MongoDB_Atlas-1024x510.png 1024w" sizes="auto, (max-width: 1760px) 100vw, 1760px" /></a><p id="caption-attachment-4280" class="wp-caption-text">Figure 4: Add App Server IP Address(es) to MongoDB Atlas</p></div>
<p>If your application server(s) are running in AWS, then an alternative to IP Whitelisting is to <a href="https://docs.atlas.mongodb.com/setup-cluster-security/" title="configure a VPC (Virtual Private Cloud) Peering relationship between your MongoDB Atlas group and AWS">configure a VPC (Virtual Private Cloud) Peering relationship between your MongoDB Atlas group and the VPC containing your AWS resources</a>. This removes the requirement to add and remove IP addresses as AWS reschedules functions, and is especially useful when using highly dynamic services such as AWS Lambda.</p>
<p>Click the &#8220;Connect&#8221; button and make a note of the URI that should be used when connecting to the database (note that you will substitute the user name and password with ones that you&#8217;ve just created).</p>
<h3>App Part 1 – Kinesis/Atlas Consumer</h3>
<p>The code and configuration files in Parts 1 &amp; 2 are based on the sample consumer and producer included with the <a href="https://github.com/awslabs/amazon-kinesis-client-nodejs" title="Amazon Kinesis Client Library for Node.js">client library for Node.js (MultiLangDaemon)</a>.</p>
<p>Install the <a href="https://github.com/awslabs/amazon-kinesis-client-nodejs">Node.js client library</a>:</p>
<pre><code>git clone https://github.com/awslabs/amazon-kinesis-client-nodejs.git
cd amazon-kinesis-client-nodejs
npm install
</code></pre>
<p>Install the <a href="https://mongodb.github.io/node-mongodb-native/" title="The next generation Node.JS driver for MongoDB">MongoDB Node.js Driver</a>:</p>
<pre><code>npm install --save mongodb
</code></pre>
<p>Move to the consumer sample folder:</p>
<pre><code>cd samples/basic_sample/consumer/
</code></pre>
<p>Create a configuration file (&#8220;logging_consumer.properties&#8221;), taking care to set the correct stream and application names and AWS region:</p>
<p><script src="https://gist.github.com/am-MongoDB/5edcbe58788cbf40c1776a8f2cb01e1d.js"></script></p>
<p>The code for working with MongoDB can be abstracted to a helper file (&#8220;db.js&#8221;):</p>
<p><script src="https://gist.github.com/am-MongoDB/a04cc764301e0911f59a7b0df2bf5abe.js"></script></p>
<p>Create the application Node.js file (&#8220;logging_consumer_app.js&#8221;), making sure to replace the database user and host details in &#8220;mongodbConnectString&#8221; with your own:</p>
<p><script src="https://gist.github.com/am-MongoDB/3941d20f2f530ae52bb7bd62a3532b69.js"></script></p>
<p>Note that this code adds some metadata to the received object before writing it to MongoDB. At this point, it is also possible to filter objects based on any of their fields.</p>
<p>Note also that this Node.js code logs a lot of information to the &#8220;application log&#8221; file (including the database password!); this is for debugging and would be removed from a real application.</p>
<p>The simplest way to have the application use the user credentials (noted when creating the user in AWS IAM) is to export them from the shell where the application will be launched:</p>
<pre><code>export AWS_ACCESS_KEY_ID=????????????????????
export AWS_SECRET_ACCESS_KEY=????????????????????????????????????????
</code></pre>
<p>Finally, launch the consumer application:</p>
<pre><code>../../../bin/kcl-bootstrap --java /usr/bin/java -e -p ./logging_consumer.properties
</code></pre>
<p>Check the &#8220;application.log&#8221; file for any errors.</p>
<h3>App Part 2 – Kinesis Producer</h3>
<p>As for the consumer, export the credentials for the user created in AWS IAM:</p>
<pre><code>cd amazon-kinesis-client-nodejs/samples/basic_sample/producer

export AWS_ACCESS_KEY_ID=????????????????????
export AWS_SECRET_ACCESS_KEY=????????????????????????????????????????
</code></pre>
<p>Create the configuration file (&#8220;config.js&#8221;) and ensure that the correct AWS region and stream are specified:</p>
<p><script src="https://gist.github.com/am-MongoDB/0ab029c1071a6a715a553b00d2396f40.js"></script></p>
<p>Create the producer code (&#8220;logging_producer.js&#8221;):</p>
<p><script src="https://gist.github.com/am-MongoDB/0ee9d95fc1abcaf0949245811dcf7d6e.js"></script></p>
<p>The producer is launched from &#8220;logging_producer_app.js&#8221;:</p>
<p><script src="https://gist.github.com/am-MongoDB/a598575392fa0f29742fa0952f90ecd8.js"></script></p>
<p>Run the producer:</p>
<pre><code>node logging_producer_app.js
</code></pre>
<p>Check the consumer and producer &#8220;application.log&#8221; files for errors.</p>
<p>At this point, data should have been written to MongoDB Atlas. Using the connection string provided after clicking the &#8220;Connect&#8221; button in MongoDB Atlas, connect to the database and confirm that the documents have been added:</p>
<p><script src="https://gist.github.com/am-MongoDB/66ae718bb72659e179a1073bfd1fbeca.js"></script></p>
<h3>App Part 3 – Capturing Live Logs Using Amazon Kinesis Agent</h3>
<p>Using the same consumer, the next step is to stream real log data. Fortunately, this doesn&#8217;t require any additional code as the Kinesis Agent can be used to monitor files and add every new entry to a Kinesis Stream (or Firehose).</p>
<p>Install the Kinesis Agent:</p>
<pre><code>sudo yum install –y aws-kinesis-agent
</code></pre>
<p>and edit the configuration file to use the correct AWS region, user credentials, and stream in &#8220;/etc/aws-kinesis/agent.json&#8221;:</p>
<p><script src="https://gist.github.com/am-MongoDB/41f45486b4ba170a4b7474cb3d63b45b.js"></script></p>
<p>&#8220;/var/log/messages&#8221; is a SYSLOG file and so a &#8220;dataProcessingOptions&#8221; field is included in the configuration to automatically convert each log into a JSON document before writing it to the Kinesis Stream.</p>
<p>The agent will not run as root and so the permissions for &#8220;/var/log/messages&#8221; need to be made more permissive:</p>
<pre><code>sudo chmod og+r /var/log/messages
</code></pre>
<p>The agent can now be started:</p>
<pre><code>sudo service aws-kinesis-agent start
</code></pre>
<p>Monitor the agent&#8217;s log file to see what it&#8217;s doing:</p>
<pre><code>sudo tail -f /var/log/aws-kinesis-agent/aws-kinesis-agent.log
</code></pre>
<p>If there aren&#8217;t enough logs being generated on the machine then extra ones can be injected manually for testing:</p>
<pre><code>logger -i This is a test log
</code></pre>
<p>This will create a log with the &#8220;program&#8221; field set to your username (in this case, &#8220;ec2-user&#8221;). Check that the logs get added to MongoDB Atlas:</p>
<p><script src="https://gist.github.com/am-MongoDB/777754041547d2a5bb7f1017a34a9c2e.js"></script></p>
<h3>Checking the Data with MongoDB Compass</h3>
<p>To visually navigate through the MongoDB schema and data, <a href="https://www.mongodb.com/download-center?jmp=nav#compass">download and install MongoDB Compass</a>. Use your MongoDB Atlas credentials to connect Compass to your MongoDB database (the hostname should refer to the primary node in your replica set or a &#8220;mongos&#8221; process if your MongoDB cluster is sharded).</p>
<p>Navigate through the structure of the data in the &#8220;clusterdb&#8221; database (Figure 5) and view the JSON documents.</p>
<div id="attachment_4281" style="width: 969px" class="wp-caption alignright"><a href="/wp-content/uploads/2016/11/Compass_schema.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4281" class="size-full wp-image-4281" src="/wp-content/uploads/2016/11/Compass_schema.png" alt="Explore Schema Using MongoDB Compass" width="959" height="958" srcset="/wp-content/uploads/2016/11/Compass_schema.png 959w, /wp-content/uploads/2016/11/Compass_schema-150x150.png 150w, /wp-content/uploads/2016/11/Compass_schema-300x300.png 300w, /wp-content/uploads/2016/11/Compass_schema-768x767.png 768w, /wp-content/uploads/2016/11/Compass_schema-144x144.png 144w" sizes="auto, (max-width: 959px) 100vw, 959px" /></a><p id="caption-attachment-4281" class="wp-caption-text">Figure 5: Explore Schema Using MongoDB Compass</p></div>
<p>Clicking on a value builds a query and then clicking &#8220;Apply&#8221; filters the results (Figure 6).</p>
<div id="attachment_4282" style="width: 721px" class="wp-caption alignright"><a href="/wp-content/uploads/2016/11/Filter_MongoDB_Compass_Results.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4282" class="size-full wp-image-4282" src="/wp-content/uploads/2016/11/Filter_MongoDB_Compass_Results.png" alt="View Filtered Documents in MongoDB Compass" width="711" height="907" srcset="/wp-content/uploads/2016/11/Filter_MongoDB_Compass_Results.png 711w, /wp-content/uploads/2016/11/Filter_MongoDB_Compass_Results-235x300.png 235w" sizes="auto, (max-width: 711px) 100vw, 711px" /></a><p id="caption-attachment-4282" class="wp-caption-text">Figure 6: View Filtered Documents in MongoDB Compass</p></div>
<h3>Add Document Validation Rules</h3>
<p>One of MongoDB’s primary attractions for developers is that it gives them the ability to start application development without first needing to define a formal schema. Operations teams appreciate the fact that they don’t need to perform a time-consuming schema upgrade operation every time the developers need to store a different attribute.</p>
<p>This is well suited to the application built in this post as logs from different sources are likely to include different attributes. There are however some attributes that we always expect to be there (e.g., the metadata that the application is adding). For applications reading the documents from this collection to be able to rely on those fields being present, the documents should be validated before they are written to the database. Prior to MongoDB 3.2, those checks had to be implemented in the application but they can now be performed by the database itself.</p>
<p>Executing a single command from the &#8220;mongo&#8221; shell adds the document checks:</p>
<p><script src="https://gist.github.com/am-MongoDB/0d9c7cb0df7c7bcb3961a43c9d99e607.js"></script></p>
<p>The above command adds multiple checks:</p>
<ul>
<li>The &#8220;program&#8221; field exists and contains a string</li>
<li>There&#8217;s a sub-document called &#8220;metadata&#8221; containing at least 2 fields:</li>
<li>&#8220;mongoLabel&#8221; which must be a string</li>
<li>&#8220;timeAdded&#8221; which must be a date</li>
</ul>
<p>Test that the rules are correctly applied when attempting to write to the database:</p>
<p><script src="https://gist.github.com/am-MongoDB/21d1ef80caf7a69e9d6962cca0667f55.js"></script></p>
<h3>Cleaning Up (IMPORTANT!)</h3>
<p>Remember that you will continue to be charged for the services even when you&#8217;re no longer actively using them. If you no longer need to use the services then clean up:</p>
<ul>
<li>From the MongoDB Atlas GUI, select your Cluster, click on the ellipses and select &#8220;Terminate&#8221;.</li>
<li>From the AWS management console select the Kinesis service, then Kinesis Streams, and then delete your stream.</li>
<li>From the AWS management console select the DynamoDB service, then tables, and then delete your table.</li>
</ul>
<h2>Using MongoDB Atlas with Other Frameworks and Services</h2>
<p>We have detailed walkthroughs for using MongoDB Atlas with several programming languages and frameworks, as well as generic instructions that can be used with others. They can all be found in <a href="/mongodb/using-mongodb-atlas-from-your-favorite-language-or-framework">Using MongoDB Atlas From Your Favorite Language or Framework</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/mongodb_amazon_kinesis/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Using PencilBlue with MongoDB Atlas</title>
		<link>/mongodb/using-pencilblue-with-mongodb-atlas</link>
					<comments>/mongodb/using-pencilblue-with-mongodb-atlas#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Thu, 15 Sep 2016 17:31:07 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Atlas]]></category>
		<category><![CDATA[MongoDB Compass]]></category>
		<category><![CDATA[node.js]]></category>
		<category><![CDATA[PencilBlue]]></category>
		<guid isPermaLink="false">/?p=4215</guid>

					<description><![CDATA[PencilBlue is a Node.js based, open source blogging and Content Management System, targeted at enterprise grade websites. This post explains why MongoDB Atlas is an ideal choice for PencilBlue and then goes on to show how to configure PencilBlue to use it. Why MongoDB Atlas is the Ideal Database for PencilBlue MongoDB delivers flexible schemas,]]></description>
										<content:encoded><![CDATA[<p>PencilBlue is a Node.js based, open source blogging and Content Management System, targeted at enterprise grade websites.</p>
<p>This post explains why MongoDB Atlas is an ideal choice for PencilBlue and then goes on to show how to configure PencilBlue to use it.</p>
<h1>Why MongoDB Atlas is the Ideal Database for PencilBlue</h1>
<p>MongoDB delivers flexible schemas, rich queries, an idiomatic Node.js driver, and simple to use high availability and scaling. This makes it the go-to database for anyone looking to build applications on Node.js.</p>
<p><a href="https://www.mongodb.com/cloud">MongoDB Atlas</a> provides all of the features of MongoDB, without the operational heavy lifting required for any new application. MongoDB Atlas is available on demand through a pay-as-you-go model and billed on an hourly basis, letting you focus on what you do best.</p>
<p>It’s easy to get started – use a simple GUI to select the instance size, region, and features you need. MongoDB Atlas provides:</p>
<ul>
<li>Security features to protect access to your data</li>
<li>Built in replication for always-on availability, tolerating complete data center failure</li>
<li>Backups and point in time recovery to protect against data corruption</li>
<li>Fine-grained monitoring to let you know when to scale. Additional instances can be provisioned with the push of a button</li>
<li>Automated patching and one-click upgrades for new major versions of the database, enabling you to take advantage of the latest and greatest MongoDB features</li>
<li>A choice of cloud providers, regions, and billing options</li>
</ul>
<p>Like PencilBlue, MongoDB Atlas is a natural fit for users looking to simplify their development and operations work, letting them focus on what makes their application unique rather than commodity (albeit essential) plumbing.</p>
<h1>Installing PencilBlue and Connecting it to MongoDB Atlas</h1>
<p>Before starting with PencilBlue, you should launch your MongoDB cluster using <a href="https://www.mongodb.com/cloud">MongoDB Atlas</a> and then (optionally) create a user with read and write privileges for just the database that will be used for this project, as shown in Figure 1.</p>
<div id="attachment_4216" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/PencilBlue_user.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4216" src="/wp-content/uploads/2016/09/PencilBlue_user-910x1024.png" alt="Adding a PencilBlue User to MongoDB Atlas" width="480" height="540" class="size-large wp-image-4216" srcset="/wp-content/uploads/2016/09/PencilBlue_user-910x1024.png 910w, /wp-content/uploads/2016/09/PencilBlue_user-267x300.png 267w, /wp-content/uploads/2016/09/PencilBlue_user-768x864.png 768w, /wp-content/uploads/2016/09/PencilBlue_user.png 1596w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4216" class="wp-caption-text">Figure 1: Adding a PencilBlue User to MongoDB Atlas</p></div>
<p>You must also add your IP address to the IP Whitelist in the MongoDB Atlas security tab (Figure 2).</p>
<div id="attachment_4217" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/PencilBlue_whitelist_IP.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4217" src="/wp-content/uploads/2016/09/PencilBlue_whitelist_IP-1024x701.png" alt="Add IP Address to MongoDB Atlas Whitelist" width="480" height="329" class="size-large wp-image-4217" srcset="/wp-content/uploads/2016/09/PencilBlue_whitelist_IP-1024x701.png 1024w, /wp-content/uploads/2016/09/PencilBlue_whitelist_IP-300x205.png 300w, /wp-content/uploads/2016/09/PencilBlue_whitelist_IP-768x526.png 768w, /wp-content/uploads/2016/09/PencilBlue_whitelist_IP.png 1502w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4217" class="wp-caption-text">Figure 2: Add IP Address to MongoDB Atlas Whitelist</p></div>
<p>If it isn&#8217;t already installed on your system, download and install Node.js:</p>
<pre><code>$ curl https://nodejs.org/dist/v4.4.7/node-v4.4.7-linux-x64.tar.xz -o node.tar.xz
$ tar xf node.tar.xz
</code></pre>
<p>You should then add the <code>bin</code> sub-folder to your <code>.bash_profile</code> before installing the PencilBlue command line interface (CLI):</p>
<pre><code>$ sudo npm install -g pencilblue-cli
Password:
npm WARN engine pencilblue-cli@0.3.1: wanted: {"node":"&gt;= 4.4.7"} (current: {"node":"0.12.5","npm":"2.11.2"})
/usr/local/bin/pencilblue -&gt; /usr/local/lib/node_modules/pencilblue-cli/lib/pencilblue-cli.js
/usr/local/bin/pbctrl -&gt; /usr/local/lib/node_modules/pencilblue-cli/lib/pencilblue-cli.js
pencilblue-cli@0.3.1 /usr/local/lib/node_modules/pencilblue-cli
├── process@0.11.8
├── colors@1.1.2
├── q@1.4.1
├── shelljs@0.7.3 (interpret@1.0.1, rechoir@0.6.2, glob@7.0.5)
└── prompt@1.0.0 (revalidator@0.1.8, pkginfo@0.4.0, read@1.0.7, winston@2.1.1, utile@0.3.0)
</code></pre>
<p>The CLI can then be used to install and configure PencilBlue itself:</p>
<pre><code>$ pbctrl install PencilBlue
Site Name:  (My PencilBlue Site) PokeSite
Site Root:  (http://localhost:8080)/ 
Address to bind to:  (0.0.0.0) 
Site Port:  (8080) 
MongoDB URL:  (mongodb://127.0.0.1:27017/) mongodb://pencilblue_user:my_password@cluster0-shard-00-00-qfovx.mongodb.net:27017,cluster0-shard-00-01-qfovx.mongodb.net:27017,cluster0-shard-00-02-qfovx.mongodb.net:27017/?ssl=true&amp;authSource=admin
Database Name:  (pencilblue) clusterdb
Do you want to install Bower components?:  (y/N) 
Cloning PencilBlue from github...
Cloning into 'PencilBlue'...
Installing npm modules...
...
Creating config.js...
Installation completed.
</code></pre>
<p>Note that if you need to change the configuration (e.g., to specify a new URL to connect to MongoDB) then edit the <code>config.js</code> file that was created during this step.</p>
<p>The MongoDB URL you provided contains these components:</p>
<ul>
<li><code>pencilblue_user</code> is the name of the user you created in the MongoDB Atlas UI</li>
<li><code>my_password</code> is the password you chose when creating the user in MongoDB Atlas</li>
<li><code>cluster0-shard-00-00-qfovx.mongodb.net</code>, <code>cluster0-shard-00-01-qfovx.mongodb.net</code>, &amp; <code>cluster0-shard-00-02-qfovx.mongodb.net</code> are the hostnames of the instances in your MongoDB Atlas replica set (click on the &#8220;CONNECT&#8221; button in the MongoDB Atlas UI if you don&#8217;t have these – Figure 3)</li>
<li><code>27017</code> is the standard MongoDB port number</li>
<li>To enforce security, MongoDB Atlas mandates that the <code>ssl</code> option is used</li>
<li><code>admin</code> is the database that&#8217;s being used to store the credentials for <code>pencilblue_user</code></li>
</ul>
<div id="attachment_4218" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/PencilBlue_Find_Connect_String.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4218" src="/wp-content/uploads/2016/09/PencilBlue_Find_Connect_String-1024x414.png" alt="Find the Hostnames From the MongoDB Atlas UI" width="480" height="194" class="size-large wp-image-4218" srcset="/wp-content/uploads/2016/09/PencilBlue_Find_Connect_String-1024x414.png 1024w, /wp-content/uploads/2016/09/PencilBlue_Find_Connect_String-300x121.png 300w, /wp-content/uploads/2016/09/PencilBlue_Find_Connect_String-768x310.png 768w, /wp-content/uploads/2016/09/PencilBlue_Find_Connect_String.png 1520w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4218" class="wp-caption-text">Figure 3: Find the Hostnames From the MongoDB Atlas UI</p></div>
<p><code>clusterdb</code> is the name of the database (schema) that PencilBlue will use (note that unlike some frameworks, the database name is specified separately rather than being embedded in the MongoDB URL).</p>
<p>The PencilBlue process can now be started:</p>
<pre><code>$ cd PencilBlue/
$ pbctrl start
</code></pre>
<h1>Confirm that MongoDB Atlas is Being Used</h1>
<p>At this point, it is possible to connect to MongoDB Atlas using the MongoDB shell (we&#8217;ll look at an easier way to navigate the data later) to confirm that the schema has been created:</p>
<pre><code>$ mongo mongodb://cluster0-shard-00-00-qfovx.mongodb.net:27017,cluster0-shard-00-01-qfovx.mongodb.net:27017,cluster0-shard-00-02-qfovx.mongodb.net:27017/admin?replicaSet=Cluster0-shard-0 --ssl --username billy --password my_password

Cluster0-shard-0:PRIMARY&gt; show dbs
admin      0.000GB
clusterdb  0.008GB
local      0.007GB

Cluster0-shard-0:PRIMARY&gt; use clusterdb
switched to db clusterdb

Cluster0-shard-0:PRIMARY&gt; show collections
article
auth_token
comment
custom_object
custom_object_type
fs.chunks
fs.files
job_log
lock
media
page
password_reset
plugin
plugin_settings
section
server_registry
session
setting
theme_settings
topic
unverified_user
user
</code></pre>
<h1>Create Your First Page in PencilBlue</h1>
<p>Browse to the application at <a href="http://localhost:8080/">http://localhost:8080/</a> as shown in Figure 4 and create a user account.</p>
<div id="attachment_4219" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/PencilBlue_Browser.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4219" src="/wp-content/uploads/2016/09/PencilBlue_Browser-1016x1024.png" alt="Register User in PencilBlue" width="480" height="484" class="size-large wp-image-4219" srcset="/wp-content/uploads/2016/09/PencilBlue_Browser-1016x1024.png 1016w, /wp-content/uploads/2016/09/PencilBlue_Browser-150x150.png 150w, /wp-content/uploads/2016/09/PencilBlue_Browser-298x300.png 298w, /wp-content/uploads/2016/09/PencilBlue_Browser-768x774.png 768w, /wp-content/uploads/2016/09/PencilBlue_Browser-144x144.png 144w, /wp-content/uploads/2016/09/PencilBlue_Browser.png 1750w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4219" class="wp-caption-text">Figure 4: Register User in PencilBlue</p></div>
<p>You&#8217;re then able to login and create your first page (Figure 5).</p>
<div id="attachment_4220" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/PencilBlue_Create_content.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4220" src="/wp-content/uploads/2016/09/PencilBlue_Create_content-1024x973.png" alt="Create a New Page Using PencilBlue" width="480" height="456" class="size-large wp-image-4220" srcset="/wp-content/uploads/2016/09/PencilBlue_Create_content-1024x973.png 1024w, /wp-content/uploads/2016/09/PencilBlue_Create_content-300x285.png 300w, /wp-content/uploads/2016/09/PencilBlue_Create_content-768x730.png 768w, /wp-content/uploads/2016/09/PencilBlue_Create_content.png 1902w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4220" class="wp-caption-text">Figure 5: Create a New Page Using PencilBlue</p></div>
<p>After saving, the new page can be viewed (Figure 6).</p>
<div id="attachment_4221" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/PencilBlue_Page.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4221" src="/wp-content/uploads/2016/09/PencilBlue_Page-776x1024.png" alt="View Pokémon Page in PencilBlue" width="480" height="633" class="size-large wp-image-4221" srcset="/wp-content/uploads/2016/09/PencilBlue_Page-776x1024.png 776w, /wp-content/uploads/2016/09/PencilBlue_Page-227x300.png 227w, /wp-content/uploads/2016/09/PencilBlue_Page-768x1014.png 768w, /wp-content/uploads/2016/09/PencilBlue_Page.png 1620w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4221" class="wp-caption-text">Figure 6: View Pokémon Page in PencilBlue</p></div>
<p>To visually navigate through the PencilBlue schema and data, <a href="https://www.mongodb.com/download-center?jmp=nav#compass">download and install MongoDB Compass</a>. Use your MongoDB Atlas credentials to connect Compass to your MongoDB database – Figure 7.</p>
<div id="attachment_4222" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/PencilBlue_Connect_Compass_to_MongoDB_Atlas.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4222" src="/wp-content/uploads/2016/09/PencilBlue_Connect_Compass_to_MongoDB_Atlas-1024x839.png" alt="Connect MongoDB Compass to MongoDB Atlas" width="480" height="393" class="size-large wp-image-4222" srcset="/wp-content/uploads/2016/09/PencilBlue_Connect_Compass_to_MongoDB_Atlas-1024x839.png 1024w, /wp-content/uploads/2016/09/PencilBlue_Connect_Compass_to_MongoDB_Atlas-300x246.png 300w, /wp-content/uploads/2016/09/PencilBlue_Connect_Compass_to_MongoDB_Atlas-768x629.png 768w, /wp-content/uploads/2016/09/PencilBlue_Connect_Compass_to_MongoDB_Atlas.png 1802w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4222" class="wp-caption-text">Figure 7: Connect MongoDB Compass to MongoDB Atlas</p></div>
<p>Navigate through the structure of the data in the <code>clusterdb</code> database (Figure 8); view the JSON documents (Figure 9) and check the indexes (Figure 10).</p>
<div id="attachment_4223" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/PencilBlue_Compass_Schema.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4223" src="/wp-content/uploads/2016/09/PencilBlue_Compass_Schema-1024x594.png" alt="Explore PencilBlue Schema Using MongoDB Compass" width="480" height="278" class="size-large wp-image-4223" srcset="/wp-content/uploads/2016/09/PencilBlue_Compass_Schema-1024x594.png 1024w, /wp-content/uploads/2016/09/PencilBlue_Compass_Schema-300x174.png 300w, /wp-content/uploads/2016/09/PencilBlue_Compass_Schema-768x445.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4223" class="wp-caption-text">Figure 8: Explore PencilBlue Schema Using MongoDB Compass</p></div>
<div id="attachment_4224" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/PencilBlue_Compass_Document.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4224" src="/wp-content/uploads/2016/09/PencilBlue_Compass_Document-1024x595.png" alt="View PencilBlue Documents in MongoDB Compass" width="480" height="279" class="size-large wp-image-4224" srcset="/wp-content/uploads/2016/09/PencilBlue_Compass_Document-1024x595.png 1024w, /wp-content/uploads/2016/09/PencilBlue_Compass_Document-300x174.png 300w, /wp-content/uploads/2016/09/PencilBlue_Compass_Document-768x446.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4224" class="wp-caption-text">Figure 9: View PencilBlue Documents in MongoDB Compass</p></div>
<div id="attachment_4225" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/PencilBlue_Compass_Indexes.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4225" src="/wp-content/uploads/2016/09/PencilBlue_Compass_Indexes-1024x594.png" alt="View PencilBlue Indexes Using MongoDB Compass" width="480" height="278" class="size-large wp-image-4225" srcset="/wp-content/uploads/2016/09/PencilBlue_Compass_Indexes-1024x594.png 1024w, /wp-content/uploads/2016/09/PencilBlue_Compass_Indexes-300x174.png 300w, /wp-content/uploads/2016/09/PencilBlue_Compass_Indexes-768x446.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4225" class="wp-caption-text">Figure 10: View PencilBlue Indexes Using MongoDB Compass</p></div>
<h1>Next Steps</h1>
<p>While MongoDB Atlas radically simplifies the operation of MongoDB there are still some decisions to take to ensure the best performance and reliability for your application. The <a href="https://www.mongodb.com/collateral/mongodb-atlas-best-practices">MongoDB Atlas Best Practices white paper</a> provides guidance on best practices for deploying, managing, and optimizing the performance of your database with MongoDB Atlas.</p>
<p>The guide outlines considerations for achieving performance at scale with MongoDB Atlas across a number of key dimensions, including instance size selection, application patterns, schema design and indexing, and disk I/O. While this guide is broad in scope, it is not exhaustive. Following the recommendations in the guide will provide a solid foundation for ensuring optimal application performance.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/using-pencilblue-with-mongodb-atlas/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
