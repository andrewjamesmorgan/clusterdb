<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>promises &#8211; Andrew Morgan on Databases</title>
	<atom:link href="./feed/index.html" rel="self" type="application/rss+xml" />
	<link>./../../index.html</link>
	<description>Database technologies - especially around scalability and High Availability</description>
	<lastBuildDate>Tue, 05 Sep 2017 13:16:26 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>The Modern Application Stack – Part 3: Building a REST API Using Express.js</title>
		<link>./../../mongodb/the-modern-application-stack-part-3-building-a-rest-api-using-express-js/index.html</link>
					<comments>./../../mongodb/the-modern-application-stack-part-3-building-a-rest-api-using-express-js/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Wed, 08 Feb 2017 18:32:27 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[Express]]></category>
		<category><![CDATA[MEAN]]></category>
		<category><![CDATA[mean stack]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[promises]]></category>
		<guid isPermaLink="false">./../../index.html?p=4371</guid>

					<description><![CDATA[Introduction This is the third in a series of blog posts examining the technologies that are driving the development of modern web and mobile applications. Part 1: Introducing The MEAN Stack (and the young MERN upstart) introduced the technologies making up the MEAN (MongoDB, Express, Angular, Node.js) and MERN (MongoDB, Express, React, Node.js) Stacks, why]]></description>
										<content:encoded><![CDATA[<h4>Introduction</h4>
<p>This is the third in a series of blog posts examining the technologies that are driving the development of modern web and mobile applications.</p>
<p><a href="./../../mongodb/modern-application-stack-part-1-introducing-the-mean-stack/index.html" title="MEAN Stack and MERN Stack"><em>Part 1: Introducing The MEAN Stack (and the young MERN upstart</em>)</a> introduced the technologies making up the MEAN (<em>M</em>ongoDB, <em>E</em>xpress, <em>A</em>ngular, <em>N</em>ode.js) and MERN (<em>M</em>ongoDB, <em>E</em>xpress, <em>R</em>eact, <em>N</em>ode.js) Stacks, why you might want to use them, and how to combine them to build your web application (or your native mobile or desktop app).</p>
<p>The remainder of the series is focused on working through the end to end steps of building a real (albeit simple) application. – <em>MongoPop</em>. <a href="./../../mongodb/mean_stack_2_mongodb_node_js/index.html" title="Using MongoDB With Node.js"><em>Part 2: Using MongoDB With Node.js</em></a> created an environment where we could work with a MongoDB database from Node.js; it also created a simplified interface to the MongoDB Node.js Driver.</p>
<p>This post builds on from those first posts by using Express to build a REST API so that a remote client can work with MongoDB. You will be missing a lot of context if you have skipped those posts – it&#8217;s recommended to follow through those first.</p>
<h4>The REST API</h4>
<p>A Representational State Transfer (REST) interface provides a set of operations that can be invoked by a remote client (which could be another service) over a network, using the HTTP protocol. The client will typically provide parameters such as a string to search for or the name of a resource to be deleted.</p>
<p>Many services provide a REST API so that clients (their own and those of 3rd parties) and other services can use the service in a well defined, loosely coupled manner. As an example, the <a href="https://developers.google.com/places/" title="Google's API for working with Google Places">Google Places API</a> can be used to search for information about a specific location:</p>
<p><script src="https://gist.github.com/am-MongoDB/6671d3e23e3596e876c0328965b274c2.js"></script></p>
<p>Breaking down the URI used in that <code>curl</code> request:</p>
<ul>
<li>No <em>method</em> is specified and so the <code>curl</code> command defaults to a HTTP <code>GET</code>.</li>
<li><code>maps.googleapis.com</code> is the address of the Google APIs service.</li>
<li><code>/maps/api/place/details/json</code> is the <em>route path</em> to the specific operation that&#8217;s being requested.</li>
<li><code>placeid=ChIJKxSwWSZgAUgR0tWM0zAkZBc</code> is a <em>parameter</em> (passed to the function bound to this route path), identifying which place we want to read the data for.</li>
<li><code>key=AIzaSyC53qhhXAmPOsxc34WManoorp7SVN_Qezo</code> is a parameter indicating the Google API key, verifying that it&#8217;s a registered application making the request (Google will also cap, or bill for, the number of requests made using this key).</li>
</ul>
<p>There&#8217;s a convention as to which HTTP method should be used for which types of operation:</p>
<ul>
<li><strong>GET</strong>: Fetches data</li>
<li><strong>POST</strong>: Adds new data</li>
<li><strong>PUT</strong>: Updates data</li>
<li><strong>DELETE</strong>: Removes data</li>
</ul>
<p>Mongopop&#8217;s REST API breaks this convention and uses <code>POST</code> for some read requests (as it&#8217;s simpler passing arguments than with <code>GET</code>).</p>
<p>These are the REST operations that will be implemented in Express for Mongopop:</p>
<table class='table table-bordered' summary="Express route paths implemented for the Mongopop REST API">
<caption><strong>Express routes implemented for the Mongopop REST API</strong></caption>
<thead>
<tr>
<th>Route Path</th>
<th>HTTP Method</th>
<th>Parameters</th>
<th>Response</th>
<th>Purpose</p>
<pre style="border:0px; background-color:#fff; height:0px">                      </pre>
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<pre style="border:0px; background-color:#fff">/pop/</pre>
</td>
<td>GET</td>
<td></td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">
{
"AppName": "MongoPop",
"Version": 1.0
}
        </pre>
</td>
<td>Returns the version of the API.</td>
</tr>
<tr>
<td>
<pre style="border:0px; background-color:#fff">/pop/ip</pre>
</td>
<td>GET</td>
<td></td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">{"ip": string}</pre>
</td>
<td>Fetches the IP Address of the server running the Mongopop backend.</td>
</tr>
<tr>
<td>
<pre style="border:0px; background-color:#fff">/pop/config</pre>
</td>
<td>GET</td>
<td></td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">
{
mongodb: {
    defaultDatabase: string,
    defaultCollection: string,
    defaultUri: string
},
mockarooUrl: string
}
        </pre>
</td>
<td>Fetches client-side defaults from the back-end config file.</td>
</tr>
<tr>
<td>
<pre style="border:0px; background-color:#fff">/pop/addDocs</pre>
</td>
<td>POST</td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">
{
MongoDBURI: string;
collectionName: string;
dataSource: string;
numberDocs: number;
unique: boolean;
}
        </pre>
</td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">
{
success: boolean;
count: number;
error: string;
}
        </pre>
</td>
<td>Add `numberDocs` batches of documents, using documents fetched from `dataSource`</td>
</tr>
<tr>
<td>
<pre style="border:0px; background-color:#fff">/pop/sampleDocs</pre>
</td>
<td>POST</td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">
{
MongoDBURI: string;
collectionName: string;
numberDocs: number;
}
        </pre>
</td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">
{
success: boolean;   
documents: string;
error: string;
}
        </pre>
</td>
<td>Read a sample of the documents from a collection.</td>
</tr>
<tr>
<td>
<pre style="border:0px; background-color:#fff">/pop/countDocs</pre>
</td>
<td>POST</td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">
{
MongoDBURI: string; 
collectionName: string;
}
        </pre>
</td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">
{
success: boolean;   
count: number;
error: string;
}
        </pre>
</td>
<td>Counts the number of documents in the collection.</td>
</tr>
<tr>
<td>
<pre style="border:0px; background-color:#fff">/pop/updateDocs</pre>
</td>
<td>POST</td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">
{
MongoDBURI: string;
collectionName: string;
matchPattern: Object;
dataChange: Object;
threads: number;
}
        </pre>
</td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">
{
success: boolean;
count: number;
error: string;
}
        </pre>
</td>
<td>Apply an update to all documents in a collection<br />
    which match a given pattern</td>
</tr>
</tbody>
</table>
<h4>Express</h4>
<p><a href="http://expressjs.com/" title="Express.js web application framework for Node.js">Express</a> is the web application framework that runs your back-end application (JavaScript) code. Express runs as a module within the Node.js environment.</p>
<p>Express can handle the routing of requests to the right functions within your application (or to different apps running in the same environment).</p>
<p>You can run the app&#8217;s full business logic within Express and even use an optional <em>view engine</em> to generate the final HTML to be rendered by the user&#8217;s browser. At the other extreme, Express can be used to simply provide a <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">REST API</a> – giving the front-end app access to the resources it needs e.g., the database.</p>
<p>The Mongopop application uses Express to perform two functions:</p>
<ul>
<li>Send the front-end application code to the remote client when the user browses to our app</li>
<li>Provide a REST API that the front-end can access using HTTP network calls, in order to access the database</li>
</ul>
<h4>Downloading, running, and using the application</h4>
<p>The application&#8217;s Express code is included as part of the Mongopop package installed in <a href="./../../mongodb/mean_stack_2_mongodb_node_js/index.html" title="Using MongoDB With Node.js">Part 2: Using MongoDB With Node.js</a>.</p>
<h4>What are all of these files?</h4>
<p>A reminder of the files described in <a href="./../../mongodb/mean_stack_2_mongodb_node_js/index.html" title="Using MongoDB With Node.js">Part 2</a>:</p>
<ul>
<li><strong><code>package.json</code></strong>: Instructs the Node.js package manager (<code>npm</code>) on what it needs to do; including which dependency packages should be installed</li>
<li><strong><code>node_modues</code></strong>: Directory where <code>npm</code> will install packages</li>
<li><strong><code>node_modues/mongodb</code></strong>: The <a href="https://mongodb.github.io/node-mongodb-native/" title="MongoDB JavaScript driver for Node.js">MongoDB driver for Node.js</a></li>
<li><strong><code>node_modues/mongodb-core</code></strong>: Low-level MongoDB driver library; available for framework developers (application developers should avoid using it directly)</li>
<li><strong><code>javascripts/db.js</code></strong>: A JavaScript module we&#8217;ve created for use by our Node.js apps (in this series, it will be Express) to access MongoDB; this module in turn uses the MongoDB Node.js driver.</li>
</ul>
<p>Other files and directories that are relevant to our Express application:</p>
<ul>
<li><strong><code>config.js</code></strong>: Contains the application–specific configuration options</li>
<li><strong><code>bin/www</code></strong>: The script that starts an Express application; this is invoked by the <code>npm start</code> script within the <code>package.json</code> file. Starts the HTTP server, pointing it to the <code>app</code> module in <code>app.js</code></li>
<li><strong><code>app.js</code></strong>: Defines the main application module (<code>app</code>). Configures:
<ul>
<li>That the application will be run by Express</li>
<li>Which routes there will be &amp; where they are located in the file system (<code>routes</code> directory)</li>
<li>What view engine to use (Jade in this case)</li>
<li>Where to find the /views/ to be used by the view engine (<code>views</code> directory)</li>
<li>What middleware to use (e.g. to parse the JSON received in requests)</li>
<li>Where the static files (which can be read by the remote client) are located (<code>public</code> directory)</li>
<li>Error handler for queries sent to an undefined route</li>
</ul>
</li>
<li><strong><code>views</code></strong>: Directory containing the templates that will be used by the Jade view engine to create the HTML for any pages generated by the Express application (for this application, this is just the error page that&#8217;s used in cases such as mistyped routes (&#8220;404 Page not found&#8221;))</li>
<li><strong><code>routes</code></strong>: Directory containing one JavaScript file for each Express route
<ul>
<li><strong><code>routes/pop.js</code></strong>: Contains the Express application for the <code>/pop</code> route; this is the implementation of the Mongopop REST API. This defines methods for all of the supported route paths.</li>
</ul>
</li>
<li><strong><code>public</code></strong>: Contains all of the static files that must be accessible by a remote client (e.g., our Angular to React apps). This is not used for the REST API and so can be ignored until Parts 4 and 5.</li>
</ul>
<p>The rest of the files and directories can be ignored for now – they will be covered in later posts in this series.</p>
<h4>Architecture</h4>
<p><img decoding="async" src="./../../wp-content/uploads/2017/02/REST_API.png" alt="REST AIP implemented in Express.js" title="Rest API implemented in Express.js" /></p>
<p>The new REST API (implemented in <code>routes/pop.js</code>) uses the <code>javascripts/db.js</code> database layer implemented in <a href="./../../mongodb/mean_stack_2_mongodb_node_js/index.html" title="Node.js and MongoDB as part of the MEAN stack">Part 2</a> to access the MongoDB database via the <a href="https://mongodb.github.io/node-mongodb-native/" title="MongoDB JavaScript Node.js driver API">MongoDB Node.js Driver</a>. As we don&#8217;t yet have either the Angular or React clients, we will user the <code>curl</code> command-line tool to manually test the REST API.</p>
<h4>Code highlights</h4>
<h4><code>config.js</code></h4>
<p><script src="https://gist.github.com/am-MongoDB/d6f71c9342f0b04fd077a6101368faf4.js"></script></p>
<p>The <code>config</code> module can be imported by other parts of the application so that your preferences can be taken into account.</p>
<p><code>expressPort</code> is used by <code>bin/www</code> to decide what port the web server should listen on; change this if that port is already in use.</p>
<p><code>client</code> contains defaults to be used by the client (Angular or React). It&#8217;s important to create your own schema at <a href="https://www.mockaroo.com/" title="Generate JSON data sets using Mockaroo">Mockaroo.com</a> and replace <code>client.mockarooUrl</code> with your custom URL (the one included here will fail if used too often).</p>
<h4><code>bin/www</code></h4>
<p>This is mostly boiler-plate code to start Express with your application. This code ensures that it is our application, <code>app.js</code>, that is run by the Express server:</p>
<p><script src="https://gist.github.com/am-MongoDB/895e18af7cf757e379787e238535dba6.js"></script></p>
<p>This code uses the <code>expressPort</code> from <code>config.js</code> as the port for the server to listen on; it will be overruled if the user sets the <code>PORT</code> environment variable:</p>
<p><script src="https://gist.github.com/am-MongoDB/cdd015a34e639798c92fa5391591c972.js"></script></p>
<h4><code>app.js</code></h4>
<p>This <a href="https://github.com/am-MongoDB/MongoDB-Mongopop/blob/master/app.js" title="app.js file for the Mockaroo MongoDB MEAN/MERN stack app">file</a> defines the <code>app</code> module ; much of the contents are boilerplate (and covered by comments in the code) but we look here at a few of the lines that are particular to this application.</p>
<p>Make this an Express application:</p>
<p><script src="https://gist.github.com/am-MongoDB/b7c0afd975e8d9a00d7f3504f950f5d7.js"></script></p>
<p>Define where the views (templates used by the Jade view engine to generate the HTML code) and static files (files that must be accessible by a remote client) are located:</p>
<p><script src="https://gist.github.com/am-MongoDB/00b713272a703500507d07d501e608f7.js"></script></p>
<p>Create the <code>/pop</code> route and associate it with the file containing its code (<code>routes/pop.js</code>):</p>
<p><script src="https://gist.github.com/am-MongoDB/f869436734576d82ebbb2bbefb4dd9e3.js"></script></p>
<h4><code>routes/pop.js</code></h4>
<p>This <a href="https://github.com/am-MongoDB/MongoDB-Mongopop/blob/master/routes/pop.js" title="Implementation of REST API for Mockaroo MongoDB population app">file</a> implements each of the operations provided by the Mongopop REST API. Because of the the <code>/pop</code> route defined in <code>app.js</code> Express will direct any URL of the form <code>http://&lt;mongopop-server&gt;:3000/pop/X</code> here. Within this file a route handler is created in order direct incoming requests to <code>http://&lt;mongopop-server&gt;:3000/pop/X</code> to the appropriate function:</p>
<p><script src="https://gist.github.com/am-MongoDB/8f755926a46dc716b189b2508b499279.js"></script></p>
<p>As the <code>/pop</code> route is only intended for the REST API, end users shouldn&#8217;t be browsing here but we create a top level handler for the <code>GET</code> method in case they do:</p>
<p><script src="https://gist.github.com/am-MongoDB/ddcfff4375d14e156e6c8fe8910e54f8.js"></script></p>
<p><img decoding="async" src="./../../wp-content/uploads/2017/02/top_of_pop_route.png" alt="Results of browsing to the top-route for the Mongopop MongoDB application" title="Results of browsing to the top-route for the Mongopop MongoDB Application" /></p>
<p>This is the first time that we see how to send a response to a request; <code>res.json(testObject);</code> converts <code>testObject</code> into a JSON document and sends it back to the requesting client as part of the response message.</p>
<p>The simplest useful route path is for the <code>GET</code> method on <code>/pop/ip</code> which sends a response containing the IP address of the back-end server. This is useful to the Mongopop client as it means the user can see it and add it to the <a href="https://www.mongodb.com/cloud" title="MongoDB Atlas - MongoDB as a cloud service">MongoDB Atlas</a> whitelist. The code to determine and store <code>publicIP</code> is left out here but can be found in the <a href="https://github.com/am-MongoDB/MongoDB-Mongopop/blob/master/routes/pop.js" title="Implementation of MongoDB MongoPop REST API">full source file for <code>pop.js</code></a>.</p>
<p><script src="https://gist.github.com/am-MongoDB/cd3ce3a68574562330010bf3f9a5b93f.js"></script></p>
<p><img decoding="async" src="./../../wp-content/uploads/2017/02/ip_route.png" alt="Fetching the IP address for the MongoDB Mongopop back-end using REST API" title="Fetching the IP address for the MongoDB Mongopop back-end using REST API" /></p>
<p>We&#8217;ve seen that it&#8217;s possible to test <code>GET</code> methods from a browser&#8217;s address bar; that isn&#8217;t possible for <code>POST</code> methods and so it&#8217;s useful to be able to test using the <code>curl</code> command-line command:</p>
<p><script src="https://gist.github.com/am-MongoDB/480520ac8dba6989fc0f0b43c2106257.js"></script></p>
<p>The <code>GET</code> method for <code>/pop/config</code> is just as simple – responding with the client-specific configuration data:</p>
<p><script src="https://gist.github.com/am-MongoDB/c48e0d2c94667303d6ba7e4da82aa14a.js"></script></p>
<p><script src="https://gist.github.com/am-MongoDB/b5348fea74155be8289feedb8bdb2555.js"></script></p>
<p>The results of the request are still very simple but the output from <code>curl</code> is already starting to get messy; piping it through <code>python -mjson.tool</code> makes it easier to read:</p>
<p><script src="https://gist.github.com/am-MongoDB/d690566ecedccc7e1d24087d97b3a607.js"></script></p>
<p>The simplest operation that actually accesses the database is the <code>POST</code> method for the <code>/pop/countDocs</code> route path:</p>
<p><script src="https://gist.github.com/am-MongoDB/db488a9f9866f5a91adddba3fe1f694f.js"></script></p>
<p><code>database</code> is an instance of the object prototype defined in <code>javascripts/db</code> (see <a href="./../../mongodb/mean_stack_2_mongodb_node_js/index.html" title="The Modern Application Stack – Part 2: Using MongoDB With Node.js">The Modern Application Stack – Part 2: Using MongoDB With Node.js</a>) and so all this method needs to do is use that object to:</p>
<ul>
<li>Connect to the database (using the address of the MongoDB server provided in the request body). The results from the promise returned by <code>database.connect</code> is passed to the function(s) in the first <code>.then</code> clause. Refer back to <a href="./../../mongodb/mean_stack_2_mongodb_node_js/index.html" title="Using MongoDB With Node.js">Part 2: Using MongoDB With Node.js</a> if you need a recap on using <em>promises</em>.</li>
<li>The function in the <code>.then</code> clause handles the case where the <code>database.connect</code> promise is resolved (success). This function requests a count of the documents – the database connection information is now stored within the <code>database</code> object and so only the collection name needs to be passed. The promise returned by <code>database.countDocuments</code> is passed to the next <code>.then</code> clause. Note that there is no second (error) function provided, and so if the promise from <code>database.connect</code> is rejected, then that failure passes through to the next <code>.then</code> clause in the chain.</li>
<li>The second <code>.then</code> clause has two functions:
<ul>
<li>The first is invoked if and when the promise is resolved (success) and it returns a success response (which is automatically converted into a resolved promise that it passed to the final <code>.then</code> clause in the chain). <code>count</code> is the value returned when the promise from the call to <code>database.countDocuments</code> was resolved.</li>
<li>The second function handles the failure case (could be from either <code>database.connect</code> or <code>database.countDocuments</code>) by returning an error response object (which is converted to a resolved promise).</li>
</ul>
</li>
<li>The final <code>.then</code> clause closes the database connection and then sends the HTTP response back to the client; the response is built by converting the <code>resultObject</code> (which could represent success or failure) to a JSON string.</li>
</ul>
<p>Once more, <code>curl</code> can be used from the command-line to test this operation; as this is a <code>POST</code> request, the <code>--data</code> option is used to pass the JSON document to be included in the request:</p>
<p><script src="https://gist.github.com/am-MongoDB/bcfe2d25cc5cca3f541f33d6e10395f7.js"></script></p>
<p><code>curl</code> can also be used to test the error paths. Cause the database connection to fail by using the wrong port number in the MongoDB URI:</p>
<p><script src="https://gist.github.com/am-MongoDB/c1870ed519d3c984233ec0cb58f06586.js"></script></p>
<p>Cause the count to fail by using the name of a non-existent collection:</p>
<p><script src="https://gist.github.com/am-MongoDB/2eb854b3ee2aa967acb1a66f8d00640f.js"></script></p>
<p>The <code>POST</code> method for the <code>pop/sampleDocs</code> route path works in a very similar way:</p>
<p><script src="https://gist.github.com/am-MongoDB/48ff297002eceb8201f67fe58e7d1d71.js"></script></p>
<p>Testing this new operation:</p>
<p><script src="https://gist.github.com/am-MongoDB/8a27a81809e2cd98baf9c29ccadd2381.js"></script></p>
<p>The <code>POST</code> method for <code>pop/updateDocs</code> is a little more complex as the caller can request multiple update operations be performed. The simplest way to process multiple asynchronous, promise-returning function calls in parallel is to build an array of the tasks and pass it to the <code>Promise.all</code> method which returns a promise that either resolves after all of the tasks have succeeded or is rejected if any of the tasks fail:</p>
<p><script src="https://gist.github.com/am-MongoDB/523c077b067da17bcca7919a35961a8a.js"></script></p>
<p>Testing with <code>curl</code>:</p>
<p><script src="https://gist.github.com/am-MongoDB/0efee82247ea652b5ecf367b465b139d.js"></script></p>
<p>The final method uses example data from a service such as <a href="https://www.mockaroo.com/">Mockaroo</a> to populate a MongoDB collection. A helper function is created that makes the call to that external service:</p>
<p><script src="https://gist.github.com/am-MongoDB/d988ff3dba646151ea4118473b3dc4c4.js"></script></p>
<p>That function is then used in the <code>POST</code> method for <code>/pop/addDocs</code>:</p>
<p><script src="https://gist.github.com/am-MongoDB/76dd46d05f9472bdbe19104a5fc19c42.js"></script></p>
<p>This method is longer than the previous ones – mostly because there are two paths:</p>
<ul>
<li>In the first path, the client has requested that a fresh set of 1,000 example documents be used for each pass at adding a batch of documents. This path is much slower and will eat through your Mockaroo quota much faster.</li>
<li>In the second path, just one batch of 1,000 example documents is fetched from Mockaroo and then those same documents are repeatedly added. This path is faster but it results in duplicate documents (apart from a MongoDB-created <code>_id</code> field). This path cannot be used if the <code>_id</code> is part of the example documents generated by Mockaroo.</li>
</ul>
<p>So far, we&#8217;ve used the Chrome browser and the <code>curl</code> command-line tool to test the REST API. A third approach is to use the <a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop">Postman Chrome app</a>:</p>
<p><img decoding="async" src="./../../wp-content/uploads/2017/02/Test_REST_API_with_Postman.png" alt="Testing MongoDB Mongopop REST API with Postman Chrome app" title="Testing MongoDB Mongopop REST API with Postman Chrome app" /></p>
<h4>Debugging Tips</h4>
<p>One way to debug a Node.js application is to liberally sprinkle <code>console.log</code> messages throughout your code but that takes extra effort and bloats your code base. Every time you want to understand something new, you must add extra logging to your code and then restart your application.</p>
<p>Developers working with browser-side JavaScript benefit from the excellent tools built into modern browsers – for example, Google&#8217;s <a href="https://developer.chrome.com/devtools" title="Chrome Developer Tools">Chrome Developer Tools</a> which let you:</p>
<ul>
<li>Browse code (e.g. HTML and JavaScript)</li>
<li>Add breakpoints</li>
<li>View &amp; alter contents of variables</li>
<li>View and modify css styles</li>
<li>View network messages</li>
<li>Access the console (view output and issue commands)</li>
<li>Check security details</li>
<li>Audit memory use, CPU, etc.</li>
</ul>
<p>You open the Chrome DevTools within the Chrome browser using &#8220;View/Developer/Developer Tools&#8221;.</p>
<p>Fortunately, you can use the <code>node-debug</code> command of <a href="https://github.com/node-inspector/node-inspector"><code>node-inspector</code></a> to get a very similar experience for Node.js back-end applications. To install <code>node-inspector</code>:</p>
<p><script src="https://gist.github.com/am-MongoDB/a4e8beffc4944a1661a41a1142e8aa27.js"></script></p>
<p><code>node-inspector</code> can be used to debug the Mongopop Express application by starting it with <code>node-debug</code> via the <code>express-debug</code> script in <code>package.json</code>:</p>
<p><script src="https://gist.github.com/am-MongoDB/e2e9bb6c5817bbbc3244ec1bf668e001.js"></script></p>
<p>To run the Mongopop REST API with <code>node-debug</code>, kill the Express app if it&#8217;s already running and then execute:</p>
<p><script src="https://gist.github.com/am-MongoDB/ac8ea737900ca517545786b558a01cfa.js"></script></p>
<p>Note that this automatically adds a breakpoint at the start of the app and so you will need to skip over that to run the application.</p>
<p><img decoding="async" src="./../../wp-content/uploads/2017/02/Node_Inspector.png" alt="Using Chrome Developer Tools with MongoDB Express Node.js application" title="Using Chrome Developer Tools with MongoDB Express Node.js application" /></p>
<p>Depending on your version of Node.js, you may see this error:</p>
<p><script src="https://gist.github.com/am-MongoDB/813df5e59e4f68224fcc2e3853df7e83.js"></script></p>
<p>If you do, apply <a href="https://github.com/node-inspector/node-inspector/pull/938/files">this patch</a> to <code>/usr/local/lib/node_modules/node-inspector/lib/InjectorClient.js</code>.</p>
<h4>Summary &amp; what&#8217;s next in the series</h4>
<p><a href="./../../mongodb/modern-application-stack-part-1-introducing-the-mean-stack/index.html" title="Introducing the MEAN stack and MERN stack">Part 1: Introducing The MEAN Stack</a> provided an overview of the technologies that are used by modern application developers – in particular, the MERN and MEAN stacks. <a href="./../../mongodb/mean_stack_2_mongodb_node_js/index.html" title="Using MongoDB with Node.js">Part 2: Using MongoDB With Node.js</a> set up Node.js and the MongoDB Driver and then used them to build a new Node.js module to provide a simplified interface to the database.</p>
<p>This post built upon the first two of the series by stepping through how to implement a REST API using Express. We also looked at three different ways to test this API and how to debug Node.js applications. This REST API is required by both the Angular (Part 4) and React (Part 5) web app clients, as well as by the alternative UIs explored in Part 6.</p>
<p>The next part of this series implements the Angular client that makes use of the REST API – at the end of that post, you will understand the end-to-end steps required to implement an application using the MEAN stack.</p>
<p>Continue to follow this blog series to step through building the remaining stages of the <a href="https://github.com/am-MongoDB/MongoDB-Mongopop" title="Mongopop – MongoDB data population app">MongoPop</a> application:</p>
<ul>
<li><a href="./../../mongodb/modern-application-stack-part-1-introducing-the-mean-stack/index.html" title="MEAN stack, MERN stack">Part 1: Introducing The MEAN Stack (and the young MERN upstart)</a></li>
<li><a href="./../../mongodb/mean_stack_2_mongodb_node_js/index.html" title="Using MongoDB With Node.js">Part 2: Using MongoDB With Node.js</a></li>
<li><a href="./../../mongodb/the-modern-application-stack-part-3-building-a-rest-api-using-express-js/index.html" title="Building REST API for MongoDB using Express JS">Part 3: Building a REST API with Express.js</a></li>
<li><a href="./../../mongodb/the-modern-application-stack-part-4-building-a-client-ui-using-angular-2-formerly-angularjs-typescript/index.html" title="Completing the MEAN stack – Mongopop Angular2 client">Part 4: Building a Client UI Using Angular 2 (formerly AngularJS) &amp; TypeScript</a></li>
<li><a href="./../../mongodb/the-modern-application-stack-part-5-using-reactjs-es6-jsx-to-build-a-ui-the-rise-of-mern/index.html" title="Building an application front-end with ReactJS and ES6">Part 5: Using ReactJS, ES6 &amp; JSX to Build a UI (the rise of MERN)</a></li>
<li><a href="./../../mongodb/rest-mobile-app-amazon-alexa-cloud-services/index.html" title="Using REST APIs from mobile applications and Amazon Alexa">Part 6: Browsers Aren&#8217;t the Only UI – Mobile Apps, Amazon Alexa, Cloud Services&#8230;</a></li>
</ul>
<h4>A simpler way to build your app – MongoDB Stitch, Backend as a Service</h4>
<p><a href="https://www.mongodb.com/cloud/stitch">MongoDB Stitch</a> is a backend as a service (BaaS), giving developers a REST-like API to MongoDB, and composability with other services, backed by a robust system for configuring fine-grained data access controls. Stitch provides native SDKs for JavaScript, iOS, and Android.</p>
<p>Built-in integrations give your application frontend access to your favorite third party services: Twilio, AWS S3, Slack, Mailgun, PubNub, Google, and more. For ultimate flexibility, you can add custom integrations using MongoDB Stitch&#8217;s HTTP service.</p>
<p>MongoDB Stitch allows you to compose multi-stage pipelines that orchestrate data across multiple services; where each stage acts on the data before passing its results on to the next.</p>
<p>Unlike other BaaS offerings, MongoDB Stitch works with your existing as well as new MongoDB clusters, giving you access to the full power and scalability of the database. By defining appropriate data access rules, you can selectively expose your existing MongoDB data to other applications through MongoDB Stitch&#8217;s API.</p>
<p>If you&#8217;d like to try it out, <a href="./../../mongodb/mongodb-stitch-the-latest-and-best-way-to-build-your-app/index.html" title="MongoDB Stitch - the latest, and best way to build your app">step through building an application with MongoDB Stitch</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mongodb/the-modern-application-stack-part-3-building-a-rest-api-using-express-js/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
