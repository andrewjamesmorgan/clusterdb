<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>game &#8211; Andrew Morgan on Databases</title>
	<atom:link href="./feed/index.html" rel="self" type="application/rss+xml" />
	<link>./../../index.html</link>
	<description>Database technologies - especially around scalability and High Availability</description>
	<lastBuildDate>Mon, 14 Mar 2022 16:30:15 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>Building a collaborative iOS Minesweeper game with Realm</title>
		<link>./../../mongodb/building-a-collaborative-ios-minesweeper-game-with-realm/index.html</link>
					<comments>./../../mongodb/building-a-collaborative-ios-minesweeper-game-with-realm/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Mon, 14 Mar 2022 16:30:15 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[Realm]]></category>
		<category><![CDATA[game]]></category>
		<category><![CDATA[ios]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[Swift]]></category>
		<category><![CDATA[SwiftUI]]></category>
		<guid isPermaLink="false">./../../index.html?p=4668</guid>

					<description><![CDATA[I wanted to build an app that we could use at events to demonstrate Realm Sync. It needed to be fun to interact with, and so a multiplayer game made sense. Tic-tac-toe is too simple to get excited about. I&#8217;m not a game developer and so Call Of Duty wasn&#8217;t an option. Then I remembered]]></description>
										<content:encoded><![CDATA[<p><a href="./../../wp-content/uploads/2022/03/ATF-720x720-1.png"><img fetchpriority="high" decoding="async" src="./../../wp-content/uploads/2022/03/ATF-720x720-1-300x300.png" alt="Realm-Sweeper. Writing a multiplayer iOS Minesweeper game using SwiftUI and Realm" width="300" height="300" class="alignright size-medium wp-image-4669" srcset="./../../wp-content/uploads/2022/03/ATF-720x720-1-300x300.png 300w, ./../../wp-content/uploads/2022/03/ATF-720x720-1-150x150.png 150w, ./../../wp-content/uploads/2022/03/ATF-720x720-1-144x144.png 144w, ./../../wp-content/uploads/2022/03/ATF-720x720-1.png 720w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>I wanted to build an app that we could use at events to demonstrate <a href="https://www.mongodb.com/realm/mobile/sync">Realm Sync</a>. It needed to be fun to interact with, and so a multiplayer game made sense. Tic-tac-toe is too simple to get excited about. I&#8217;m not a game developer and so <em>Call Of Duty</em> wasn&#8217;t an option. Then I remembered Microsoft&#8217;s <a href="https://en.wikipedia.org/wiki/Minesweeper">Minesweeper</a>.</p>
<p>Minesweeper was a Windows fixture from 1990 until Windows 8 relegated it to the app store in 2012. It was a single-player game, but it struck me as something that could be a lot of fun to play with others. Some family beta-testing of my first version while waiting for a ferry proved that it did get people to interact with each other (even if most interactions involved shouting, &#8220;Which of you muppets clicked on that mine?!&#8221;).</p>
<p><img decoding="async" src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/IMG_1301_81fa444116.jpeg" alt="Family sat around a table, all playing the Realm-Sweeper game on their iPhones" /></p>
<p>You can download the back end and iOS apps from the <a href="https://github.com/realm/Realm-Sweeper">Realm-Sweeper repo</a>, and get it up and running in a few minutes if you want to play with it.</p>
<p>This article steps you through some of the key aspects of setting up the backend Realm app, as well as the iOS code. Hopefully, you&#8217;ll see how simple it is and try building something for yourself. If anyone&#8217;s looking for ideas, then <a href="https://en.wikipedia.org/wiki/Sokoban">Sokoban</a> could be interesting.</p>
<h2>Prerequisites</h2>
<ul>
<li><a href="https://github.com/realm/realm-swift/releases/tag/v10.23.0">Realm-Cocoa 10.20.1+</a></li>
<li>iOS 15+</li>
</ul>
<h2>The Minesweeper game</h2>
<p>The gameplay for Minesweeper is very simple.</p>
<p>You&#8217;re presented with a grid of gray tiles. You tap on a tile to expose what&#8217;s beneath. If you expose a mine, game over. If there isn&#8217;t a mine, then you&#8217;ll be rewarded with a hint as to how many mines are adjacent to that tile. If you deduce (or guess) that a tile is covering a mine, then you can plant a flag to record that.</p>
<p>You win the game when you correctly flag every mine and expose what&#8217;s behind every non-mined tile.</p>
<h3>What Realm-Sweeper adds</h3>
<p>Minesweeper wasn&#8217;t designed for touchscreen devices; you had to use a physical mouse. Realm-Sweeper brings the game into the 21st century by adding touch controls. Tap a tile to reveal what&#8217;s beneath; tap and hold to plant a flag.</p>
<p>Minesweeper was a single-player game. All people who sign into Realm-Sweeper with the same user ID get to collaborate on the same game in real time.</p>
<p><img decoding="async" src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/realm_sweeper_24ef46cef1.gif" alt="Animation of two iPhones. As a user taps a tile on one device, the change appears almost instantly on the other" /></p>
<p>You also get to configure the size of the grid and how many mines you&#8217;d like to hide.</p>
<h2>The data model</h2>
<p>I decided to go for a simple data model that would put Realm sync to the test.</p>
<p>Each game is a single document/object that contains meta data (score, number of rows/columns, etc.) together with the grid of tiles (the board):</p>
<p><img decoding="async" src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/schema_f791f6acf6.png" alt="Data model for the Game Class" /></p>
<p>This means that even a modestly sized grid (20&#215;20 tiles) results in a <code>Game</code> document/object with more than 2,000 attributes.</p>
<p>Every time you tap on a tile, the <code>Game</code> object has to be synced with all other players. Those players are also tapping on tiles, and those changes have to be synced too. If you tap on a tile which isn&#8217;t adjacent to any mines, then the app will recursively ripple through exposing similar, connected tiles. That&#8217;s a lot of near-simultaneous changes being made to the same object from different devices—a great test of Realm&#8217;s automatic conflict resolution!</p>
<h2>The backend Realm app</h2>
<p>If you don&#8217;t want to set this up yourself, simply follow the <a href="https://github.com/realm/Realm-Sweeper/tree/main/Realm">instructions from the repo</a> to import the app.</p>
<p>If you opt to build the backend app yourself, there are only two things to configure once you create the empty Realm app:</p>
<ol>
<li><a href="https://docs.mongodb.com/realm/authentication/email-password/#:~:text=Summary-,Overview,email%20addresses%20are%20case%2Dsensitive.">Enable email/password authentication</a>. I kept it simple by opting to auto-confirm new users and sticking with the default password-reset function (which does nothing).</li>
<li><a href="https://docs.mongodb.com/realm/sync/configure/enable-sync/">Enable partitioned Realm sync</a>. Set the partition key to <code>partition</code> and enable developer mode (so that the schema will be created automatically when the iOS app syncs for the first time).</li>
</ol>
<p>The <code>partition</code> field will be set to the username—allowing anyone who connects as that user to sync all of their games.</p>
<p>You can also add sync rules to ensure that a user can only sync their own games (in case someone hacks the mobile app). I always prefer using Realm functions for permissions. You can add this for both the read and write rules:</p>
<pre><code class="json">{
  "%%true": {
    "%function": {
      "arguments": [
        "%%partition"
      ],
      "name": "canAccessPartition"
    }
  }
}
</code></pre>
<p>The <code>canAccessPartition</code> function is:</p>
<pre><code class="js">exports = function(partition) {
  const user = context.user.data.email;
  return partition === user;
};
</code></pre>
<h2>The iOS app</h2>
<p>I&#8217;d suggest starting by downloading, configuring, and running the app—just follow the <a href="https://github.com/realm/Realm-Sweeper/tree/main/iOS">instructions from the repo</a>. That way, you can get a feel for how it works.</p>
<p>This isn&#8217;t intended to be a full tutorial covering every line of code in the app. Instead, I&#8217;ll point out some key components.</p>
<p>As always with Realm and MongoDB, it all starts with the data…</p>
<h3>Model</h3>
<p>There&#8217;s a single top-level Realm Object—<code>Game</code>:</p>
<pre><code class="swift">class Game: Object, ObjectKeyIdentifiable {
    @Persisted(primaryKey: true) var _id: ObjectId
    @Persisted var numRows = 0
    @Persisted var numCols = 0
    @Persisted var score = 0
    @Persisted var startTime: Date? = Date()
    @Persisted var latestMoveTime: Date?
    @Persisted var secondsTakenToComplete: Int?
    @Persisted var board: Board?
    @Persisted var gameStatus = GameStatus.notStarted
    @Persisted var winningTimeInSeconds: Int?
    …
}
</code></pre>
<p>Most of the fields are pretty obvious. The most interesting is <code>board</code>, which contains the grid of tiles:</p>
<pre><code class="swift">class Board: EmbeddedObject, ObjectKeyIdentifiable {
    @Persisted var rows = List&lt;Row&gt;()
    @Persisted var startingNumberOfMines = 0
    ... 
}
</code></pre>
<p><code>row</code> is a list of <code>Cells</code>:</p>
<pre><code class="swift">class Row: EmbeddedObject, ObjectKeyIdentifiable {
    @Persisted var cells = List&lt;Cell&gt;()
    ...
}

class Cell: EmbeddedObject, ObjectKeyIdentifiable {
    @Persisted var isMine = false
    @Persisted var numMineNeigbours = 0
    @Persisted var isExposed = false
    @Persisted var isFlagged = false
    @Persisted var hasExploded = false
    ...
}
</code></pre>
<p>The model is also where the ~~business~~ game logic is implemented. This means that the views can focus on the UI. For example, <code>Game</code> includes a computed variable to check whether the game has been solved:</p>
<pre><code class="swift">var hasWon: Bool {
    guard let board = board else { return false }
    if board.remainingMines != 0 { return false }

    var result = true

    board.rows.forEach() { row in
        row.cells.forEach() { cell in
            if !cell.isExposed &amp;&amp; !cell.isFlagged {
                result = false
                return
            }
        }
        if !result { return }
    }
    return result
}
</code></pre>
<h3>Views</h3>
<p>As with any SwiftUI app, the UI is built up of a hierarchy of many views.</p>
<p><img decoding="async" src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/views_aaac46f078.png" alt="Screen capture from Xcode showing the hierarchy of views making up the RealmSweeper UI" /></p>
<p>Here&#8217;s a quick summary of the <a href="https://github.com/realm/Realm-Sweeper/tree/main/iOS/RealmSweeper/Views">views</a> that make up Real-Sweeper:</p>
<p><strong><a href="https://github.com/realm/Realm-Sweeper/blob/main/iOS/RealmSweeper/Views/ContentView.swift"><code>ContentView</code></a></strong> is the top-level view. When the app first runs, it will show the <code>LoginView</code>. Once the user has logged in, it shows <code>GameListView</code> instead. It&#8217;s here that we set the Realm Sync partition (to be the <code>username</code> of the user that&#8217;s just logged in):</p>
<pre><code class="swift">if username == "" {
    LoginView(username: $username)
} else {
    GameListView()
        .environment(\.realmConfiguration, realmApp.currentUser!.configuration(partitionValue: username))
        .navigationBarItems(leading: realmApp.currentUser != nil ? LogoutButton(username: $username) : nil)
}
</code></pre>
<p><code>ContentView</code> also includes the <code>LogoutButton</code> view.</p>
<p><strong><a href="https://github.com/realm/Realm-Sweeper/blob/main/iOS/RealmSweeper/Views/Users/LoginView.swift"><code>LoginView</code></a></strong> allows the user to provide a username and password:</p>
<p><img decoding="async" src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Login_View_034d3f058f.png" alt="Screen capture of the login view. Fields to enter username and password. Checkbox to indicate that you're registering a new user. Button to login," /></p>
<p>Those credentials are then used to register or log into the backend Realm app:</p>
<pre><code class="swift">func userAction() {
    Task {
        do {
            if newUser {
                try await realmApp.emailPasswordAuth.registerUser(
                    email: email, password: password)
            }
            let _ = try await realmApp.login(
                    credentials: .emailPassword(email: email, password: password))
            username = email
        } catch {
            errorMessage = error.localizedDescription
        }
    }
}
</code></pre>
<p><a href="https://github.com/realm/Realm-Sweeper/blob/main/iOS/RealmSweeper/Views/Game%20List/GameListView.swift"><strong><code>GameListView</code></strong></a> reads the list of this user&#8217;s existing games.</p>
<pre><code class="swift">@ObservedResults(Game.self, 
    sortDescriptor: SortDescriptor(keyPath: "startTime", ascending: false)) var games
</code></pre>
<p>It displays each of the games within a <code>GameSummaryView</code>. If you tap one of the games, then you jump to a <code>GameView</code> for that game:</p>
<pre><code class="swift">NavigationLink(destination: GameView(game: game)) {
    GameSummaryView(game: game)
}
</code></pre>
<p><img decoding="async" src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Game_List_View_22711c2b4a.png" alt="GameListView, Screen capture of a list of games, together with buttons to logout, set settings, or create a new game" /></p>
<p>Tap the settings button and you&#8217;re sent to <code>SettingsView</code>.</p>
<p>Tap the &#8220;New Game&#8221; button and a new <code>Game</code> object is created and then stored in Realm by appending it to the <code>games</code> live query:</p>
<pre><code class="swift">private func createGame() {
    numMines = min(numMines, numRows * numColumns)
    game = Game(rows: numRows, cols: numColumns, mines: numMines)
    if let game = game {
        $games.append(game)
    }
    startGame  = true
}
</code></pre>
<p><strong><a href="https://github.com/realm/Realm-Sweeper/blob/main/iOS/RealmSweeper/Views/SettingsView.swift"><code>SettingsView</code></a></strong> lets the user choose the number of tiles and mines to use:</p>
<p><img decoding="async" src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Settings_View_39aa24c7ce.png" alt="SettingsView. Steppers to set the number of rows, columns, and mines" /></p>
<p>If the user uses multiple devices to play the game (e.g., an iPhone and an iPad), then they may want different-sized boards (taking advantage of the extra screen space on the iPad). Because of that, the view uses the device&#8217;s <code>UserDefaults</code> to locally persist the settings rather than storing them in a synced realm:</p>
<pre><code class="swift">@AppStorage("numRows") var numRows = 10
@AppStorage("numColumns") var numColumns = 10
@AppStorage("numMines") var numMines = 15
</code></pre>
<p><strong><a href="https://github.com/realm/Realm-Sweeper/blob/main/iOS/RealmSweeper/Views/Game%20List/GameSummaryView.swift"><code>GameSummaryView</code></a></strong> displays a summary of one of the user&#8217;s current or past games.</p>
<p><img decoding="async" src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Game_Summary_View_e80a138236.png" alt="GameSummaryView. Screen capture of view containing the start and completion times + emoji for the status of the game" /></p>
<p><strong><a href="https://github.com/realm/Realm-Sweeper/blob/main/iOS/RealmSweeper/Views/Game/GameView.swift"><code>GameView</code></a></strong> shows the latest stats for the current game at the top of the screen:</p>
<p><img decoding="async" src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Game_Status_5ee8b8b6e0.png" alt="GameStatusView. Screen capture showing remaining mines, status of the game (smiling emoji) and elapsed time" /></p>
<p>It uses the <code>LEDCounter</code> and <code>StatusButton</code> views for the summary.</p>
<p>Below the summary, it displays the <code>BoardView</code> for the game.</p>
<p><strong><a href="https://github.com/realm/Realm-Sweeper/blob/main/iOS/RealmSweeper/Views/Control%20Box/Counters/LEDCounter.swift"><code>LEDCounter</code></a></strong> displays the provided number as three digits using a retro LED font:</p>
<p><img decoding="async" src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Counter_View_d7b73c42ce.png" alt="CounterView – 3 red LED numbers" /></p>
<p><strong><a href="https://github.com/realm/Realm-Sweeper/blob/main/iOS/RealmSweeper/Views/Control%20Box/StatusButton.swift"><code>StatusButton</code></a></strong> uses a <code>ZStack</code> to display the symbol for the game&#8217;s status on top of a tile image:</p>
<p><img decoding="async" src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Status_Button_8975894d39.png" alt="StatusButton. Smiling emoji in front of a gray tile" /></p>
<p>The view uses SwiftUI&#8217;s <a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-provide-relative-sizes-using-geometryreader"><code>GeometryReader</code></a> function to discover how much space is available so that it can select an appropriate font size for the symbol:</p>
<pre><code class="swift">GeometryReader { geo in
    Text(status)
        .font(.system(size: geo.size.height * 0.7))
}
</code></pre>
<p><strong><a href="https://github.com/realm/Realm-Sweeper/blob/main/iOS/RealmSweeper/Views/Game/BoardView.swift"><code>BoardView</code></a></strong> displays the game&#8217;s grid of tiles:</p>
<p><img decoding="async" src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Board_View_703d6386db.png" alt="BoardView. A grid of tiles. Some tiles have been removed, revealing colored numbers. One tile contains a red flag" /></p>
<p>Each of the tiles is represented by a <code>CellView</code> view.</p>
<p>When a tile is tapped, this view exposes its contents:</p>
<pre><code class="swift">.onTapGesture() {
    expose(row: row, col: col)
}
</code></pre>
<p>On a tap-and-hold, a flag is dropped:</p>
<pre><code class="swift">.onLongPressGesture(minimumDuration: 0.1) {
    flag(row: row, col: col)
}
</code></pre>
<p>When my family tested the first version of the app, they were frustrated that they couldn&#8217;t tell whether they&#8217;d held long enough for the flag to be dropped. This was an easy mistake to make as their finger was hiding the tile at the time—an example of where testing with a mouse and simulator wasn&#8217;t a substitute for using real devices. It was especially frustrating as getting it wrong meant that you revealed a mine and immediately lost the game. Fortunately, this is easy to fix using iOS&#8217;s haptic feedback:</p>
<pre><code class="swift">func hapticFeedback(_ isSuccess: Bool) {
    let generator = UINotificationFeedbackGenerator()
    generator.notificationOccurred(isSuccess ? .success : .error)
}
</code></pre>
<p>You now feel a buzz when the flag has been dropped.</p>
<p><strong><a href="CellView"><code>CellView</code></a></strong> displays an individual tile:</p>
<p><img decoding="async" src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Cell_View_6ee46c6103.png" alt="CellView. Tile containing a crossed out red flag" /></p>
<p>What&#8217;s displayed depends on the contents of the <code>Cell</code> and the state of the game. It uses four further views to display different types of tile: <code>FlagView</code>, <code>MineCountView</code>, <code>MineView</code>, and <code>TileView</code>.</p>
<p><strong><a href="https://github.com/realm/Realm-Sweeper/blob/main/iOS/RealmSweeper/Views/Tiles/FlagView.swift"><code>FlagView</code></a></strong></p>
<p><img decoding="async" src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Flag_View_fd57e245f3.png" alt="FlagView. 2 Tiles, both containing a flag, one shows the  flag crossed out" /></p>
<p><strong><a href="https://github.com/realm/Realm-Sweeper/blob/main/iOS/RealmSweeper/Views/Tiles/MineCountView.swift"><code>MineCountView</code></a></strong></p>
<p><img decoding="async" src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Mine_Count_View_e8392ff46d.png" alt="MineCountView, 6 gray tiles. One is empty the others containing numbers 1 through 5, each in a different color" /></p>
<p><strong><a href="https://github.com/realm/Realm-Sweeper/blob/main/iOS/RealmSweeper/Views/Tiles/MineView.swift"><code>MineView</code></a></strong></p>
<p><img decoding="async" src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Mine_View_18eaaf517b.png" alt="MineView. Two tiles containing mines, one with a gray background, one with a red background" /></p>
<p><strong><a href="https://github.com/realm/Realm-Sweeper/blob/main/iOS/RealmSweeper/Views/Tiles/TileView.swift"><code>TileView</code></a></strong></p>
<p><img decoding="async" src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Tile_View_1a01815c26.png" alt="TileView. A single gray tile" /></p>
<h2>Conclusion</h2>
<p>Realm-Sweeper gives a real feel for how quickly Realm is able to synchronize data over the internet.</p>
<p>I intentionally avoided optimizing how I updated the game data in Realm. When you see a single click exposing dozens of tiles, each cell change is an update to the <code>Game</code> object that needs to be synced.</p>
<p><img decoding="async" src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/sync_526ade2926.gif" alt="GIF showing changes in one game board appearing in near-realtime in the game board on a different device" /></p>
<p>Note that both instances of the game are running in iPhone simulators on an overworked Macbook in England. The Realm backend app is running in the US—that&#8217;s a 12,000 km/7,500 mile round trip for each sync.</p>
<p>I took this approach as I wanted to demonstrate the performance of Realm synchronization. If an app like this became super-popular with millions of users, then it would put a lot of extra strain on the backend Realm app.</p>
<p>An obvious optimization would be to condense all of the tile changes from a single tap into a single write to the Realm object. If you&#8217;re interested in trying that out, just fork the <a href="https://github.com/realm/Realm-Sweeper">repo</a> and make the changes. If you do implement the optimization, then please create a pull request. (I&#8217;d probably add it as an option within the settings so that the &#8220;slow&#8221; mode is still an option.)</p>
<p>Got questions? Ask them in our <a href="https://www.mongodb.com/community/forums/c/realm/realm-sync/111">Community forum</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mongodb/building-a-collaborative-ios-minesweeper-game-with-realm/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
