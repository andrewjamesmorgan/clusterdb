<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>High Avail &#8211; Andrew Morgan on Databases</title>
	<atom:link href="/tag/high-avail/feed" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Database technologies - especially around scalability and High Availability</description>
	<lastBuildDate>Sat, 21 Sep 2013 16:33:57 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>MySQL 5.7.2 DMR and Labs &#8211; new replication features</title>
		<link>/mysql-replication/mysql-5-7-2-dmr-and-labs-new-replication-features</link>
					<comments>/mysql-replication/mysql-5-7-2-dmr-and-labs-new-replication-features#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Sat, 21 Sep 2013 16:33:57 +0000</pubDate>
				<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[High Avail]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL 5.7]]></category>
		<guid isPermaLink="false">/?p=2953</guid>

					<description><![CDATA[With today&#8217;s announcement of the second MySQL 5.7 Development Milestone Release and a new labs release it&#8217;s a very exciting time for MySQL Replication. MySQL 5.6 contained a lot of new content to make replication faster, easier to use and more reliable (Global Transaction Identifiers, Multi-Threaded Slaves, Binary Log Group Commit, Optimized Row Based Replication,]]></description>
										<content:encoded><![CDATA[<p>With today&#8217;s <a href="http://www.oracle.com/us/corporate/press/2020378">announcement of the second MySQL 5.7 Development Milestone Release</a> and a <a href="http://labs.mysql.com/" title="Download Multi-Source replication from MySQL Labs">new labs release</a> it&#8217;s a very exciting time for MySQL Replication. <a href="/mysql-replication/mysql-5-6-ga-replication-enhancements/">MySQL 5.6</a> contained a lot of new content to make replication faster, easier to use and more reliable (Global Transaction Identifiers, Multi-Threaded Slaves, Binary Log Group Commit, Optimized Row Based Replication, Crash Safe Replication, Replication Event Checksums, Time Delayed Replication &amp; Informational Logs) and now we want to improve things even further.</p>
<p>The new DMR has something for everyone. </p>
<p>With the improvements to Semi-Synchronous Replication, the application developer can be confident that when a transaction has been commited, the changes have been safely copied to one or more slaves and so whatever happens, that change will not be lost. Further, we now prevent other application threads seeing those changes until they&#8217;ve been received by the slave and so the application cannot start acting on the new data until it&#8217;s known to be safe. This is an important improvement in consistency which moves more of the onus from the application developer onto the database.</p>
<p>DBAs want replication to be fast &#8211; in particular for the slave(s) not to fall behind the master. <a href="/mysql-replication/mysql-5-6-ga-replication-enhancements/">MySQL 5.6</a> made some massive improvements in this area &#8211; both on the master and the slave. A number of users though were unable to exploit the Multi-Threaded Slave (MTS) feature as relied on the use of multiple schemas (databases) to get changes applied in parallel. In the new MySQL 5.7 DMR we&#8217;ve included a new option for MTS where changes can be applied in parallel &#8211; <strong>even within the same schema</strong>. A second performance feature improves throughput on the master &#8211; where the dump thread no longer needs to lock the binary log &#8211; refer to this engineering Blog on <a href="http://my-replication-life.blogspot.com/2013/09/dump-thread-enhancement.html" title="Dump Thread Enhancement on MySQL 5.7.2 - engineering Blog">Dump Thread Enhancement in MySQL 5.7.2</a> for more details.</p>
<p>DBAs also want to monitor the status of replication and for years have relied on the <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">SHOW SLAVE STATUS</span> command. As replication has evolved, <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">SHOW SLAVE STATUS</span> has become less suitable &#8211; we needed a solution that could properly model the more sophisticated replication architectures (including GTIDs and MTS) now possible. The approach we&#8217;ve taken is to provide this information through the <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">performance_schema</span>. </p>
<p>Note that the earlier MySQL 5.7 DMR added non-blocking <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">SHOW SLAVE STATUS</span>, idempotent and <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">&#8211;rewrite-db</span> options for <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">mysqlbinlog</span> &#8211; these are still available in the new DMR.</p>
<p>The new features are described in a little more detail in the following sections (together with links to more technical content from the MySQL Engineeing team).</p>
<h2 id="loss-less-semi-synchronous-replication">Loss-less Semi-Synchronous Replication</h2>
<div id="attachment_2957" style="width: 234px" class="wp-caption alignright"><a href="/wp-content/uploads/2013/09/Intra-Schema-Semi-sync-replication.png"><img fetchpriority="high" decoding="async" aria-describedby="caption-attachment-2957" class="size-medium wp-image-2957" alt="Intra-Schema Semi-Synchronous Replication" src="/wp-content/uploads/2013/09/Intra-Schema-Semi-sync-replication-224x300.png" width="224" height="300" /></a><p id="caption-attachment-2957" class="wp-caption-text">Intra-Schema Semi-Synchronous Replication</p></div>
<p>When using semi-synchronous replication in previous releases, the processing of the transaction on the master would wait for the slave&#8217;s acknowledgement <em>after</em> the change had been written to the storage engine but before the commit was acknowledged to the client. This satisfied the requirement that the application could be confident that if a transaction has been commited (and an acknowledgement received for the commit) then the update would not be lost. It did however leave a window where a user on another connection could read the new data from the master (because it has been written to the storage engine and the locks have been released) before the change had been received by the slave and safely stored in its relay log &#8211; that user could then start acting on that data but if the master failed at that point then that original update could still be lost and so the user would be acting on what is now inaccurate data.</p>
<p>This feature removes the above race condition by making the master wait for the update to be received by the slave <em>before</em> writing it to the storage engine and releasing the locks.</p>
<p>The functionality is enabled by default and shouldn&#8217;t have any negative impacts (for example on peformance) but it you&#8217;d like to disable it then you can do so using <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">rpl_semi_sync_master_wait_point = AFTER_SYNC</span>.</p>
<p>You can read more details on this in this <a href="http://my-replication-life.blogspot.com/2013/09/loss-less-semi-synchronous-replication.html" title="Loss-less Semi-Synchronous Replication on MySQL 5.7.2 blog">Loss-less Semi-Synchronous Replication on MySQL 5.7.2 blog</a> from the MySQL engineering team.</p>
<h2 id="intra-schema-multi-threaded-slaves">Intra-Schema Multi-Threaded Slaves</h2>
<p>DBAs want replication to be fast &#8211; in particular for the slave(s) not to fall behind the master. If there is a short but heavy burst of writes on the master then the slave falls behind (and there is a risk of lost data if the master fails during this period) but if the write-rate is sustained then the slave would fall further and further behind indefinitely. The ongoing challenge has been that the master gets faster and faster as more cores and clients are added but applying these changes asynchronously on the slave is more complex as you need to maintain some form of ordering in order to always have a consistent data set. </p>
<p>The earliest solution to maintaining ordering/consistency was for the slave to apply all of the changes serially, in a single thread &#8211; this ensured that changes were applied in the same order as on the master and so guaranteed the slave always contained a consistent view. Unfortunately this meant that the slave applier thread could only exploit a single core which is very wasteful in modern systems.</p>
<p><a href="/mysql-replication/mysql-5-6-ga-replication-enhancements/">MySQL 5.6</a> made some massive improvements for many use cases by allowing the slave to apply updates in parallel using multiple threads. The assumption made was that data was held in multiple schemas (databases) and that there were no dependencies between the data in those different schemas. In this way all of the updates for a schema would be applied in order by a single thread (ensuring consistency) but updates to other schemas could be handled by additional threads. This allowed the slave to work many times faster but was limited to those use cases that met the assumptions.</p>
<p>In the second MySQL 5.7 DMR we introduce a new option that enables the slave to safely apply updates in parallel &#8211; even when all of the data is held within a single schema and no assumptions can be made about the independence between any rows from any tables. To avoid conflicts/divergence from the master, the slave must ensure that any transactions that are applied in parallel don&#8217;t read or write any overlapping rows. The good news is that this grouping on non-overlapping transactions is already being figured out on the master as part of the binary log group commit functionality (introduced in <a href="/mysql-replication/mysql-5-6-ga-replication-enhancements/">MySQL 5.6</a>) as row level locking means that overlapping transactions cannot be part of the same group commit. </p>
<p>MySQL 5.7 adds a logical clock/counter to the master which is used to tag transactions that are part of the same group commit&#8217;s prepare phase. The slave can then use that information &#8211; knowing that it is safe to apply all of the transactions with the same logical clock value in any order (and so can use multiple threads). </p>
<p>Activating the functionality is very straight-forward and the key step is to set <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">slave-parallel-type = LOGICAL_CLOCK</span> but see this blog from the MySQL engineering team: <a href="http://binlogtorelaylog.blogspot.com/2013/09/enhancedMTS-configuration.html" title="MySQL 5.7 Enhanced MTS: configuring slave for Intra-database parallelization">using the intra-schema MTS functionality</a> for more detailed instructions. Note that there is another blog in the series &#8211; that <a href="http://binlogtorelaylog.blogspot.com/2013/09/enhancedMTS-deepdive.html" title="MySQL 5.7: MySQL 5.7: Enhanced Multi-threaded slaves">blog provides a detailed view of how the intra-schema MTS is implemented</a>.</p>
<h2 id="replication-performance-schema">Replication Performance Schema</h2>
<p>With the ever increasing sophistication of MySQL Replication, presenting all of the information in <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">SHOW SLAVE STATUS</span> has become unwieldy with data for multiple slave applier threads, GTID sets etc. What would be much more convenient is if this information were presented in tables so that the user could get exactly the information they needed using SQL queries (plus of course we can lay out the data in an understandable (relational) way and can access the information from stored procedures). MySQL 5.7.2 does just this by adding MySQL Replication tables to the <a href="http://dev.mysql.com/doc/refman/5.7/en/performance-schema-replication-tables.html" title="MySQL performance_schema documentation">MySQL performance_schema</a>.</p>
<p>This feature introduces 6 new <a href="http://dev.mysql.com/doc/refman/5.7/en/performance-schema-replication-tables.html" title="MySQL performance_schema documentation">performance_schema</a> tables: <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">replication_connection_configuration, replication_connection_status, replication_execute_configuration, replication_execute_status, replication_execute_status_by_coordinator, replication_execute_status_by_worker</span>.</p>
<p>Shivji from the MySQL engineering team has written a great <a href="http://shivjijha.blogspot.com/2013/09/Introducing-the-performance-schema-tables-to-monitor-MySQL-replication.html" title="Introducing the performance schema tables to monitor MySQL replication">blog post on what&#8217;s in the new performance_schema tables and how to interpret the results</a>.</p>
<h2 id="multi-source-replication-labs">Multi-Source Replication &#8211; <em>LABS</em></h2>
<div id="attachment_2956" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2013/09/Multi-Source-Replication.png"><img decoding="async" aria-describedby="caption-attachment-2956" src="/wp-content/uploads/2013/09/Multi-Source-Replication-300x261.png" alt="Multi-Source Replication" width="300" height="261" class="size-medium wp-image-2956" /></a><p id="caption-attachment-2956" class="wp-caption-text">Multi-Source Replication</p></div>
<p>MySQL replication is very flexible in the way that networks of masters and slaves that can be built up; a master can replicate to multiple slaves, a master can itself be a slave of another master, you can create a replication ring&#8230;. The one caveat to this has always been that a slave server can only have a single master (MySQL Cluster is an exception to this rule).</p>
<p>Why might you want to do this? There are a few use cases around consolidating data from multiple MySQL Servers into one:<br />
  &#8211; Where each of the masters is for a different shard (where the application is responsible for the sharding) and you want to be able to run reports over all of that data to produce a consolidated view<br />
  &#8211; You want to avoid the expense of dedicating a slave server to each master server<br />
  &#8211; A remote location may require less throughput and so a single server can service all of the traffic for all of the data &#8211; the &#8216;super-slave&#8217; gives it a low-overhead, local database to access all of the data<br />
  &#8211; The &#8216;super-slave&#8217; is used as a point where you can perform backups for all of the data</p>
<p>It&#8217;s possible to have a slave time-slice between multiple masters with a bit of scripting but that isn&#8217;t an ideal solution. You can also add an additional repliation layer (such as writing your own code to use the binary log API) but it would be much simpler if it were built into MySQL itself.</p>
<p>In this <a href="http://labs.mysql.com/" title="Download multi-source replication from MySQL Labs">labs</a> (i.e. for test only, not to be deployed!) release we allow a slave to simultaneously receive and process replication events from multiple masters &#8211; exactly what our users have been asking for.</p>
<p>What&#8217;s more, we&#8217;ve also ensured that this new functionality is compatible with the other enhancements that have been made to the MySQL Replication architecture &#8211; this includes loss-less semi-synchronus replication; and intra-schema multi-threaded slaves (as well as the existing per-database MTS). This means that you don&#8217;t have to choose between all of these tempting features &#8211; the keys to the candy store are yours! </p>
<p>It&#8217;s likely that not all of the masters will be the same, have the same maintenance schedules etc. and so it makes sense to be able to manage each of the relationships independently. In this <a href="http://labs.mysql.com/" title="Download multi-source replication from MySQL Labs">labs</a> release you can manage each master independently, including the relevant server variables <em>but</em> the same replication filters are currently applied to the replication events from all of the masters &#8211; we recognise that this isn&#8217;t ideal but this is cuurently an early access release and it&#8217;s something we intend to address in future versions.</p>
<p>At the moment there&#8217;s no limit to the number of masters that can replicate to a specific slave &#8211; in the final version we&#8217;re likely to apply a configurable limit.</p>
<p>Because this further complicates the information that would need to be included in <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">SHOW SLAVE STATUS</span>, most of the detailed information is instead presented in the Performance Schema.</p>
<p>It should be pointed out that there is no conflict detection or resolution built into this feature &#8211; it is the responsibility of the application to make sure that the masters are working on distinct data sets (or that they&#8217;re comfortable with the results of any conflicts).</p>
<p>For more technical details, refer to this <a href="http://on-mysql-replication.blogspot.com/2013/09/feature-preview-mysql-multi-source-replication.html" title="Multi-Source Replication blog post">engineering blog post on multi-source replication</a>.</p>
<h2 id="summary">Summary</h2>
<p>There&#8217;s a lot of exciting new content in the MySQL 5.7.2 DMR (<a href="http://dev.mysql.com/downloads/mysql/#downloads" title="Download MySQL 5.7.2 Development Milestone Release">download here</a>) and the Mulit-Source Replication labs release (<a href="http://labs.mysql.com/" title="Download multi-source replication from MySQL Labs">download here</a>). The reason these features has been released is that we value early feedback from our community and customers &#8211; please try them out and let us know what we&#8217;re getting right and what needs to be enhanced!</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-replication/mysql-5-7-2-dmr-and-labs-new-replication-features/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
