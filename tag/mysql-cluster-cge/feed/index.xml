<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>MySQL Cluster CGE &#8211; Andrew Morgan on Databases</title>
	<atom:link href="/tag/mysql-cluster-cge/feed" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Database technologies - especially around scalability and High Availability</description>
	<lastBuildDate>Mon, 20 Apr 2015 12:13:58 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>MySQL Cluster 7.4 New Features Webinar Replay</title>
		<link>/mysql-cluster/mysql-cluster-7-4-new-features-webinar-replay</link>
					<comments>/mysql-cluster/mysql-cluster-7-4-new-features-webinar-replay#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Thu, 16 Apr 2015 15:45:40 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[High Availability]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster 7.4]]></category>
		<category><![CDATA[MySQL Cluster CGE]]></category>
		<guid isPermaLink="false">/?p=4069</guid>

					<description><![CDATA[I recently hosted a webinar introducing MySQL Cluster and then looking into what&#8217;s new in the latest version (MySQL Cluster 7.4) in some more detail. The replay of the MySQL Cluster 7.4 webinar is now available here. Alternatively if just want to skim through the charts then scroll down. Abstract MySQL Cluster powers the subscriber]]></description>
										<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2015/02/MySQL-Cluster-7.4-GA-banner.jpg"><img fetchpriority="high" decoding="async" src="/wp-content/uploads/2015/02/MySQL-Cluster-7.4-GA-banner.jpg" alt="MySQL Cluster 7.4 GA" width="960" height="330" class="aligncenter size-full wp-image-4021" srcset="/wp-content/uploads/2015/02/MySQL-Cluster-7.4-GA-banner.jpg 960w, /wp-content/uploads/2015/02/MySQL-Cluster-7.4-GA-banner-300x103.jpg 300w, /wp-content/uploads/2015/02/MySQL-Cluster-7.4-GA-banner-900x309.jpg 900w" sizes="(max-width: 960px) 100vw, 960px" /></a>I recently hosted a webinar introducing MySQL Cluster and then looking into what&#8217;s new in the latest version (MySQL Cluster 7.4) in some more detail. The <a href="http://www.mysql.com/news-and-events/web-seminars/whats-new-in-mysql-cluster-7-4/" title="replay of the MySQL Cluster 7.4 webinar " target="_blank">replay of the MySQL Cluster 7.4 webinar is now available here</a>. Alternatively if just want to skim through the charts then scroll down.</p>
<h3>Abstract</h3>
<p>MySQL Cluster powers the subscriber databases of major communication services providers as well as next generation web, cloud, social and mobile applications. It is designed to deliver:</p>
<ul>
<li>Real-time, in-memory performance for both OLTP and analytics workloads</li>
<li>Linear scale-out for both reads and writes</li>
<li>99.999% High Availability</li>
<li>Transparent, cross-shard transactions and joins</li>
<li>Update-Anywhere Geographic replication</li>
<li>SQL or native NoSQL APIs</li>
<li>All that while still providing full ACID transactions.</li>
</ul>
<p>Understand some of the highlights of MySQL Cluster 7.4:</p>
<ul>
<li>200 Million queries per minute</li>
<li>Active-Active geographic replication with conflict detection and resolution</li>
<li>5x faster on-line maintenance activities</li>
<li>Enhanced reporting for memory and database operations</li>
</ul>
<h3>Charts</h3>
<p><iframe src="//www.slideshare.net/slideshow/embed_code/47076434" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></p>
<h2>Questions and Answers</h2>
<ul>
<li><strong>Can all data be stored on disk rather than in memory?</strong> Any column that isn&#8217;t part of an index can be stored on disk if you want it to be. There is then an in-memory cache for the disk-based data.</li>
<li><strong>Is in-memory data safe from the whole system shutting down (e.g. power loss for the whole data center)?</strong> The in-memory data is (asynchronously) checkpointed to disk (so that there is persistence but latency isn&#8217;t impacted).</li>
<li><strong>I need to store more than 14K non BLOB/TEXT data in a single row &#8211; has this been addressed?</strong> As you say the options are to use TEXT/BLOB columns (or of course to split the data over multiple rows).</li>
<li><strong>Can you comment on improvements of virtualized deploymets regarding the 7.4 version?</strong> Only to say that more and more people are deploying on VMs and we&#8217;re not seeing issues caused &#8211; if we do then they&#8217;ll be fixed</li>
<li><strong>Can I upgrage from the previous version (7.3) to MySQL Cluster 7.4 or do I have to reinstall the product of the new version (7.4)?</strong> You can perform a rolling upgarade from MySQL Cluster 7.3 to MySQL Cluster 7.4 &#8211; the database stays uo throughout the process and you don&#8217;t lose any data or have to stop writing changes.</li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-cluster/mysql-cluster-7-4-new-features-webinar-replay/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL Cluster Manager 1.3.5 Released</title>
		<link>/mysql-cluster/mysql-cluster-manager-1-3-5-released</link>
					<comments>/mysql-cluster/mysql-cluster-manager-1-3-5-released#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Thu, 16 Apr 2015 15:13:47 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster CGE]]></category>
		<category><![CDATA[MySQL Cluster Manager]]></category>
		<category><![CDATA[secondary]]></category>
		<guid isPermaLink="false">/?p=4067</guid>

					<description><![CDATA[MySQL Cluster Manager 1.3.5 is now available to download from My Oracle Support. Details are available in the the MCM 1.3.5 Release Notes. Note that this version of MCM now supports MySQL Cluster 7.4 (as well as earlier versions or MySQL Cluster). Documentation is available here.]]></description>
										<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2013/06/MySQL_Cluster_Manager2.png"><img decoding="async" src="/wp-content/uploads/2013/06/MySQL_Cluster_Manager2-300x106.png" alt="MySQL Cluster Manager logo" width="300" height="106" class="alignright size-medium wp-image-2846" /></a>MySQL Cluster Manager 1.3.5 is now available to <a href="https://support.oracle.com/" title="Download MySQL Cluster Manager" target="_blank">download from My Oracle Support</a>.</p>
<p>Details are available in the the <a title="MySQL Cluster Manager - change history" href="http://dev.mysql.com/doc/relnotes/mysql-cluster-manager/1.3/en/mcm-news-1-3-5.html" target="_blank">MCM 1.3.5 Release Notes</a>. Note that this version of MCM now supports MySQL Cluster 7.4 (as well as earlier versions or MySQL Cluster).</p>
<p><a title="MySQL Cluster Manager documentation" href="http://dev.mysql.com/doc/mysql-cluster-manager/1.3/en/" target="_blank">Documentation is available here</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-cluster/mysql-cluster-manager-1-3-5-released/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL Cluster Asynchronous Replication &#8211; conflict detection &#038; resolution</title>
		<link>/mysql-cluster/mysql-cluster-asynchronous-replication-conflict-detection-resolution1</link>
					<comments>/mysql-cluster/mysql-cluster-asynchronous-replication-conflict-detection-resolution1#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Wed, 11 Sep 2013 08:29:40 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[High Availability]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster CGE]]></category>
		<category><![CDATA[Replication]]></category>
		<guid isPermaLink="false">/?p=387</guid>

					<description><![CDATA[I was rooting through past blog entries and I stumbled accross a draft post on setting up multi-master (update anywhere) asynchronous replication for MySQL Cluster. The post never quite got finished and published and while the material is now 4 years old it may still be helpfull to some and so I&#8217;m posting it now.]]></description>
										<content:encoded><![CDATA[<p>I was rooting through past blog entries and I stumbled accross a draft post on setting up multi-master (update anywhere) asynchronous replication for MySQL Cluster. The post never quite got finished and published and while the material is now 4 years old it may still be helpfull to some and so I&#8217;m posting it now. Note that a lot has happened with MySQL Cluster in the last 4 years and in this area, the most notable change has been the <a href="" target="_blank" title="Enhanced conflict resolution with MySQL Cluster active-active replication" alt="Enhanced conflict resolution with MySQL Cluster active-active replication">Enhanced conflict resolution with MySQL Cluster active-active replication</a> feature introduced in MySQL Cluster 7.2 and if you&#8217;re only dealing with a pair of Clusters, that&#8217;s your best option as it removed the need for you to maintain the timestamp columns and backs out entire transactions rather than just the conflicting rows. So when would you use this &#8220;legacy&#8221; method? The main use case is when you want conflict detection/resolution among a ring of more than 2 Clusters. Note also that MySQL 5.6 (and so MySQL Cluster 7.3) added microsecond precision to timestamps and so you may not need the custom plugin that this post referred to.</p>
<p>Anyway, here&#8217;s the original post&#8230;</p>
<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br />
MySQL Cluster asynchronous replication allows you to run in a multi-master mode with the application making changes to both sites (or more than 2 sites using a replication ring). As the replication is asynchronous, if the application(s) modified the same row on both sites at &#8216;about the same time&#8217; then there is a potential for a collision. Left to their own devices, each site would store (and provide to the application) different data indefinitely. This article explains how to use MySQL Cluster collision detection and resolution to cope with this.</p>
<div id="attachment_437" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2009/08/Replication_Conflict.jpg"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-437" class="size-medium wp-image-437" title="Multi-master replication leading to inconsistencies" alt="Fig. 1 Multi-master replication leading to inconsistencies" src="/wp-content/uploads/2009/08/Replication_Conflict-300x178.jpg" width="300" height="178" srcset="/wp-content/uploads/2009/08/Replication_Conflict-300x178.jpg 300w, /wp-content/uploads/2009/08/Replication_Conflict.jpg 590w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><p id="caption-attachment-437" class="wp-caption-text">Fig. 1 Multi-master replication leading to inconsistencies</p></div>
<p>Fig. 1 shows the timeline that can result in a conflict. The same or two different applications make a change to the same row in the table but to the 2 different instances of MySQL Cluster. Each cluster synchronously replicates the data amongst its local data node in order to provide local High Availability (everything there is safe!). At some point later (normally a fraction of a second), the changes are replicated to the remote site asynchronously &#8211; this delay opens a window for a conflict where Cluster 2 is updated by the application just before it receives the earlier update from Cluster 1. Cluster 2 will overwrite it&#8217;s row with the value (5) it has received but only after its earlier change (directly from the application) is written to the binary log ready for replication to Cluster 1 which in turn will cause that value (15) to be stored by Cluster 1. Each Cluster instance replicates what it believes to be the correct data to the other site &#8211; overwriting what that site had previously stored. In our example, that leaves one database holding the value 15 for key &#8216;A&#8217; while the other stores 5.</p>
<p>It&#8217;s often the case that the application will tend to go to the same site during a particular time when accessing the same data and so the chances of a conflict are reduced but the application may still want to guard against (even rare) race conditions. If replication slows down (for example due to a backlog of updates to be applied) or stops temporarily (for example due to network failure to the geographically remote site) then the chances of a collision greatly increase.</p>
<p>For information on setting up multi-master asynchronous replication with MySQL Cluster, please take a look at <a href="/mysql-cluster/setting-up-mysql-asynchronous-replication-for-high-availability/" target="_blank">Setting up MySQL Asynchronous Replication for High Availability</a>.</p>
<h3>Conflict Detection &amp; Resolution using MySQL Cluster</h3>
<p>MySQL Cluster provides two different schemes to handle these collisions/conflicts. The first scheme (referred to as &#8220;greatest timestamp wins&#8221;) detects that a conflict occurs and automatically resolves it (the change most recently received from the application is stored on both Clusters). The second scheme (referred to as &#8220;same value wins&#8221;) detects that a conflict has occurred but <strong>does not fix it</strong> &#8211; instead the conflict is recorded in such a way that the application (or user) can figure out how best to resolve it based on a full understanding of the schema, what the data means and how it&#8217;s used. It is up to the developer which approach they use (if any) &#8211; it is selected on a per-table basis.</p>
<h3>Common prerequisite steps</h3>
<p>These steps should be followed regardless of whether you want to use conflict resolution or conflict detection (where the application decides how to resolve it).</p>
<ol>
<li>Set up multi-master replication as described in <a href="/mysql-cluster/setting-up-mysql-asynchronous-replication-for-high-availability/" target="_blank">Setting up MySQL Asynchronous Replication for High Availability</a></li>
<li>Create the function &#8220;inttime&#8221; for use in the stored procedures as described in <a href="/mysql/creating-a-mysql-plugin-to-produce-an-interger-timestamp/" target="_blank">Creating a MySQL plugin to produce an integer timestamp</a> <strong>Note that you will need to install inttime.so on each host</strong></li>
</ol>
<h3>Setting up Automatic Conflict Resolution (Greatest timestamp wins)</h3>
<p>This is the simplest way to handle conflicts with MySQL Cluster when implementing multi-master asynchronous replication (actually, the simplest is to do nothing and accept that if your application(s) update the same row at about the same time at both Clusters then those Clusters may be left with different data until the application(s) next update that row).</p>
<p>Remember that this mechanism works by checking that the timestamp field of the update received by the slave is later than the one already stored. In the example that follows, the &#8216;ts&#8217; column is used for the timestamp.</p>
<p>Create the database on either cluster (replication will make sure that it appears in both Clusters):</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql&gt; create database clusterdb;
</pre>
<p>Before creating the application tables, set  up the ndb_replication system table (again, in either Cluster):</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql&gt; CREATE TABLE mysql.ndb_replication ( db VARBINARY(63), table_name VARBINARY(63), server_id INT UNSIGNED, binlog_type INT UNSIGNED, conflict_fn VARBINARY(128), PRIMARY KEY USING HASH (db, table_name, server_id) ) ENGINE=NDB PARTITION BY KEY(db,table_name);

mysql&gt; insert into mysql.ndb_replication values ('clusterdb', 'tab1', 7, NULL, 'NDB$MAX(ts)');
</pre>
<p>After that, you can create the application table:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
cluster1 mysql&gt; use clusterdb;

cluster1 mysql&gt; create table tab1 (NAME varchar(30) not null primary key,VALUE int, ts BIGINT UNSIGNED default NULL) engine=ndb;
</pre>
<p>To test that the basic replication is working for this table, insert a row into cluster1, check it&#8217;s there in cluster2, add a second row to cluster2 and make sure it&#8217;s visible in cluster1:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
cluster1 mysql&gt; insert into tab1 values ('Frederick', 1, 0);

cluster2 mysql&gt; use clusterdb;
cluster2 mysql&gt; select * from tab1;
+-----------+-------+------+
| NAME      | VALUE | ts   |
+-----------+-------+------+
| Frederick |     1 |    0 |
+-----------+-------+------+
1 row in set (0.00 sec)
cluster2 mysql&gt; insert into tab1 values ('William',20,0);

cluster1 mysql&gt; select * from tab1;
+-----------+-------+------+
| NAME      | VALUE | ts   |
+-----------+-------+------+
| Frederick |     1 |    0 |
| William   |    20 |    0 |
+-----------+-------+------+
2 rows in set (0.00 sec)
</pre>
<p>For both rows, the timestamp was set to 0 to represent &#8216;the start of time&#8217;, from this point on, whenever making a change to those rows, the timestamp should be increased. Later on on in this article, I&#8217;ll show how to automate that process.</p>
<p>We&#8217;re now ready to test that the conflict resolution is working; to do so replication is stopped (in both directions) to increase the window for a conflict and the same tuple updated on each Cluster. Replication is then restarted and then I&#8217;ll confirm that the last update wins on both clusters:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
cluster1 mysql&gt; slave stop;

cluster2 mysql&gt; slave stop;

cluster1 mysql&gt; update tab1 set VALUE=10,ts=1 where NAME='Frederick';

cluster2 mysql&gt; update tab1 set VALUE=11,ts=2 where NAME='Frederick';

cluster1 mysql&gt; slave start;

cluster2 mysql&gt; slave start;

cluster1 mysql&gt; select * from tab1;
+-----------+-------+------+
| NAME      | VALUE | ts   |
+-----------+-------+------+
| William   |    20 |    0 |
| Frederick |    11 |    2 |
+-----------+-------+------+
2 rows in set (0.00 sec)

clusrer2 mysql&gt; select * from tab3;
+-----------+-------+------+
| NAME      | VALUE | ts   |
+-----------+-------+------+
| William   |    20 |    0 |
| Frederick |    11 |    2 |
+-----------+-------+------+
2 rows in set (0.00 sec)
</pre>
<p>This confirms that the later update (timestamp of 2) is stored in both Clusters &#8211; conflict resolved!</p>
<h3>Automating the timestamp column</h3>
<p>Manually setting the timestamp value is convenient when testing that the mechanism is working as expected could be a nuisance in a production environment (for example, you would need to get the clocks of all application nodes exactly in sync wherever in the world they&#8217;re located). This section describes how that can be automated using stored procedures (note that stored procedures don&#8217;t work when using the NDB API to make changes but in that situation it should be straight-forward to provide wrapper methods that manage the timestamp field). Note that the timestamp must be an integer field (and needs a high level of precision) and so you can&#8217;t use the regular MySQL TIMESTAMP type.</p>
<p>This mechanism assumes that you&#8217;ve built &#8220;inttime.so&#8221; and deployed it to the hosts running the mysqld processes for each cluster (refer to the prerequisite section).</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
cluster1 mysql&gt; create trigger tab1_insert before insert on tab3 for each row set NEW.ts=inttime;
cluster1 mysql&gt; create trigger tab1_update before update on tab3 for each row set NEW.ts=inttime;
cluster1 mysql&gt; insert into tab1 (NAME,VALUE) values ('James',10),('David',20);
cluster1 mysql&gt; select * from tab1;
+-----------+-------+------------------+
| NAME      | VALUE | ts               |
+-----------+-------+------------------+
| William   |    20 |                0 |
| David     |    20 | 1250090500370307 |
| James     |    10 | 1250090500370024 |
| Frederick |    11 |                2 |
+-----------+-------+------------------+
4 rows in set (0.00 sec)

cluster2 mysql&gt; update tab1 set VALUE=55 where NAME='William';
cluster2 mysql&gt; select * from tab1;
+-----------+-------+------------------+
| NAME      | VALUE | ts               |
+-----------+-------+------------------+
| James     |    10 | 1250090500370024 |
| Frederick |    11 |                2 |
| William   |    55 | 1250090607251846 |
| David     |    20 | 1250090500370307 |
+-----------+-------+------------------+
4 rows in set (0.00 sec)
</pre>
<h3>Setting up Conflict Detection (Same timestamp wins)</h3>
<p>With this method, conflicts are detected and recorded but not automatically resolved. The intent is to allow the application to decide how to handle the conflict based on an understanding of what the data means.</p>
<p>Create the database on either cluster (replication will make sure that it appears in both Clusters):</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql&gt; create database clusterdb;
</pre>
<p>Before creating the application tables, set  up the ndb_replication system table (again, in either Cluster):</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql&gt; CREATE TABLE mysql.ndb_replication ( db VARBINARY(63), table_name VARBINARY(63), server_id INT UNSIGNED, binlog_type INT UNSIGNED, conflict_fn VARBINARY(128), PRIMARY KEY USING HASH (db, table_name, server_id) ) ENGINE=NDB PARTITION BY KEY(db,table_name);

mysql&gt; insert into mysql.ndb_replication values ('clusterdb', 'SubStatus', 7, NULL, 'NDB$OLD(ts)');
</pre>
<p>After that, you can create the application table and its associated exception table:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
cluster1 mysql&gt; use clusterdb;
cluster1 mysql&gt; create table SubStatus$EX (server_id INT UNSIGNED,master_server_id INT UNSIGNED,master_epoch BIGINT UNSIGNED,count INT UNSIGNED,sub_id int not null,notes VARCHAR(30) DEFAULT 'To be resolved', PRIMARY KEY (server_id, master_server_id, master_epoch, count)) engine=ndb;
cluster1 mysql&gt; create table SubStatus (sub_id int not null primary key, ActivationStatus varchar(20), ts BIGINT default 0) engine=ndb;
</pre>
<p>To test that the exception table gets filled in, add some rows to the table and then cause an update conflict (in a similar way to the conflict resolution example but after setting up the timestamp automation):</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
cluster1 mysql&gt; create trigger SubStatus_insert before insert on SubStatus for each row set NEW.ts=inttime();
cluster1 mysql&gt; insert into SubStatus (sub_id, ActivationStatus) values (1,'Active'),(2,'Deactivated');
cluster1 mysql&gt; select * from SubStatus;
+--------+------------------+------------------+
| sub_id | ActivationStatus | ts               |
+--------+------------------+------------------+
|      1 | Active           | 1250094170589948 |
|      2 | Deactivated      | 1250094170590250 |
+--------+------------------+------------------+
2 rows in set (0.00 sec)

cluster2 myql&gt; use clusterdb;
cluster2 mysql&gt; select * from SubStatus;
+--------+------------------+------------------+
| sub_id | ActivationStatus | ts               |
+--------+------------------+------------------+
|      1 | Active           | 1250094170589948 |
|      2 | Deactivated      | 1250094170590250 |
+--------+------------------+------------------+
2 rows in set (0.00 sec)

cluster1 mysql&gt; slave stop;

cluster2 mysql&gt; slave stop;

...
</pre>
<p>(at this point, just go on to test as with the conflict resoultion example but in this case expect to see that the confict is <strong>not</strong> resolved but an entry is added into the conflict table).</p>
<p>Of course, you can always add a trigger on the conflict table and use that to spur the application into initiating its own conflict resolution algorithm.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-cluster/mysql-cluster-asynchronous-replication-conflict-detection-resolution1/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL Cluster 7.3.2 is released on E-delivery</title>
		<link>/mysql-cluster/mysql-cluster-7-3-2-is-released</link>
					<comments>/mysql-cluster/mysql-cluster-7-3-2-is-released#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Thu, 18 Jul 2013 15:10:42 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster 7.3]]></category>
		<category><![CDATA[MySQL Cluster CGE]]></category>
		<guid isPermaLink="false">/?p=2882</guid>

					<description><![CDATA[The binary version for MySQL Cluster 7.3.2 has now been made available at http://www.mysql.com/downloads/cluster/ (GPL version) or Oracle&#8217;s Software Delivery Cloud for the commercial version. A description of all of the changes (fixes) that have gone into MySQL Cluster 7.3.2 (compared to 7.3.1) is available from the]]></description>
										<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2013/06/MySQL_Cluster.png"><img loading="lazy" decoding="async" src="/wp-content/uploads/2013/06/MySQL_Cluster-300x125.png" alt="MySQL Cluster 7.3 logo" width="300" height="125" class="alignright size-medium wp-image-2808" /></a> The binary version for MySQL Cluster 7.3.2 has now been made available at <a href="http://www.mysql.com/downloads/cluster/" target="_blank">http://www.mysql.com/downloads/cluster/</a> (GPL version) or <a href="https://edelivery.oracle.com/" title="Oracle Software Delivery Cloud for MySQL Cluster download" target="_blank">Oracle&#8217;s Software Delivery Cloud for the commercial version</a>.</p>
<p>A description of all of the changes (fixes) that have gone into MySQL Cluster 7.3.2 (compared to 7.3.1) is available from the <a title="MySQL Cluster 7.3.2 Release Notes" http://dev.mysql.com/doc/relnotes/mysql-cluster/7.3/en/mysql-cluster-news-5-6-11-ndb-7-3-2.html" target="_blank">7.3.2 Change log</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-cluster/mysql-cluster-7-3-2-is-released/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL Cluster 7.3 is now Generally Available &#8211; an overview</title>
		<link>/mysql-cluster/mysql-cluster-7-3-is-now-ga</link>
					<comments>/mysql-cluster/mysql-cluster-7-3-is-now-ga#comments</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Tue, 18 Jun 2013 12:08:51 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[MySQL Cluster 7.3]]></category>
		<category><![CDATA[MySQL Cluster CGE]]></category>
		<guid isPermaLink="false">/?p=2807</guid>

					<description><![CDATA[MySQL Cluster 7.3 has now been declared GA! This means that you can deploy it in your live systems and get support from Oracle. This post briefly describes the main new features in the release; for a deeper dive, refer to the What&#8217;s new in MySQL Cluster 7.3 white paper and the more specialised blog]]></description>
										<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2013/06/MySQL_Cluster.png"><img loading="lazy" decoding="async" src="/wp-content/uploads/2013/06/MySQL_Cluster-300x125.png" alt="MySQL Cluster 7.3 logo" width="300" height="125" class="alignright size-medium wp-image-2808" /></a>MySQL Cluster 7.3 has now been declared GA! This means that you can deploy it in your live systems and get support from Oracle. </p>
<p>This post briefly describes the main new features in the release; for a deeper dive, refer to the <a href="http://www.mysql.com/why-mysql/white-papers/mysql-cluster-new-features-whitepaper/" alt="New features in MySQL Cluster 7.3 white paper" target="New features in MySQL Cluster 7.3">What&#8217;s new in MySQL Cluster 7.3 white paper</a> and the more specialised blog posts that you&#8217;ll find links to from this post.</p>
<p>I&#8217;ll also be giving more details in the <a href="http://www.mysql.com/news-and-events/web-seminars/mysql-cluster-technology-update/" alt="MySQL Cluster 7.3 Webinar" target="MySQL Cluster 7.3 Webinar">MySQL Cluster 7.3 Webinar</a> which is scheduled for 09:00 Pacific / Noon Eastern / 17:00 UK / 18:00 CET this Thursday (20th June). This is a great opportunity to get your questions answered in real-time by the experts. As usual, the webinar is free but you should n the <a href="http://www.mysql.com/news-and-events/web-seminars/mysql-cluster-technology-update/" alt="MySQL Cluster 7.3 Webinar" target="MySQL Cluster 7.3 Webinar">register here</a> ahead of time. Even if you can&#8217;t attend it&#8217;s worth registering as you&#8217;ll then be sent a link to the replay.</p>
<h3>MySQL Cluster Auto-Installer</h3>
<p><div id="attachment_2768" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2013/04/cluster4.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-2768" src="/wp-content/uploads/2013/04/cluster4-300x275.png" alt="MySQL Cluster Auto-Installer" width="300" height="275" class="size-medium wp-image-2768" /></a><p id="caption-attachment-2768" class="wp-caption-text">MySQL Cluster Auto-Installer</p></div>The MySQL Cluster Auto-Installer is a browser-based GUI that will provision a well configured, distributed Cluster in minutes, ready for test, development or production environments.</p>
<p>A major priority for this release is to make it much easier and faster to provision a cluster that is well  tuned for your application and environment; we want you to focus on exploiting the benefits of MySQL Cluster in your application rather than on figuring out how to install, configure and start the database. The MySQL Cluster Auto-Installer provides a browser-based GUI which steps you through creating a Cluster tailored to your requirements. For a really good view of how the tool works, a tutorial video and detailed worked example is available from the blog post: <a href="/mysql-cluster/mysql-cluster-7-3-auto-installer/" alt="MySQL Cluster Auto-Installer tutorial and demo" target="MySQL Cluster Auto-Installer tutorial and demo">MySQL Cluster 7.3 MySQL Cluster Auto-Installer</a>.</p>
<h3>Foreign Keys</h3>
<p><div id="attachment_2304" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2012/05/FK_Relationship.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-2304" src="/wp-content/uploads/2012/05/FK_Relationship-300x103.png" alt="Foreign Key constraints between tables" width="300" height="103" class="size-medium wp-image-2304" /></a><p id="caption-attachment-2304" class="wp-caption-text">Tables with Foreign Key constraint</p></div>Foreign Keys (FKs) are a way of implementing relationships/constraints between columns in different tables. For example if we want to make sure that the value of the county column in the towns table has an associated entry in the counties table. In this way, no-one can place a town in a non-existent county and similarly no one can remove a county and leave orphaned towns behind.</p>
<p>We believe that this is going to enable a whole new set of applications exploit the advantages of MySQL Cluster where:</p>
<ul>
<li>Developers want to simplify their application by pushing referential checks down into the database</li>
<li>The application is built upon 3rd party middleware that is dependent on FKs</li>
<li>The application is already so dependent on FKs that it would be too complex to remove them</li>
</ul>
<p>Note that the FK constraints will be applied regardless of how data is subsequently written (i.e. through SQL or any of the available NoSQL APIs that bypass the MySQL Server) – this ensures that the intended data integrity is always maintained.</p>
<p>More details and a worked example of using Foreign Keys with MySQL Cluster can be found in this post: <a href="/mysql-cluster/foreign-keys-in-mysql-cluster/" alt="MySQL Cluster Foreign Keys" target="MySQL Cluster Foreign Keys">Foreign Keys in MySQL Cluster</a>.</p>
<h3>JavaScript Driver for Node.js</h3>
<p><a href="/wp-content/uploads/2013/05/Node_Cluster_logo.png"><img loading="lazy" decoding="async" src="/wp-content/uploads/2013/05/Node_Cluster_logo-300x224.png" alt="MySQL Cluster driver for JavaScript/Node.js" width="300" height="224" class="alignright size-medium wp-image-2791" /></a>Node.js is a platform that allows fast, scalable network applications (typically web applications) to be developed using JavaScript. Node.js is designed for a single thread to serve millions of client connections in real-time – this is achieved by an asynchronous, event-driven architecture – just like MySQL Cluster, making them a great match.</p>
<p>The MySQL Cluster NoSQL Driver for Node.js is implemented as a module for the V8 engine, providing Node.js with a native, asynchronous JavaScript interface that can be used to both query and receive results sets directly from MySQL Cluster, without transformations to SQL. As an added benefit, you can direct the driver to use SQL so that the same API can be used with InnoDB tables.</p>
<p>With the MySQL Cluster JavaScript Driver for Node.js, architects can re-use JavaScript from the client to the server, all the way through to a distributed, fault-tolerant, transactional database supporting real-time, high-scale services.</p>
<p>Developing an application to use this API is very straightforward and an example application with full setup instructions is provided in the post <a href="/mysql/mysql-cluster-with-node-js" alt="Using JavaScript and Node.js with MySQL Cluster – First steps" target="Using JavaScript and Node.js with MySQL Cluster">Using JavaScript and Node.js with MySQL Cluster – First steps</a>. </p>
<h3>Connection Thread scalability</h3>
<p>MySQL Cluster thrives when it is offered as many operations in parallel as possible. To achieve this, parallelism should be configured at each layer. There should be multiple application threads sending work to the MySQL Server (or other API), there should be multiple MySQL Servers and finally multiple connections between the MySQL Server (or other API node) and the data nodes. This is explained in more detail in the <a href="http://www.mysql.com/why-mysql/white-papers/guide-to-optimizing-performance-of-the-mysql-cluster/" alt="MySQL Performance Tuning" target="MySQL Performance Tuning">MySQL Cluster Performance white paper</a>.</p>
<p><div id="attachment_2824" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2013/06/Cluster-7.3-BM.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-2824" src="/wp-content/uploads/2013/06/Cluster-7.3-BM-300x208.png" alt="Increased throughput with Connection Thread Scalability" width="300" height="208" class="size-medium wp-image-2824" /></a><p id="caption-attachment-2824" class="wp-caption-text">Increased throughput with Connection Thread Scalability</p></div>Each of the connections to the data nodes consumes one of the 256 available node-ids and so in some scenarios they could cap the scalability of the Cluster. MySQL Cluster 7.3 greatly increases the throughput of each of these connections meaning that less connections (and therefore node-ids) are needed to tackle the same workload; this in turn means that more API nodes and data nodes can be added to the Cluster to scale the capacity and performance even further. <a href="http://mikaelronstrom.blogspot.co.uk/2013/05/mysql-cluster-73-improvements.html" alt="MySQL Cluster 7.3 connection thread benchmarks" target="MySQL Cluster 7.3 connection benchmarks">Benchmarks</a> have shown up to a 8x increase in throughput per connection. The graph illustrates how less NDB API connection threads in MySQL Cluster 7.3 can deliver increased throughput compared with MySQL Cluster 7.2; the benchmark was based on DBT2 using a single data node; a single MySQL Server and 128 client connections.</p>
<h3>MySQL 5.6 Server</h3>
<p>MySQL Cluster 7.3 also rebases onto MySQL 5.6. What this means is that the MySQL Server that comes with MySQL Cluster 7.3 is based on MySQL 5.6. This in turn means that when you mix and match MySQL Cluster (NDB) and InnoDB tables, you&#8217;ll be getting the benefits of the latest and greatest version of each storage engine.</p>
<h3>Try it out!</h3>
<p>Please go ahead  and <a href="http://dev.mysql.com/downloads/cluster/" alt="download MySQL Cluster 7.3" target="download MySQL Cluster 7.3">download</a> and start experimenting with MySQL Cluster 7.3. We look forward to hearing how you get on!</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-cluster/mysql-cluster-7-3-is-now-ga/feed</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>Foreign Keys in MySQL Cluster</title>
		<link>/mysql-cluster/foreign-keys-in-mysql-cluster</link>
					<comments>/mysql-cluster/foreign-keys-in-mysql-cluster#comments</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Tue, 18 Jun 2013 12:04:03 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[Foreign Keys]]></category>
		<category><![CDATA[MySQL Cluster CGE]]></category>
		<guid isPermaLink="false">/?p=2298</guid>

					<description><![CDATA[The newly announced GA of MySQL Cluster 7.3 (7.3.2) builds upon second DMR (7.3.1 m2) released earlier in the year which added Foreign Keys to MySQL Cluster. Foreign Keys is a feature requested by many, many people and has often been cited as the reason for not being able to replace InnoDB with MySQL Cluster]]></description>
										<content:encoded><![CDATA[<div id="attachment_2304" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2012/05/FK_Relationship.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-2304" class="size-medium wp-image-2304" title="Foreign Key Constraints" src="/wp-content/uploads/2012/05/FK_Relationship-300x103.png" alt="Foreign Key constraints between tables" width="300" height="103" /></a><p id="caption-attachment-2304" class="wp-caption-text">Foreign Key constraints between tables</p></div>
<p>The newly announced GA of MySQL Cluster 7.3 (7.3.2) builds upon second DMR (7.3.1 m2) released earlier in the year which added Foreign Keys to MySQL Cluster. Foreign Keys is a feature requested by many, many people and has often been cited as the reason for not being able to replace InnoDB with MySQL Cluster when they needed the extra availability or scalability. </p>
<p>Note that this post is an up-version of the original &#8211; and was first published with the 7.3 labs release in June 2012.</p>
<h3>What&#8217;s a Foreign Key</h3>
<p>The majority of readers who are already familiar with Foreign Keys can skip to the next section.</p>
<p>Foreign Keys are a way of implementing relationships/constraints between columns in different tables. For example, in the above figure, we want to make sure that the value of the <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">county</span> column in the towns table has an associated entry in the <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">counties</span> table. In this way, no-one can place a town in a non-existent county and similarly no one can remove a county and leave orphaned towns behind.</p>
<p>We refer to the towns table as the <em>child</em> and the counties table as the <em>parent</em>.</p>
<p>There are different categories of constraints that influence how they&#8217;re enforced when a row is updated or deleted from the parent table:</p>
<ul>
<li><strong>Cascade</strong>: If a row is deleted from the parent then any rows in the child table with a matching FK value will also be deleted. Similarly for changes to the value in the parent table.</li>
<li><strong>Restrict</strong>: A row cannot be deleted from the parent table if this would break a FK constraint with the child table. Similarly for changes to the value in the parent table.</li>
<li><strong>No Action</strong>: Very similar to &#8220;Restrict&#8221; except that any events/triggers on the parent table will be executed before the constraint is enforced &#8211; giving the application writer the option to resolve any FK constraint conflicts using a stored procedure.</li>
<li><strong>Set NULL</strong>: If NULL is a permitted value for the FK column in the child table then it will be set to NULL if the associated data in the parent table is updated or deleted.</li>
<li><strong>Set Default</strong>: If there is a default value for the FK column in the child table then it will be used if the associated data in the parent table is updated or deleted. Note that this is not implemented in this version &#8211; the constraint can be added to the schema but any subsequent deletion or update to the column in the parent table will fail.</li>
</ul>
<h3>How to use Foreign Keys with MySQL Cluster</h3>
<p>For anyone familiar with using FKs with InnoDB, a lot of this will be very similar &#8211; that&#8217;s intentional in the design of this Cluster feature. Throughout this section we will use the tables shown in the above figure.</p>
<p>First of all, create the tables and add some data:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">mysql&gt; CREATE DATABASE clusterdb;USE clusterdb;
mysql&gt; CREATE TABLE counties (county VARCHAR(30) NOT NULL PRIMARY KEY, country VARCHAR(30))
  ENGINE=ndb;
mysql&gt; REPLACE INTO counties VALUES ('Berkshire','England'),('Shropshire','England'),
  ('Oxfordshire','England'),('Buckinghamshire','England');
mysql&gt; CREATE TABLE towns (town VARCHAR(30) NOT NULL PRIMARY KEY, county VARCHAR(30),
  INDEX county_county_index (county), <strong>CONSTRAINT county_town FOREIGN KEY (county) 
  REFERENCES counties(county) ON DELETE RESTRICT ON UPDATE RESTRICT</strong>) ENGINE=ndb;
mysql&gt; REPLACE INTO towns VALUES ('Maidenhead','Berkshire'),('Reading','Berkshire'),
  ('Shrewsbury','Shropshire'),('Oxford','Oxfordshire');
mysql&gt; SELECT * FROM counties;SELECT * FROM towns;
+-----------------+---------+
| county          | country |
+-----------------+---------+
| Shropshire      | England |
| Buckinghamshire | England |
| Berkshire       | England |
| Oxfordshire     | England |
+-----------------+---------+
4 rows in set (0.00 sec)

+------------+-------------+
| town       | county      |
+------------+-------------+
| Reading    | Berkshire   |
| Shrewsbury | Shropshire  |
| Maidenhead | Berkshire   |
| Oxford     | Oxfordshire |
+------------+-------------+
4 rows in set (0.00 sec)</pre>
<p>Note that the FK is actually defined as part of creating the towns table with <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">CONSTRAINT county_town FOREIGN KEY (county) REFERENCES counties(county) ON DELETE RESTRICT ON UPDATE RESTRICT</span>. <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">county_town</span> is the label assigned to the constraint (if you don&#8217;t specify one then one will be automatically created &#8211; you can see it by executing <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">SHOW CREATE TABLE towns</span>). The constraint is set up from the <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">county</span> column in the <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">towns</span> (child) table to the <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">county</span> column in the <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">counties</span> (parent) table.</p>
<p>As a first check, we can confirm that values that are not part of the constraint can be modified in the parent table &#8211; in this case we&#8217;ll move the England/Wales border:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">mysql&gt; UPDATE counties SET country='WALES' WHERE county='Shropshire';
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0</pre>
<p>Next, to illustrate the kind of user error that can be prevented, we attempt to add a town in a county that has not yet been defined &#8211; we want this to fail as it would break the constraint we created:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">mysql&gt; INSERT towns VALUES ('Cambridge','Cambridgeshire');
ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails
  (Unknown error code)
mysql&gt; SHOW WARNINGS;
+---------+------+---------------------------------------------------------------------------------------+
| Level   | Code | Message                                                                               |
+---------+------+---------------------------------------------------------------------------------------+
| Warning | 1296 | Got error 255 'Foreign key constaint violated: No parent row found' from NDB          |
| Error   | 1452 | Cannot add or update a child row: a foreign key constraint fails (Unknown error code) |
+---------+------+---------------------------------------------------------------------------------------+
2 rows in set (0.00 sec)</pre>
<p>We can also confirm that the constraint checking works in the opposite direction, by attempting to delete a county that has towns defined for it:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">mysql&gt; DELETE FROM counties WHERE county='Berkshire';
ERROR 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (Unknown error code)
mysql&gt; SHOW WARNINGS;
+---------+------+-------------------------------------------------------------------------------------------+
| Level   | Code | Message                                                                                   |
+---------+------+-------------------------------------------------------------------------------------------+
| Warning | 1296 | Got error 256 'Foreign key constaint violated: Referenced row exists' from NDB            |
| Error   | 1451 | Cannot delete or update a parent row: a foreign key constraint fails (Unknown error code) |
+---------+------+-------------------------------------------------------------------------------------------+
2 rows in set (0.00 sec)</pre>
<p>It is also possible to delete FK constraints and add new ones, we do that next and at the same time we&#8217;ll switch to a <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">CASCADE</span> restriction. Note that adding and deleting FKs are on-line operations. In case you have forgotten the name of the constraint (or we had not explicitly named it) we can use the <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">SHOW CREATE TABLE</span> command to remind us:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">mysql&gt; SHOW CREATE TABLE towns;
+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table | Create Table                                                                                                                                                                                                                                                                                                                 |
+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| towns | CREATE TABLE `towns` (
  `town` varchar(30) NOT NULL,
  `county` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`town`),
  KEY `county_county_index` (`county`),
CONSTRAINT <strong>`county_town`</strong> FOREIGN KEY(`county`) REFERENCES `counties` (`county`)
  ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=ndbcluster DEFAULT CHARSET=latin1 |
+-------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; ALTER TABLE towns DROP FOREIGN KEY county_town;
Query OK, 0 rows affected (0.47 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql&gt; ALTER TABLE towns ADD CONSTRAINT county_town FOREIGN KEY (county)
  REFERENCES counties(county) ON DELETE CASCADE ON UPDATE CASCADE;</pre>
<p>The data in the tables will not have changed as part of dropping and adding constraints and so you can always <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">DROP</span> and the re-add constraints if you need to turn FKs off for a while:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">mysql&gt; SELECT * FROM counties;SELECT * FROM towns;
+-----------------+---------+
| county          | country |
+-----------------+---------+
| Buckinghamshire | England |
| Berkshire       | England |
| Oxfordshire     | England |
| Shropshire      | WALES   |
+-----------------+---------+
4 rows in set (0.00 sec)

+------------+-------------+
| town       | county      |
+------------+-------------+
| Reading    | Berkshire   |
| Shrewsbury | Shropshire  |
| Maidenhead | Berkshire   |
| Oxford     | Oxfordshire |
+------------+-------------+
4 rows in set (0.00 sec)</pre>
<p>Now if we delete the county of Berkshire then the CASCADE option will cause all of the associated towns to be deleted too:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">mysql&gt; DELETE FROM counties WHERE county='Berkshire';
Query OK, 1 row affected (0.00 sec)

mysql&gt; SELECT * FROM counties;SELECT * FROM towns;
+-----------------+---------+
| county          | country |
+-----------------+---------+
| Shropshire      | WALES   |
| Buckinghamshire | England |
| Oxfordshire     | England |
+-----------------+---------+
3 rows in set (0.00 sec)

+------------+-------------+
| town       | county      |
+------------+-------------+
| Shrewsbury | Shropshire  |
| Oxford     | Oxfordshire |
+------------+-------------+
2 rows in set (0.00 sec)</pre>
<p>Note that MySQL Cluster implements FKs in the data nodes and the constraints will be enforced regardless of how the data is written (through SQL, javascript, Memcached, ClusterJ, REST or directly through the NDB API). Before illustrating this, we add back the data we have just deleted:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">mysql&gt; REPLACE INTO counties VALUES ('Berkshire','England');
Query OK, 1 row affected (0.00 sec)

mysql&gt; REPLACE INTO towns VALUES ('Maidenhead','Berkshire'),('Reading','Berkshire');
Query OK, 2 rows affected (0.00 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql&gt; SELECT * FROM counties;SELECT * FROM towns;
+-----------------+---------+
| county          | country |
+-----------------+---------+
| Shropshire      | WALES   |
| Buckinghamshire | England |
| Berkshire       | England |
| Oxfordshire     | England |
+-----------------+---------+
4 rows in set (0.00 sec)

+------------+-------------+
| town       | county      |
+------------+-------------+
| Reading    | Berkshire   |
| Shrewsbury | Shropshire  |
| Maidenhead | Berkshire   |
| Oxford     | Oxfordshire |
+------------+-------------+
4 rows in set (0.00 sec)</pre>
<p>We&#8217;ll then run a simple C++ app to delete the &#8216;Berkshire&#8217; row from the <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">counties</span> table. The <a title="Example code for testing Foreign Key constraint enforcement through the NDB API" href="http://clusterdb.com/upload/testfk.cpp" target="_blank">full source for the app is available here</a> but the key part of the code is this:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">static void do_change(Ndb &amp;myNdb)
{
const NdbDictionary::Dictionary* myDict= myNdb.getDictionary();
const NdbDictionary::Table *countiesTable= myDict-&gt;getTable("counties");

char royalBorough[255];
royalBorough[0]=9;
strcpy(royalBorough + 1, "Berkshire");

if (countiesTable == NULL)
APIERROR(myDict-&gt;getNdbError());

NdbTransaction *myTransaction= myNdb.startTransaction();
if (myTransaction == NULL) APIERROR(myNdb.getNdbError());

NdbOperation *myOperation= myTransaction-&gt;getNdbOperation(countiesTable);
if (myOperation == NULL) APIERROR(myTransaction-&gt;getNdbError());

std::cout &lt;&lt; "About to delete " &lt;&lt; royalBorough &lt;&lt; "n";

<strong>myOperation-&gt;deleteTuple(); </strong></pre>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;"><strong>myOperation-&gt;equal("county", (const char *) royalBorough);</strong>

if (myTransaction-&gt;execute( NdbTransaction::Commit ) == -1)
APIERROR(myTransaction-&gt;getNdbError());

myNdb.closeTransaction(myTransaction);
}</pre>
<p>We then run this code and confirm that the cascaded delete has worked:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">billy@ws2:~/projects/fk$ ./testfk localhost:1186
About to delete         Berkshire

mysql&gt; SELECT * FROM counties;SELECT * FROM towns;
+-----------------+---------+
| county          | country |
+-----------------+---------+
| Shropshire      | WALES   |
| Buckinghamshire | England |
| Oxfordshire     | England |
+-----------------+---------+
3 rows in set (0.00 sec)

+------------+-------------+
| town       | county      |
+------------+-------------+
| Shrewsbury | Shropshire  |
| Oxford     | Oxfordshire |
+------------+-------------+
2 rows in set (0.00 sec)</pre>
<h3>Comparison with InnoDB&#8217;s Foreign Keys</h3>
<p>As mentioned, we&#8217;ve attempted to mirror the way that InnoDB works as much as possible in the way that it implements Foreign Keys as that&#8217;s what we think will allow people to move more easily to MySQL Cluster when appropriate. There are a couple of exceptions though:</p>
<ul>
<li>InnoDB doesn&#8217;t support &#8220;No Action&#8221; constraints, MySQL Cluster does</li>
<li>You cannot set up FKs between 2 tables where one is stored using MySQL Cluster and the other InnoDB.</li>
<li>You cannot change primary keys through the NDB API which means that the MySQL Server actually has to simulate such operations by deleting and re-adding the row. If the PK in the parent table has a FK constraint on it then this causes non-ideal behaviour. With <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">Restrict</span> or <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">No Action</span> constraints, the change will result in an error. With Cascaded constraints, you&#8217;d want the rows in the child table to be updated with the new FK value but, the implicit delete of the row from the parent table would remove the associated rows from the child table and the subsequent implicit insert into the parent wouldn&#8217;t reinstate the child rows. For this reason, an attempt to add an <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">ON UPDATE CASCADE</span> where the parent column is a primary key will be rejected.</li>
</ul>
<h3>MySQL Workbench</h3>
<p><div id="attachment_2567" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2012/09/WB-ndb-FKs-full.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-2567" src="/wp-content/uploads/2012/09/WB-ndb-FKs-full-300x208.png" alt="Viewing &amp; updating Foreign Key Constraints in MySQL Workbench" title="Viewing &amp; updating Foreign Key Constraints in MySQL Workbench" width="300" height="208" class="size-medium wp-image-2567" /></a><p id="caption-attachment-2567" class="wp-caption-text">Viewing and updating Foreign Key Constraints in MySQL Workbench</p></div>While not really the subject of this post, MySQL Workbench is a great tool for database developers and one of the features is the creation, modification and reverse engineering of schemas. For example, you could import your existing schema, add a new table and then introduce a FK constraint between an existing table and your new one. Previously, WorkBench would only allow you to play with FKs for InnoDB tables.</p>
<h3>Closing remarks</h3>
<p>We believe that this is going to enable a whole new set of applications exploit the advantages of MySQL Cluster (on-line scalability, real-time performance, NoSQL APIs, real-time performance, on-line schema changes,&#8230;) either because:</p>
<ul>
<li>they want to simplify their application by pushing these referential checks down into the database &#8211; letting the developer focus more of their time on extending the application;</li>
<li>because they&#8217;re stuck with 3rd party middleware that is dependent on FKs</li>
<li>or that the application is already so dependent on FKs that it would be too much pain to remove them.</li>
</ul>
<p>If you are new to MySQL Cluster then here are some useful resources to get you started:</p>
<ul>
<li><a href="/mysql-cluster/mysql-cluster-7-3-auto-installer" title="MySQL Cluster Auto-Installer; browser based GUI to get a well configured cluster up and running within minutes" target="_blank">MySQL Cluster Auto-Installer; browser based GUI to get a well configured cluster up and running within minutes</a> </li>
<li><a href="https://www.mysql.com/why-mysql/white-papers/mysql_cluster_eval_guide.php" title="Get the most out of your MySQL Cluster evaluation" target="_blank">Get the most out of your MySQL Cluster evaluation</a></li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-cluster/foreign-keys-in-mysql-cluster/feed</wfw:commentRss>
			<slash:comments>48</slash:comments>
		
		
			</item>
		<item>
		<title>&#8220;MySQL &#038; Friends devroom&#8221; at FOSDEM 2013</title>
		<link>/mysql-cluster/mysql-friends-devroom-at-fosdem-2013</link>
					<comments>/mysql-cluster/mysql-friends-devroom-at-fosdem-2013#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 18 Jan 2013 09:00:09 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL 5.6]]></category>
		<category><![CDATA[MySQL Cluster CGE]]></category>
		<guid isPermaLink="false">/?p=2669</guid>

					<description><![CDATA[The Free and Open source Software Developers’ European Meeting (FOSDEM) is a two-day event organized by volunteers to promote the widespread use of Free and Open Source software. As in previous years, there is a dedicated stream of MySQL Sessions. On Saturday (2nd Feb) evening there&#8217;s a MySQL community dinner and then we&#8217;ve a packed]]></description>
										<content:encoded><![CDATA[<p><div id="attachment_2670" style="width: 136px" class="wp-caption alignright"><a href="https://fosdem.org/2013/"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-2670" src="/wp-content/uploads/2013/01/about.png" alt="FOSDEM 2013" width="126" height="124" class="size-full wp-image-2670" /></a><p id="caption-attachment-2670" class="wp-caption-text">FOSDEM 2013</p></div>The Free and Open source Software Developers’ European Meeting (FOSDEM) is a two-day event organized by volunteers to promote the widespread use of Free and Open Source software. As in previous years, there is a dedicated stream of MySQL Sessions. On Saturday (2nd Feb) evening there&#8217;s a <a href="http://www.eventbrite.com/event/5255505358" title="FOSDEM 2013 MySQL Community Dinner" target="_blank">MySQL community dinner</a> and then we&#8217;ve a <a href="https://fosdem.org/2013/schedule/track/mysql_and_friends/" title="MySQL devroom schedule for FOSEM 2013" target="_blank">packed program</a> from 9:15 through 17:30 on Sunday (3rd Feb).</p>
<p>FOSDEM 2013 is a free event and there&#8217;s no requirement  to pre-register &#8211; just get yourself along to Brussels.</p>
<p>This year I&#8217;ll be making a <a href="https://fosdem.org/2013/schedule/event/mysql_cluster/" title="FOSDEM 2013 - MySQL Cluster" target="_blank">presentation introducing MySQL Cluster</a>. Several of my colleagues from Oracle will also be there to present on the latest and greatest MySQL capabilities &#8211; including what&#8217;s coming in MySQL 5.6. This will be a great opportunity to politely listen to some real technical experts but an even better one to pester them for extra details &#8211; whether during the presentations or when you can grab them at other times.</p>
<p>Hope to see some of you there!</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-cluster/mysql-friends-devroom-at-fosdem-2013/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL Cluster Manager 1.2 &#8211; using the new features</title>
		<link>/mysql-cluster/mysql-cluster-manager-1-2-using-the-new-features</link>
					<comments>/mysql-cluster/mysql-cluster-manager-1-2-using-the-new-features#comments</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Thu, 13 Dec 2012 15:25:49 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster CGE]]></category>
		<category><![CDATA[MySQL Cluster Manager]]></category>
		<guid isPermaLink="false">/?p=2420</guid>

					<description><![CDATA[Oracle have just announced that MySQL Cluster Manager 1.2 is Generally Available. For anyone not familiar with MySQL Cluster Manager &#8211; it&#8217;s a command-line management tool that makes it simpler and safer to manage your MySQL Cluster deployment &#8211; use it to create, configure, start, stop, upgrade&#8230;. your cluster. So what has changed since MCM]]></description>
										<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2010/11/MySQL-Cluster-Manager.jpg"><img loading="lazy" decoding="async" src="/wp-content/uploads/2010/11/MySQL-Cluster-Manager.jpg" alt="MySQL Cluster Manager logo" title="MySQL Cluster Manager" width="205" height="141" class="alignright size-full wp-image-1352" /></a>Oracle have just announced that MySQL Cluster Manager 1.2 is Generally Available. For anyone not familiar with <a href="/tag/mysql-cluster-manager/" title="MySQL Cluster Manager posts" target="_blank">MySQL Cluster Manager</a> &#8211; it&#8217;s a command-line management tool that makes it simpler and safer to manage your MySQL Cluster deployment &#8211; use it to create, configure, start, stop, upgrade&#8230;. your cluster.</p>
<p>So what has changed since MCM 1.1 was released? </p>
<p>The first thing is that a lot of work has happened under the covers and it&#8217;s now faster, more robust and can manage larger clusters. Feature-wise you get the following (note that a couple of these were released early as part of post-GA versions of MCM 1.1):</p>
<ul>
<li>Automation of on-line backup and restore</li>
<li>Single command to start MCM and a single-host Cluster</li>
<li>Multiple clusters per site</li>
<li>Single command to stop all of the MCM agents in a Cluster</li>
<li>Provide more details in &#8220;show status&#8221; command</li>
<li>Ability to restart &#8220;initial&#8221; the data nodes in order to wipe out the database ahead of a restore</li>
</ul>
<p>A new version of the <a href="http://www.mysql.com/why-mysql/white-papers/mysql_wp_cluster_manager.php" title="MySQL Cluster Manager white paper" target="_blank">MySQL Cluster Manager white paper</a> has been released that explains everything that you can do with it and also includes a tutorial for the key features; you can <a href="http://www.mysql.com/why-mysql/white-papers/mysql_wp_cluster_manager.php" title="MySQL Cluster Manager white paper" target="_blank">download it here</a>.</p>
<p>
Watch this video for a tutorial on using MySQL Cluster Manager, including the new features:<br />
<iframe loading="lazy" title="MySQL Cluster Manager 1.2 - Tutorial" width="480" height="360" src="https://www.youtube.com/embed/PFyNXqo3I-g?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
</p>
<h2>Using the new features</h2>
<h3>Single command to run MCM and then create and run a Cluster</h3>
<p>A single-host cluster can very easily be created and run – an easy way to start experimenting with MySQL Cluster:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
billy@black:~$ mcm/bin/mcmd –bootstrap
		
MySQL Cluster Manager 1.2.1 started
Connect to MySQL Cluster Manager by running "/home/billy/mcm-1.2.1-cluster-7.2.9_32-linux-rhel5-x86/bin/mcm" -a black.localdomain:1862
Configuring default cluster 'mycluster'...
Starting default cluster 'mycluster'...
Cluster 'mycluster' started successfully
        ndb_mgmd        black.localdomain:1186
        ndbd            black.localdomain
        ndbd            black.localdomain
        mysqld          black.localdomain:3306
        mysqld          black.localdomain:3307
        ndbapi          *
Connect to the database by running "/home/billy/mcm-1.2.1-cluster-7.2.9_32-linux-rhel5-x86/cluster/bin/mysql" -h black.localdomain -P 3306 -u root
</pre>
<p>You can then connect to MCM:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">billy@black:~$ mcm/bin/mcm </pre>
<p>Or access the database itself simply by running the regular mysql client.</p>
<h3>Extra status information</h3>
<p>When querying the status of the processes in a Cluster, you&#8217;re now also shown the package being used for each node:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mcm> show status --process mycluster;
+--------+----------+------ +---------+-----------+---------+
| NodeId | Process  | Host  | Status  | Nodegroup | Package |
+--------+----------+-------+---------+-----------+---------+
| 49     | ndb_mgmd | black | running |           | 7.2.9   |
| 50     | ndb_mgmd | blue  | running |           | 7.2.9   |
| 1      | ndbd     | green | running | 0         | 7.2.9   |
| 2      | ndbd     | brown | running | 0         | 7.2.9   |
| 3      | ndbd     | green | running | 1         | 7.2.9   |
| 4      | ndbd     | brown | running | 1         | 7.2.9   |
| 51     | mysqld   | black | running |           | 7.2.9   |
| 52     | mysqld   | blue  | running |           | 7.2.9   |
+--------+----------+-------+---------+-----------+---------+
</pre>
<h3>Simplified on-line backup &#038; restore</h3>
<p>MySQL Cluster supports on-line backups (and the subsequent restore of that data); MySQL Cluster Manager 1.2 simplifies the process.</p>
<p>The database can be backed up with a single command (which in turn makes every data node in the cluster backup their data):</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mcm> backup cluster mycluster;
</pre>
<p>The list command can be used to identify what backups are available in the cluster:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mcm> list backups mycluster;

+----------+--------+--------+----------------------+
| BackupId | NodeId | Host   | Timestamp            |
+----------+--------+--------+----------------------+
| 1        | 1      | green  | 2012-11-31T06:41:36Z |
| 1        | 2      | brown  | 2012-11-31T06:41:36Z |
| 1        | 3      | green  | 2012-11-31T06:41:36Z |
| 1        | 4      | brown  | 2012-11-31T06:41:36Z |
| 1        | 5      | purple | 2012-11-31T06:41:36Z |
| 1        | 6      | red    | 2012-11-31T06:41:36Z |
| 1        | 7      | purple | 2012-11-31T06:41:36Z |
| 1        | 8      | red    | 2012-11-31T06:41:36Z |
+----------+--------+--------+----------------------+
</pre>
<p>You may then select which of these backups you want to restore by specifying the associated BackupId when invoking the restore command:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mcm> restore cluster -I 1 mycluster;
</pre>
<p>Note that if you need to empty the database of its existing contents before performing the restore then MCM 1.2 introduces the <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">initial</span> option to the <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">start cluster</span> command which will delete all data from all MySQL Cluster tables.</p>
<h3>Stopping all MCM agents for a site</h3>
<p>A single command will now stop all of the agents for your site:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mcm> stop agents mysite;
</pre>
<h2>Getting started with MySQL Cluster Manager</h2>
<p>You can <a href="http://edelivery.oracle.com/" title="Download MySQL Cluster Manager" target="_blank">fetch the MCM binaries from edelivery.oracle.com</a> and then see how to use it in the <a href="http://www.mysql.com/why-mysql/white-papers/mysql_wp_cluster_manager.php" title="MySQL Cluster Manager white paper" target="_blank">MySQL Cluster Manager white paper</a>.</p>
<p>Please try it out and let us know how you get on!</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-cluster/mysql-cluster-manager-1-2-using-the-new-features/feed</wfw:commentRss>
			<slash:comments>10</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL Cluster 7.1.23 has been released</title>
		<link>/mysql-cluster/mysql-cluster-7-1-23-has-been-released</link>
					<comments>/mysql-cluster/mysql-cluster-7-1-23-has-been-released#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 20 Jul 2012 13:16:18 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster 7.1]]></category>
		<category><![CDATA[MySQL Cluster CGE]]></category>
		<guid isPermaLink="false">/?p=2415</guid>

					<description><![CDATA[The binary &#038; source versions for MySQL Cluster 7.1.23 have now been made available at https://www.mysql.com/downloads/cluster/7.1.html#downloads (GPL version) or https://support.oracle.com/ (commercial version). A description of all of the changes (fixes) that have gone into MySQL Cluster 7.1.23 (compared to 7.1.22) are available from the 7.1.23 Change log.]]></description>
										<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2010/02/mysql-cluster-logo-150x105.png"><img loading="lazy" decoding="async" class="alignright size-full  wp-image-919" title="mysql-cluster-logo-150x105" src="/wp-content/uploads/2010/02/mysql-cluster-logo-150x105.png" alt="" width="150" height="105" /></a> The binary &#038; source versions for MySQL Cluster 7.1.23 have now been made available at <a title="MySQL Cluster 7.1 download" href="https://www.mysql.com/downloads/cluster/7.1.html#downloads" target="_blank">https://www.mysql.com/downloads/cluster/7.1.html#downloads</a> (GPL version) or <a href="https://support.oracle.com/" target="_blank">https://support.oracle.com/</a> (commercial version).</p>
<p>A description of all of the changes (fixes) that have gone into MySQL Cluster 7.1.23 (compared to 7.1.22) are available from the <a title="MySQL Cluster 7.1.23 Change Log" href="http://dev.mysql.com/doc/refman/5.1/en/mysql-cluster-news-5-1-61-ndb-7-1-23.html" target="_blank">7.1.23 Change log</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-cluster/mysql-cluster-7-1-23-has-been-released/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL Cluster 7.2.7 released</title>
		<link>/mysql-cluster/mysql-cluster-7-2-7-released</link>
					<comments>/mysql-cluster/mysql-cluster-7-2-7-released#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 20 Jul 2012 13:02:13 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster 7.2]]></category>
		<category><![CDATA[MySQL Cluster CGE]]></category>
		<guid isPermaLink="false">/?p=2413</guid>

					<description><![CDATA[The binary version for MySQL Cluster 7.2.7 has now been made available at http://www.mysql.com/downloads/cluster/ (GPL version) or https://support.oracle.com/ (commercial version). A description of all of the changes (fixes) that have gone into MySQL Cluster 7.2.7 (compared to 7.2.6) are available from the 7.2.7 Change log.]]></description>
										<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2010/02/mysql-cluster-logo-150x105.png"><img loading="lazy" decoding="async" class="alignright size-full  wp-image-919" title="mysql-cluster-logo-150x105" src="/wp-content/uploads/2010/02/mysql-cluster-logo-150x105.png" alt="" width="150" height="105" /></a> The binary version for MySQL Cluster 7.2.7 has now been made available at <a href="http://www.mysql.com/downloads/cluster/" target="_blank">http://www.mysql.com/downloads/cluster/</a> (GPL version) or <a href="https://support.oracle.com/" target="_blank">https://support.oracle.com/</a> (commercial version).</p>
<p>A description of all of the changes (fixes) that have gone into MySQL Cluster 7.2.7 (compared to 7.2.6) are available from the <a title="MySQL Cluster 7.2.7 Release Notes" href="http://dev.mysql.com/doc/refman/5.5/en/mysql-cluster-news-5-5-25a-ndb-7-2-7.html" target="_blank">7.2.7 Change log</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-cluster/mysql-cluster-7-2-7-released/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
