<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>MyS &#8211; Andrew Morgan on Databases</title>
	<atom:link href="./feed/index.html" rel="self" type="application/rss+xml" />
	<link>./../../index.html</link>
	<description>Database technologies - especially around scalability and High Availability</description>
	<lastBuildDate>Tue, 27 Jan 2015 13:12:24 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>MySQL Cluster 7.2.19 Released</title>
		<link>./../../mysql-cluster/mysql-cluster-7-2-19-released/index.html</link>
					<comments>./../../mysql-cluster/mysql-cluster-7-2-19-released/index.html#comments</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Tue, 27 Jan 2015 13:10:13 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[MyS]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster 7.2]]></category>
		<category><![CDATA[secondary]]></category>
		<guid isPermaLink="false">./../../index.html?p=3994</guid>

					<description><![CDATA[The binary and source versions of MySQL Cluster 7.2.19 have now been made available at http://dev.mysql.com/downloads/cluster/7.2.html. MySQL Cluster NDB 7.2.19 is a maintenance release of MySQL Cluster, incorporating fixes for bugs found in previous MySQL Cluster NDB 7.2 development releases. MySQL Cluster NDB 7.2.19 source code and binaries can be obtained from here. Review the]]></description>
										<content:encoded><![CDATA[<p><a href="./../../wp-content/uploads/2013/11/MySQL_Cluster.png"><img decoding="async" class="alignnone size-medium wp-image-2982" src="./../../wp-content/uploads/2013/11/MySQL_Cluster-300x125.png" alt="MySQL Cluster Logo" width="300" height="125" srcset="./../../wp-content/uploads/2013/11/MySQL_Cluster-300x125.png 300w, ./../../wp-content/uploads/2013/11/MySQL_Cluster.png 1004w" sizes="(max-width: 300px) 100vw, 300px" /><br />
</a><br />
The binary and source versions of MySQL Cluster 7.2.19 have now been made available at <a href="http://dev.mysql.com/downloads/cluster/7.2.html" target="_blank">http://dev.mysql.com/downloads/cluster/7.2.html</a>.</p>
<p>MySQL Cluster NDB 7.2.19 is a maintenance release of MySQL Cluster, incorporating fixes for bugs found in previous MySQL Cluster NDB 7.2 development releases. </p>
<p><a title="Download MySQL Cluster 7.2.19" href="http://dev.mysql.com/downloads/cluster/7.2.html" target="_blank">MySQL Cluster NDB 7.2.19 source code and binaries can be obtained from here</a>.</p>
<p>Review the <a href="http://dev.mysql.com/doc/relnotes/mysql-cluster/7.2/en/mysql-cluster-news-5-5-41-ndb-7-2-19.html" title="MySQL Cluster 7.2.19 Release Notes" target="_blank">MySQL Cluster 7.2.19 Release Notes</a> for a description of the bug fixes included.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql-cluster/mysql-cluster-7-2-19-released/feed/index.html</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL Cluster fault tolerance &#8211; impact of deployment decisions</title>
		<link>./../../mysql-cluster/mysql-cluster-fault-tolerance-impact-of-deployment-decisions/index.html</link>
					<comments>./../../mysql-cluster/mysql-cluster-fault-tolerance-impact-of-deployment-decisions/index.html#comments</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Mon, 16 Nov 2009 11:45:29 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[Fault Tolerance]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[High Availability]]></category>
		<category><![CDATA[MyS]]></category>
		<category><![CDATA[Mysq]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster CGE]]></category>
		<guid isPermaLink="false">./../../index.html?p=328</guid>

					<description><![CDATA[MySQL Cluster is designed to be a High Availability, Fault Tolerant database where no single failure results in any loss of service. This is however dependent on how the user chooses to architect the configuration &#8211; in terms of which nodes are placed on which physical hosts, and which physical resources each physical host is]]></description>
										<content:encoded><![CDATA[<div id="attachment_311" style="width: 295px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2009/07/mgm1.gif"><img fetchpriority="high" decoding="async" aria-describedby="caption-attachment-311" class="size-full wp-image-311" title="Typical management configuration" src="./../../wp-content/uploads/2009/07/mgm1.gif" alt="Typical management configuration" width="285" height="316" /></a><p id="caption-attachment-311" class="wp-caption-text">Fig 1. Typical management configuration</p></div>
<p>MySQL Cluster is designed to be a High Availability, Fault Tolerant database where no single failure results in any loss of service.</p>
<p>This is however dependent on how the user chooses to architect the configuration &#8211; in terms of which nodes are placed on which physical hosts, and which physical resources each physical host is dependent on (for example if the two blades containing the data nodes making up a particular node group are cooled by the same fan then the failure of that fan could result in the loss of the whole database).</p>
<p>Of course, there&#8217;s always the possibility of an entire data center being lost due to earthquake, sabotage etc. and so for a fully available system, you should consider using asynchronous replication to a geographically remote Cluster.</p>
<p>Fig 1. illustrates a typical small configuration with one or more data nodes from different node groups being stored on two different physical hosts and a management node on an independent machines (probably co-located with other applications as its resource requirements are minimal. If any single node (process) or physical host is lost then service can continue.</p>
<h3>The basics of MySQL Cluster fault tolerance</h3>
<p>Data held within MySQL Cluster is partitioned, with each node group being responsible for 2 or more fragments. All of the data nodes responsible for the same fragments form a Node Group (NG). If configured correctly, any single data node can be lost and the other data nodes within its node group will continue to provide service.</p>
<p>The management node (ndb_mgmd process) is required when adding nodes to the cluster &#8211; either when it was initially configured or when a node has been lost and restarted.</p>
<p>A heart-beat protocol is used between the data nodes in order to identify when a node has been lost. In many cases, the community of surviving data nodes can reconfigure themselves but in some cases they need help from the management node &#8211; much of this article focuses on how to identify these cases so that you can decide what level of redundancy is required for the management node.</p>
<h3>Goals of the algorithm</h3>
<p>The algorithm used by MySQL Cluster has 2 priorities (in order):</p>
<ol>
<li>Prevent database inconsistencies through &#8220;split brain&#8221; syndrome</li>
<li>Keep the database up and running, serving the application</li>
</ol>
<p>Split brain would occur if 2 data nodes within a node group lost contact with each other and independently decided that they should be master for the fragments controlled by their node group. This could lead to them independently applying conflicting changes to the data &#8211; making it very hard to recover the database (which would include undoing the changes that the application believes to have been safely committed). Note that a particular node doesn&#8217;t know whether its peer(s) has crashed or if it has just lost its connection to it. If the algorithm is not confident of avoiding a split brain situation then all of the data nodes are shut down &#8211; obviously that isn&#8217;t an ideal result and so it&#8217;s important to understand how to configure your cluster so that doesn&#8217;t happen.</p>
<h3>The algorithm</h3>
<p>If all of the data nodes making up a node group are lost then the cluster shuts down.</p>
<p>When data nodes lose contact with each other (could be failure of a network connection, process or host) then all of the data nodes that can still contact each other form a new community. Each community must decide whether its data nodes should stay up or shut down:</p>
<ul>
<li>If the community doesn&#8217;t contain at least 1 data node from each node group then it is not viable and its data nodes should shut down.</li>
<li>If this community is viable and it can determine that it contains enough of the data nodes such that there can be no other viable community out there (one with at least 1 data node from each node group) then it will decide (by itself) to keep up all of its data nodes.</li>
<li>If the community is viable but there is the possibility of another viable community then it contacts the arbitrator which decides which amongst all viable communities should be allowed to stay up. If the community can not connect to the arbitrator then its data nodes shut down.</li>
</ul>
<p>In this way, at most one community of data nodes will survive and there is no chance of split brain.</p>
<p>The arbitrator will typically run on a management node. As you&#8217;ll from the algorithm and the following examples, the cluster can sometimes survive a failure without needing a running management node but sometimes it can&#8217;t. In most of the examples, a single management node is used but you may well decide to have a second for redundacy so that more multiple-point-of-failures can be handled. At any point in time, just one of the management nodes would act as the active arbitrator, if the active one is lost then a majority community of data nodes can hand control over to the other management node.</p>
<p>Note that the management node consumes very little resource and so can be co-located with other functions/applications but as you&#8217;ll see from the examples, you would normally avoid running it on the same host as a data node.</p>
<h3>Example 1: Simplest cluster &#8211; loss of management node followed by a data node</h3>
<div id="attachment_333" style="width: 290px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2009/07/mgm17.jpg"><img decoding="async" aria-describedby="caption-attachment-333" class="size-full wp-image-333" title="Loss of management node followed by data node in a simple Cluster" src="./../../wp-content/uploads/2009/07/mgm17.jpg" alt="Fig 2. Loss of management node followed by data node in a simple Cluster" width="280" height="309" srcset="./../../wp-content/uploads/2009/07/mgm17.jpg 280w, ./../../wp-content/uploads/2009/07/mgm17-271x300.jpg 271w" sizes="(max-width: 280px) 100vw, 280px" /></a><p id="caption-attachment-333" class="wp-caption-text">Fig 2. Loss of management node followed by data node in a simple Cluster</p></div>
<p>Fig 2. shows a very simple cluster with 3 hosts, the management node running on 192.168.0.19 and then a single node group (NG1) made up of 2 data nodes split between 192.168.0.3 and 192.168.0.4. In this scenario, the management node is &#8216;lost&#8217; (could be process, host or network failure) followed by one of the data nodes.</p>
<p>The surviving data node forms a community of 1. As it can&#8217;t know whether the other data node from NG1 is still viable and it can&#8217;t contact the arbitrator (the management node) it must shut itself down and so service is lost.</p>
<p>Note that the 2 nodes could be lost instantaneously or the management node might be lost first followed some time later by a data node.</p>
<p>To provide a truly HA solution there are 2 steps:</p>
<ol>
<li>Ensure that there is no single point of failure that could result in 192.168.0.19 and either of the other 2 hosts being lost.</li>
<li>Run a second management node on a 4th host that can take over as arbitrator if 192.168.0.19 is lost</li>
</ol>
<h3>Example 2: Half of data nodes isolated but management node available</h3>
<div id="attachment_312" style="width: 294px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2009/07/mgm2.gif"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-312" class="size-full wp-image-312" title="Loss of data node host" src="./../../wp-content/uploads/2009/07/mgm2.gif" alt="Fig 3. Half of data nodes lost" width="284" height="314" /></a><p id="caption-attachment-312" class="wp-caption-text">Fig 3. Half of data nodes lost</p></div>
<p>In Fig 3. host 192.168.0.3 and its 2 data nodes remains up and running but becomes isolated from the management node and the other data nodes. 2 communities of connected data nodes are formed. As each of these communities are viable but recognize that there could be another viable surviving communitycontain a data node from each node group, they must defer to the management node. As192.168.0.3 has lost it&#8217;s connection to the management node, the community of data nodes hosted there shut themselves down. The community hosted on 192.168.0.4 can contact the management node which as it&#8217;s the only community it can see, allows its data nodes to stay up and so service is maintained.</p>
<p><span style="color: #ffffff;">.</span></p>
<p><span style="color: #ffffff;">.</span></p>
<p><span style="color: #ffffff;">.</span></p>
<h3>Example 3: Half of data nodes isolated and management node lost</h3>
<div id="attachment_313" style="width: 294px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2009/07/mgm3.gif"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-313" class="size-full wp-image-313" title="Loss of management node followed by data node host isolation" src="./../../wp-content/uploads/2009/07/mgm3.gif" alt="Fig 4. Data nodes isolated following loss of management node" width="284" height="314" /></a><p id="caption-attachment-313" class="wp-caption-text">Fig 4. Data nodes isolated following loss of management node</p></div>
<p>The scenario shown in Fig 4. builds upon Example 2 but in the case, the management node is lost before one of the data node hosts loses its connection to the other.</p>
<p>In this case, both communities defer to the management node but as that has been lost they both shut themselves down and service is lost.</p>
<p>Refer to Example 1 to see what steps could be taken to increase the tolerance to multiple failures.</p>
<p><span style="color: #ffffff;">.</span></p>
<p><span style="color: #ffffff;">.</span></p>
<p><span style="color: #ffffff;">.</span></p>
<p><span style="color: #ffffff;">.</span></p>
<p><span style="color: #ffffff;">.</span></p>
<h3>Example 4: Management node co-located with data nodes</h3>
<div id="attachment_338" style="width: 338px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2009/07/mgm18.jpg"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-338" class="size-full wp-image-338" title="Management node co-located with data nodes" src="./../../wp-content/uploads/2009/07/mgm18.jpg" alt="Fig 4. Management node co-located with data nodes" width="328" height="173" srcset="./../../wp-content/uploads/2009/07/mgm18.jpg 328w, ./../../wp-content/uploads/2009/07/mgm18-300x158.jpg 300w" sizes="auto, (max-width: 328px) 100vw, 328px" /></a><p id="caption-attachment-338" class="wp-caption-text">Fig 5. Management node co-located with data nodes</p></div>
<p>Fig. 4 shows a common, apparent short-cut that people may take, with just 2 hosts available hosting the management node of the same machine as some of the data nodes. In this example, the connection between the 2 hosts is lost. As each community is viable they each attempt to contact the arbitrator &#8211; the data nodes on 192.168.0.3 are allowed to stay up while those on 192.168.0.4 shut down as they can&#8217;t contact the management node.</p>
<p><strong>However this configuration is inherently unsafe</strong>, if 192.168.0.3 failed then there would be a complete loss of service as the data nodes on 192.168.0.4 would form a viable community but be unable to confirm that they represent the only viable community.</p>
<p>It would be tempting to make this more robust by running a second management node on 192.168.0.4 &#8211; in that case, when each host becomes isolated from the other, the data nodes local to the management node that&#8217;s the current arbitrator will stay up <strong>however</strong> if the entire host on which the active arbitrator failed then you would again lose service. The management node must be run on a 3rd host for a fault-tolerant solution.</p>
<h3>Example 5: Odd number of data node hosts</h3>
<div id="attachment_317" style="width: 299px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2009/07/mgm7.gif"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-317" class="size-full wp-image-317" title="Isolation of data node host - majority survive" src="./../../wp-content/uploads/2009/07/mgm7.gif" alt="Fig 6. Isolation of data node host - majority survive" width="289" height="317" /></a><p id="caption-attachment-317" class="wp-caption-text">Fig 6. Isolation of data node host - majority survive</p></div>
<p>Fig 6. shows a configuration running the management node on the same host as some of the data nodes does provide a robust solution.</p>
<p>In this example 192.168.0.3 becomes isolated its data nodes form a community of 2 which doesn&#8217;t include a data node from NG2 and so they shut themselves down. 192.168.0.4 and 192.168.0.19 are still connected and so they form a commiunity of 4 data nodes; they recognize that the community holds all data nodes from NG2 and so there can be no other viable community and so they are kept up without having to defer to the arbitrator.</p>
<p>Note that as there was no need to consult the management node, service would be maintained even if it was the machine hosting the management node that became isolated.</p>
<p><span style="color: #ffffff;">.</span></p>
<p><span style="color: #ffffff;">.</span></p>
<h3>Example 6: Loss of all data nodes in a node group</h3>
<div id="attachment_325" style="width: 284px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2009/07/mgm14.jpg"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-325" class="size-full wp-image-325" title="All data nodes in a node-group lost" src="./../../wp-content/uploads/2009/07/mgm14.jpg" alt="Fig 7. All data nodes in a node-group lost" width="274" height="303" srcset="./../../wp-content/uploads/2009/07/mgm14.jpg 274w, ./../../wp-content/uploads/2009/07/mgm14-271x300.jpg 271w" sizes="auto, (max-width: 274px) 100vw, 274px" /></a><p id="caption-attachment-325" class="wp-caption-text">Fig 7. All data nodes in a node-group lost</p></div>
<p>Fig 7. illustrates the case where there are multiple data node failures such that all of the data nodes making up a node group are lost. In this scenario, the cluster has to shut down as that node group is no longer viable and the cluster would no longer be able to provide access to all data.</p>
<p><span style="color: #ffffff;">.</span></p>
<p><span style="color: #ffffff;">.</span></p>
<p><span style="color: #ffffff;">.</span></p>
<p><span style="color: #ffffff;">.</span></p>
<p><span style="color: #ffffff;">.</span></p>
<p><span style="color: #ffffff;">.</span></p>
<h3>Example 7: Loss of multiple data nodes from different node groups</h3>
<div id="attachment_326" style="width: 286px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2009/07/mgm15.jpg"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-326" class="size-full wp-image-326" title="Data nodes from different node-groups lost" src="./../../wp-content/uploads/2009/07/mgm15.jpg" alt="Fig 8. Data nodes from different node-groups lost" width="276" height="301" srcset="./../../wp-content/uploads/2009/07/mgm15.jpg 276w, ./../../wp-content/uploads/2009/07/mgm15-275x300.jpg 275w" sizes="auto, (max-width: 276px) 100vw, 276px" /></a><p id="caption-attachment-326" class="wp-caption-text">Fig 8. Data nodes from different node-groups lost</p></div>
<p>Fig 8. is similar to Example 6 but in this case, there is still a surviving data node from each node group. The surviving data node from NG1 forms a community with the one from NG2. As there could be another viable community (containing a data node from NG1 and NG2), they defer to the management node and as they form the only viable community they&#8217;re allowed to stay up.</p>
<p><span style="color: #ffffff;">.</span></p>
<p><span style="color: #ffffff;">.</span></p>
<p><span style="color: #ffffff;">.</span></p>
<p><span style="color: #ffffff;">.</span></p>
<p><span style="color: #ffffff;">.</span></p>
<p><span style="color: #ffffff;">.</span></p>
<h3>Example 8: Classic, fully robust configuration</h3>
<div id="attachment_340" style="width: 352px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2009/07/mgm19.jpg"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-340" class="size-full wp-image-340" title="Classic configuration" src="./../../wp-content/uploads/2009/07/mgm19.jpg" alt="Fig 8. Robust configuration" width="342" height="361" srcset="./../../wp-content/uploads/2009/07/mgm19.jpg 342w, ./../../wp-content/uploads/2009/07/mgm19-284x300.jpg 284w" sizes="auto, (max-width: 342px) 100vw, 342px" /></a><p id="caption-attachment-340" class="wp-caption-text">Fig 9. Robust configuration</p></div>
<p>Fig 9. shows the classic, robust configuration. 2 independent machines both host management nodes. These are in turn connected by 2 independent networks to each of the data nodes (which are in turn all connected to each other via duplicated network connections).</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql-cluster/mysql-cluster-fault-tolerance-impact-of-deployment-decisions/feed/index.html</wfw:commentRss>
			<slash:comments>64</slash:comments>
		
		
			</item>
	</channel>
</rss>
