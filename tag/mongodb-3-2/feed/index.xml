<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>MongoDB 3.2 &#8211; Andrew Morgan on Databases</title>
	<atom:link href="/tag/mongodb-3-2/feed" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Database technologies - especially around scalability and High Availability</description>
	<lastBuildDate>Fri, 22 Jan 2016 09:41:58 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>Analyzing Data in Microsoft Excel with the MongoDB Connector for BI</title>
		<link>/mongodb/analyzing-data-in-microsoft-excel-with-the-mongodb-connector-for-bi</link>
					<comments>/mongodb/analyzing-data-in-microsoft-excel-with-the-mongodb-connector-for-bi#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 22 Jan 2016 09:41:58 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[3.2]]></category>
		<category><![CDATA[Excel]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB 3.2]]></category>
		<category><![CDATA[ODBC]]></category>
		<category><![CDATA[sql]]></category>
		<category><![CDATA[Windows]]></category>
		<guid isPermaLink="false">/?p=4155</guid>

					<description><![CDATA[There are many great BI tools out there that enable powerful analytics and data visualization but sometimes the right tool for the job is the one you already have sitting on your laptop. MongoDB 3.2 introduced the MongoDB Connector for BI which presents an SQL API to allow BI tools to read data from your]]></description>
										<content:encoded><![CDATA[<p>There are many great BI tools out there that enable powerful analytics and data visualization but sometimes the right tool for the job is the one you already have sitting on your laptop.</p>
<p>MongoDB 3.2 introduced the <a href="https://www.mongodb.com/products/bi-connector">MongoDB Connector for BI</a> which presents an SQL API to allow BI tools to read data from your database in real-time. Typically, this functionality will be showcased with specialized tools such as <a href="https://www.mongodb.com/webinar/live-data-visualisation-with-tableau-and-mongodb">Tableau</a> but it’s equally applicable to Microsoft’s ubiquitous Excel.</p>
<p>This video demonstrates how to connect Excel running on Microsoft Windows to the BI connector and then fetch data from MongoDB.</p>
<div style="width: 480px;" class="wp-video"><!--[if lt IE 9]><script>document.createElement('video');</script><![endif]-->
<video class="wp-video-shortcode" id="video-4155-1" width="480" height="270" preload="metadata" controls="controls"><source type="video/mp4" src="http://clusterdb.com/upload/BI_Connector_with_Excel.mp4?_=1" /><a href="http://clusterdb.com/upload/BI_Connector_with_Excel.mp4">http://clusterdb.com/upload/BI_Connector_with_Excel.mp4</a></video></div>
<p>&nbsp;</p>
<p>The instructions in the demo assume that you already have a MongoDB database running together with a configured instance of the MongoDB Connector for BI – the <a href="https://docs.mongodb.org/manual/products/bi-connector/">documentation</a> explains how to set that up.</p>
<p>Note that Excel is not able to handle the &#8220;.&#8221; character or capital letters in table of column names. To overcome this, it was necessary to edit the DRDL file produced by the mongodrdl tool to map names to lowercase equivalents and to replace each &#8220;.&#8221; (used to flatten embedded documents) with a &#8220;_&#8221;; this requires v1.1 or later of the BI connector.</p>
<p>The MongoDB Connector for BI is part of <a href="https://www.mongodb.com/products/mongodb-enterprise-advanced">MongoDB Enterprise Advanced</a>; it can be freely downloaded for evaluation – why not <a href="https://www.mongodb.com/download-center#bi-connector">try it out for yourself</a>.</p>
<p>More information on the BI connector as well as other MongoDB 3.2 features can be found in <a href="https://www.mongodb.com/collateral/mongodb-3-2-whats-new">MongoDB 3.2: What’s New</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/analyzing-data-in-microsoft-excel-with-the-mongodb-connector-for-bi/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		<enclosure url="http://clusterdb.com/upload/BI_Connector_with_Excel.mp4" length="231116948" type="video/mp4" />

			</item>
		<item>
		<title>Joins and Other Aggregation Enhancements in MongoDB 3.2</title>
		<link>/mongodb/joins-and-other-aggregation-enhancements-in-mongodb-3-2</link>
					<comments>/mongodb/joins-and-other-aggregation-enhancements-in-mongodb-3-2#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 06 Nov 2015 16:09:09 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[aggregation]]></category>
		<category><![CDATA[join]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB 3.2]]></category>
		<guid isPermaLink="false">/?p=4140</guid>

					<description><![CDATA[This post looks at the aggregation enhancements being introduced in MongoDB 3.2 – most notably $lookup which implements left-outer equi-joins in the MongoDB Aggregation Framework. The material was originally published in a MongoDB blog series. It starts with an introduction to analyzing data with MongoDB. We then explain why joins are sometimes useful for MongoDB]]></description>
										<content:encoded><![CDATA[<p>This post looks at the aggregation enhancements being introduced in MongoDB 3.2 – most notably <code>$lookup</code> which implements left-outer equi-joins in the MongoDB Aggregation Framework. The material was originally published in a <a href="https://www.mongodb.com/blog/post/joins-and-other-aggregation-enhancements-coming-in-mongodb-3-2-part-1-of-3-introduction" title="Joins and Other Aggregation Enhancements Coming in MongoDB 3.2">MongoDB blog series</a>.</p>
<p>It starts with an introduction to analyzing data with MongoDB. We then explain why joins are sometimes useful for MongoDB – in spite of the strengths of the document model – and how developers have been working without them. It then works through examples of building aggregation pipelines – including using the operators added in MongoDB 3.2. After that, we look at how geolocation data can be included as well as what to do when you reach the limit of what can be done using a single pipeline – including adding wrapper code. Finally, there&#8217;s a summary of some of the limitations of the Aggregation Framework and reasons why you might supplement it with a full visualization solution such as <a href="http://www.tableau.com/">Tableau</a> together with MongoDB&#8217;s Connector for BI (Business Intelligence) – also new in MongoDB 3.2.</p>
<h2>
<a id="user-content-disclaimer" class="anchor" href="#disclaimer" aria-hidden="true"><span class="octicon octicon-link"></span></a>Disclaimer</h2>
<p>MongoDB&#8217;s product plans are for informational purposes only. MongoDB&#8217;s plans may change and you should not rely on them for delivery of a specific feature at a specific time.</p>
<h2>
<a id="user-content-real-time-analytics-and-search" class="anchor" href="#real-time-analytics-and-search" aria-hidden="true"><span class="octicon octicon-link"></span></a>Real-Time Analytics and Search</h2>
<p>With the emergence of new data sources such as social media, mobile applications and sensor-equipped “Internet of Things” networks, organizations can extend analytics to deliver real-time insight and discovery into such areas as operational performance, customer satisfaction, and competitor behavior.</p>
<p>Time to value is everything. For example, having access to real-time customer sentiment or fleet tracking is of little benefit unless the data can be analyzed and reported in real-time.</p>
<p>MongoDB 3.2 aims to extend the options for performing analytics on the live, operational database – ensuring that answers are delivered quickly, and reflect current data. Work that would previously have needed to be done on the client side can now be performed by the database – freeing the developer to focus on new features. </p>
<h2>
<a id="user-content-the-case-for-joins" class="anchor" href="#the-case-for-joins" aria-hidden="true"><span class="octicon octicon-link"></span></a>The Case for Joins</h2>
<p>MongoDB’s document data model is flexible and provides developers many options in terms of modeling their data. Most of the time all the data for a record tends to be located in a single document. For the operational application, accessing data is simple, high performance, and easy to scale with this approach. </p>
<p>When it comes to analytics and reporting, however, it is possible that the data you need to access spans multiple collections. This is illustrated in Figure 1, where the <code>_id</code> field of multiple documents from the <code>products</code> collection is included in a document from the <code>orders</code> collection. For a query to analyze orders and details about their associated products, it must fetch the order document from the <code>orders</code> collection and then use the embedded references to read multiple documents from the <code>products</code> collection. Prior to MongoDB 3.2, this work is implemented in application code. However, this adds complexity to the application and requires multiple round trips to the database, which can impact performance.</p>
<p><a href="https://camo.githubusercontent.com/381f8bf25b13cc8ed82c317cf62a273a5a555a10/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f53696d756c617465644c6566744f757465724a6f696e732e706e67" target="_blank"><img decoding="async" src="https://camo.githubusercontent.com/381f8bf25b13cc8ed82c317cf62a273a5a555a10/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f53696d756c617465644c6566744f757465724a6f696e732e706e67" alt="Application-Layer simulation of joins between documents" title="Application-Layer simulation of joins between documents" data-canonical-src="http://clusterdb.com/upload/SimulatedLeftOuterJoins.png" style="max-width:100%;"></a><br />
<em>Figure 1: Application-Layer simulation of joins between documents</em></p>
<p>MongoDB 3.2 introduces the <code>$lookup</code> operator that can now be included as a stage in an aggregation pipeline. With this approach, the work of combining data from the orders and products collections is implemented within the database, and as part of a broader aggregation pipeline that performs other processing in a single query. As a result, there is less work to code in the application, and fewer round trips to the database. You can think about $lookup as equivalent to a left outer equi-join.</p>
<h3>
<a id="user-content-aside---what-is-a-left-outer-equi-join" class="anchor" href="#aside---what-is-a-left-outer-equi-join" aria-hidden="true"><span class="octicon octicon-link"></span></a>Aside &#8211; What is a Left Outer Equi-Join?</h3>
<p>A left outer equi-join produces a result set that contains data for all documents from the left table (collection) together with data from the right table (collection) for documents where there is a match with documents from the left table (collection). This is illustrated in Figure 2.</p>
<p><a href="https://camo.githubusercontent.com/3fd23b37ace2ba08cfb3744f7744ab11de630aa1/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f4c6566745f4f757465725f4a6f696e2e706e67" target="_blank"><img decoding="async" src="https://camo.githubusercontent.com/3fd23b37ace2ba08cfb3744f7744ab11de630aa1/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f4c6566745f4f757465725f4a6f696e2e706e67" alt="Left-Outer join between tables/collections" title="Left-Outer join between tables/collections" data-canonical-src="http://clusterdb.com/upload/Left_Outer_Join.png" style="max-width:100%;"></a><br />
<em>Figure 2: Left-Outer join between collections</em></p>
<h2>
<a id="user-content-mongodbs-aggregation-framework" class="anchor" href="#mongodbs-aggregation-framework" aria-hidden="true"><span class="octicon octicon-link"></span></a>MongoDB&#8217;s Aggregation Framework</h2>
<p>The Aggregation Framework is a pipeline for data aggregation modeled on the concept of data processing pipelines. Documents enter a multi-stage pipeline that transforms the documents into aggregated results. The pipeline consists of stages; each stage transforms the documents as they pass through.</p>
<p>In general, each successive stage reduces the volume of data; removing information that isn&#8217;t needed and combining other data to produce summarized results.</p>
<p>Figure 3 shows a conceptual model for the Aggregation Framework pipeline. This is what&#8217;s happening at each stage:</p>
<ul>
<li>On the left-hand side/start of the pipeline is the original collection contents – each record (document) containing a number of shapes (keys), each with a particular color (value)</li>
<li>The <code>$match</code> stage filters out any documents that don&#8217;t contain a red diamond</li>
<li>The <code>$project</code> stage adds a new “square” attribute with a value computed from the value (color) of the snowflake and triangle attributes</li>
<li>The <code>$lookup</code> stage (new in 3.2 &#8211; more details later) performs a left-outer join with another collection, with the star being the comparison key. This creates new documents which contain everything from the previous stage but augmented with data from any document from the second collection containing a matching colored star (i.e., the blue and yellow stars had matching “lookup” values, whereas the red star had none).</li>
<li>Finally, the <code>$group</code> stage groups the data by the color of the square and produces statistics (sum, average and standard deviation) for each group.</li>
</ul>
<p><a href="https://camo.githubusercontent.com/4861c2c6c2d2e68978a8e8c7e97c3e8b3dd0114c/687474703a2f2f7777772e636c757374657264622e636f6d2f75706c6f61642f4d6f6e676f44425f4167677265676174696f6e5f506970656c696e652e706e67" target="_blank"><img decoding="async" src="https://camo.githubusercontent.com/4861c2c6c2d2e68978a8e8c7e97c3e8b3dd0114c/687474703a2f2f7777772e636c757374657264622e636f6d2f75706c6f61642f4d6f6e676f44425f4167677265676174696f6e5f506970656c696e652e706e67" alt="MongoDB Aggregation Framework Pipeline" title="MongoDB Aggregation Framework Pipeline" data-canonical-src="/upload/MongoDB_Aggregation_Pipeline.png" style="max-width:100%;"></a><br />
<em>Figure 3: MongoDB Aggregation Framework pipeline</em></p>
<p>This is the full set of aggregation stages:</p>
<ul>
<li>
<code>$match</code> – Filter documents</li>
<li>
<code>$geoNear</code> – Sort documents based on geographic proximity</li>
<li>
<code>$project</code> – Reshape documents (remove or rename keys or add new data based on calculations on the existing data)</li>
<li>
<code>$lookup</code> – <strong>Coming in 3.2</strong> – Left-outer joins</li>
<li>
<code>$unwind</code> – Expand documents (for example create multiple documents where each contains one element from an array from the original document)</li>
<li>
<code>$group</code> – Summarize documents</li>
<li>
<code>$sample</code> – Randomly selects a subset of documents</li>
<li>
<code>$sort</code> – Order documents</li>
<li>
<code>$skip</code> – Jump over a number of documents</li>
<li>
<code>$limit</code> – Limit number of documents</li>
<li>
<code>$redact</code> – Restrict sensitive content from documents</li>
<li>
<code>$out</code> – <em>Coming in 3.2</em>* – store the results in a new collection</li>
</ul>
<p>The details can be found in the <a href="http://docs.mongodb.org/manual/reference/operator/aggregation-pipeline/" title="Pipeline Aggregation Stages">documentation</a>.</p>
<h3>
<a id="user-content-new-aggregation-operators-in-mongodb-32" class="anchor" href="#new-aggregation-operators-in-mongodb-32" aria-hidden="true"><span class="octicon octicon-link"></span></a>New Aggregation Operators in MongoDB 3.2</h3>
<p>There are operators used within each stage and this set is being extended in MongoDB 3.2 to include:</p>
<ul>
<li>Array operations
<ul>
<li>
<code>$slice</code>, <code>$arrayElemAt</code>, <code>$concatArrays</code>, <code>$isArray</code>, <code>$filter</code>, <code>$min</code>, <code>$max</code>, <code>$avg</code> and <code>$sum</code> (some of these were previously available in a <code>$group</code> stage but not in <code>$project</code>
</li>
</ul>
</li>
<li>Standard Deviations
<ul>
<li>
<code>$stdDevSamp</code> (based on a sample) and <code>$stdDevPop</code> (based on the complete population)</li>
</ul>
</li>
<li>Square Root
<ul>
<li><code>$sqrt</code></li>
</ul>
</li>
<li>Absolute (make +ve) value
<ul>
<li><code>$abs</code></li>
</ul>
</li>
<li>Rounding numbers
<ul>
<li>
<code>$trunc</code>, <code>$ceil</code>, <code>$floor</code>
</li>
</ul>
</li>
<li>Logarithms
<ul>
<li>
<code>$log</code>, <code>$log10</code>, <code>$ln</code>
</li>
</ul>
</li>
<li>Raise to power
<ul>
<li><code>$pow</code></li>
</ul>
</li>
<li>Natural Exponent
<ul>
<li><code>$exp</code></li>
</ul>
</li>
</ul>
<p>Further details on these new operators can be found in the MongoDB 3.2 Release Notes.</p>
<h2>
<a id="user-content-lookup--left-outer-equi-joins" class="anchor" href="#lookup--left-outer-equi-joins" aria-hidden="true"><span class="octicon octicon-link"></span></a>$lookup – Left Outer Equi-Joins</h2>
<p>Figure 4 illustrates the syntax for performing the join:</p>
<ul>
<li>
<code>leftCollection</code> is the collection that the aggregation is being performed on and is the <em>left</em> collection in the join</li>
<li>
<code>from</code> identifies the collection that it will be joined with – the <em>right</em> collection (<code>rightCollection</code> in this case)</li>
<li>
<code>localField</code> specifies the key from the original/left collection – <code>leftVal</code>
</li>
<li>
<code>foreignField</code> specifies the key from the right collection – <code>rightVal</code>
</li>
<li>
<code>as</code> indicates that the data from the right collection should be embedded within the resulting documents as an array called <code>embeddedData</code>
</li>
</ul>
<p><a href="https://camo.githubusercontent.com/fdd7e396bb467e8d541289fa983c8cd334e64e77/687474703a2f2f7777772e636c757374657264622e636f6d2f75706c6f61642f246c6f6f6b75705f4d6f6e676f44425f4a6f696e732e706e67" target="_blank"><img decoding="async" src="https://camo.githubusercontent.com/fdd7e396bb467e8d541289fa983c8cd334e64e77/687474703a2f2f7777772e636c757374657264622e636f6d2f75706c6f61642f246c6f6f6b75705f4d6f6e676f44425f4a6f696e732e706e67" alt="$lookup – Left-Outer Joins for MongoDB" title="$lookup – Left-Outer Joins for MongoDB" data-canonical-src="/upload/$lookup_MongoDB_Joins.png" style="max-width:100%;"></a><br />
<em>Figure 4: $lookup – Left-Outer Joins for MongoDB</em></p>
<p>In the follow-on blogs in this series, you’ll see how the data from a home sales collection (containing details of each home sale, including the property’s postal code) is joined with data from a postal code collection (containing postal codes and their geographical location). This produces documents that contain the original home sale information augmented with the coordinates of the property. In this case, the “homesales” collection is the left-collection and “postcodes” the right-collection; the “postcode” field from each collection is the <code>localField</code> which is matched with the <code>foreignField</code>.</p>
<h2>
<a id="user-content-worked-examples" class="anchor" href="#worked-examples" aria-hidden="true"><span class="octicon octicon-link"></span></a>Worked Examples</h2>
<h3>
<a id="user-content-the-data-set" class="anchor" href="#the-data-set" aria-hidden="true"><span class="octicon octicon-link"></span></a>The Data Set</h3>
<p>The examples use two data sets, the first being a comprehensive set of home sale data for a town and the second being a mapping from postal codes to geospatial locations for that same town.</p>
<p><em>For those interested, the imported data sets needed some cleaning up to make this walkthrough more useful &#8211; <a href="http://clusterdb.com/upload/DataSet_CleanUp.html" title="Cleaning up the data sets">the steps are described here</a>.</em></p>
<p>The two data sets can be checked using the <code>mongo</code> shell:</p>
<div class="highlight highlight-source-js">
<pre>db.homeSales.findOne()
{
  <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span><span class="pl-k">:</span> ObjectId(<span class="pl-s"><span class="pl-pds">"</span>56005dd980c3678b19792b7f<span class="pl-pds">"</span></span>),
  <span class="pl-s"><span class="pl-pds">"</span>amount<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">9000</span>,
  <span class="pl-s"><span class="pl-pds">"</span>date<span class="pl-pds">"</span></span><span class="pl-k">:</span> ISODate(<span class="pl-s"><span class="pl-pds">"</span>1996-09-19T00:00:00Z<span class="pl-pds">"</span></span>),
  <span class="pl-s"><span class="pl-pds">"</span>address<span class="pl-pds">"</span></span><span class="pl-k">:</span> {
    <span class="pl-s"><span class="pl-pds">"</span>nameOrNumber<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">25</span>,
    <span class="pl-s"><span class="pl-pds">"</span>street<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>NORFOLK PARK COTTAGES<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>town<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>MAIDENHEAD<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>county<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>WINDSOR AND MAIDENHEAD<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>postcode<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>SL6 7DR<span class="pl-pds">"</span></span>
  }
}

db.postcodes.findOne()
{
  <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span><span class="pl-k">:</span> ObjectId(<span class="pl-s"><span class="pl-pds">"</span>5600521e50fa77da54dfc0d2<span class="pl-pds">"</span></span>),
  <span class="pl-s"><span class="pl-pds">"</span>postcode<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>SL6 0AA<span class="pl-pds">"</span></span>,
  <span class="pl-s"><span class="pl-pds">"</span>location<span class="pl-pds">"</span></span><span class="pl-k">:</span> {
    <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Point<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>coordinates<span class="pl-pds">"</span></span><span class="pl-k">:</span> [
      <span class="pl-c1">51.525605</span>,
      <span class="pl-k">-</span><span class="pl-c1">0.700974</span>
    ]
  }
}</pre>
</div>
<p>An even better option to understand the contents of these collections is to use <a href="https://youtu.be/3w9HVFh1hRs">MongoDB Compass</a> (to be released with MongoDB 3.2). Figure 1 shows an overview of the <code>homeSales</code> collection and Figure 2 delves into its <code>address</code> sub-document.</p>
<p>
These datasets (the <code>homeSales</code> and <code>postcodes</code> collections) can be <a href="/upload/SalesData.tar.gz" name="datasets for $lookup" alt="Download datasets used in this post">downloaded here</a>.
</p>
<p><a href="https://camo.githubusercontent.com/76e2d4bcdb1802474cc548b8b58891d3ed02d04b/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f436f6d706173735f566965775f6f665f686f6d6553616c65732e706e67" target="_blank"><img decoding="async" src="https://camo.githubusercontent.com/76e2d4bcdb1802474cc548b8b58891d3ed02d04b/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f436f6d706173735f566965775f6f665f686f6d6553616c65732e706e67" alt="MongoDB Compass View of homeSales Collection" title="MongoDB Compass View of homeSales Collection" data-canonical-src="http://clusterdb.com/upload/Compass_View_of_homeSales.png" style="max-width:100%;"></a><br />
<em>Figure 1: MongoDB Compass View of the homeSales Collection</em></p>
<p><a href="https://camo.githubusercontent.com/e0738db602146dee4a570b4e578274cc5746f97c/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f436f6d706173735f686f6d6553616c65735f416464726573732e706e67" target="_blank"><img decoding="async" src="https://camo.githubusercontent.com/e0738db602146dee4a570b4e578274cc5746f97c/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f436f6d706173735f686f6d6553616c65735f416464726573732e706e67" alt="Viewing Sub-Documents With MongoDB Compass" title="Viewing Sub-Documents With MongoDB Compass" data-canonical-src="http://clusterdb.com/upload/Compass_homeSales_Address.png" style="max-width:100%;"></a><br />
<em>Figure 2: Viewing Sub-Documents With MongoDB Compass</em></p>
<h3>
<a id="user-content-building-the-first-pipeline" class="anchor" href="#building-the-first-pipeline" aria-hidden="true"><span class="octicon octicon-link"></span></a>Building the First Pipeline</h3>
<p>As the error messages from complex pipelines aren&#8217;t always very specific, it makes sense to start with a simple pipeline and then check the results before moving onto the next.</p>
<p>As a collection&#8217;s indexes are only used for the beginning stages in the pipeline (before any transformations are performed), it is often sensible to reduce the result set as much as possible with a <code>$match</code> stage to filter out any unnecessary documents. Ideally, the match would be against the sharding key so that fewer shards need to be included. For the first pipeline stage the cheaper property sales are going to excluded and so it would help to have a secondary index on the <code>amount</code> key:</p>
<div class="highlight highlight-source-js">
<pre>db.homeSales.createIndex({amount<span class="pl-k">:</span> <span class="pl-c1">1</span>})</pre>
</div>
<p>The first stage in the pipeline then filters out any sales of less than £3,000,000:</p>
<div class="highlight highlight-source-js">
<pre>db.homeSales.aggregate([
  {$match<span class="pl-k">:</span> {
    amount<span class="pl-k">:</span> {$gte<span class="pl-k">:</span><span class="pl-c1">3000000</span>}}
  }
  ])</pre>
</div>
<p>The results can then be inspected to understand what will flow into the next stage in the pipeline:</p>
<div class="highlight highlight-source-js">
<pre>{
    {
      <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span><span class="pl-k">:</span> ObjectId(<span class="pl-s"><span class="pl-pds">"</span>56005dda80c3678b19799e52<span class="pl-pds">"</span></span>),
      <span class="pl-s"><span class="pl-pds">"</span>amount<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">3000000</span>,
      <span class="pl-s"><span class="pl-pds">"</span>date<span class="pl-pds">"</span></span><span class="pl-k">:</span> ISODate(<span class="pl-s"><span class="pl-pds">"</span>2012-04-19T00:00:00Z<span class="pl-pds">"</span></span>),
      <span class="pl-s"><span class="pl-pds">"</span>address<span class="pl-pds">"</span></span><span class="pl-k">:</span> {
        <span class="pl-s"><span class="pl-pds">"</span>nameOrNumber<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>TEMPLE FERRY PLACE<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>street<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>MILL LANE<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>town<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>MAIDENHEAD<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>county<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>WINDSOR AND MAIDENHEAD<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>postcode<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>SL6 5ND<span class="pl-pds">"</span></span>
      }
    },

...

    {
      <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span><span class="pl-k">:</span> ObjectId(<span class="pl-s"><span class="pl-pds">"</span>56005dda80c3678b19799e5c<span class="pl-pds">"</span></span>),
      <span class="pl-s"><span class="pl-pds">"</span>amount<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">5425000</span>,
      <span class="pl-s"><span class="pl-pds">"</span>date<span class="pl-pds">"</span></span><span class="pl-k">:</span> ISODate(<span class="pl-s"><span class="pl-pds">"</span>1999-03-15T00:00:00Z<span class="pl-pds">"</span></span>),
      <span class="pl-s"><span class="pl-pds">"</span>address<span class="pl-pds">"</span></span><span class="pl-k">:</span> {
        <span class="pl-s"><span class="pl-pds">"</span>nameOrNumber<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>2 - 3<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>street<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>THE SWITCHBACK<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>town<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>MAIDENHEAD<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>county<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>WINDSOR AND MAIDENHEAD<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>postcode<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>SL6 7RJ<span class="pl-pds">"</span></span>
      }
    }</pre>
</div>
<p>In the next stage, a left-outer join is performed – using <code>$lookup</code> – to find documents from the <code>postcodes</code> collection with a matching postcode so that the geographic location can be determined:</p>
<div class="highlight highlight-source-js">
<pre>db.homeSales.aggregate([
  {$match<span class="pl-k">:</span> {
    amount<span class="pl-k">:</span> {$gte<span class="pl-k">:</span><span class="pl-c1">3000000</span>}}
  }, 
  {$lookup<span class="pl-k">:</span> {
    from<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>postcodes<span class="pl-pds">"</span></span>, 
    localField<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>address.postcode<span class="pl-pds">"</span></span>,
    foreignField<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>postcode<span class="pl-pds">"</span></span>,
    as<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>postcode_docs<span class="pl-pds">"</span></span>}
  }
])</pre>
</div>
<p>Which yields these results:</p>
<div class="highlight highlight-source-js">
<pre>{
    {
      <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span><span class="pl-k">:</span> ObjectId(<span class="pl-s"><span class="pl-pds">"</span>56005dda80c3678b19799e52<span class="pl-pds">"</span></span>),
      <span class="pl-s"><span class="pl-pds">"</span>amount<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">3000000</span>,
      <span class="pl-s"><span class="pl-pds">"</span>date<span class="pl-pds">"</span></span><span class="pl-k">:</span> ISODate(<span class="pl-s"><span class="pl-pds">"</span>2012-04-19T00:00:00Z<span class="pl-pds">"</span></span>),
      <span class="pl-s"><span class="pl-pds">"</span>address<span class="pl-pds">"</span></span><span class="pl-k">:</span> {
        <span class="pl-s"><span class="pl-pds">"</span>nameOrNumber<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>TEMPLE FERRY PLACE<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>street<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>MILL LANE<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>town<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>MAIDENHEAD<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>county<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>WINDSOR AND MAIDENHEAD<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>postcode<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>SL6 5ND<span class="pl-pds">"</span></span>
      },
      <span class="pl-s"><span class="pl-pds">"</span>postcode_docs<span class="pl-pds">"</span></span><span class="pl-k">:</span> [
        {
          <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span><span class="pl-k">:</span> ObjectId(<span class="pl-s"><span class="pl-pds">"</span>560053e280c3678b1978b293<span class="pl-pds">"</span></span>),
          <span class="pl-s"><span class="pl-pds">"</span>postcode<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>SL6 5ND<span class="pl-pds">"</span></span>,
          <span class="pl-s"><span class="pl-pds">"</span>location<span class="pl-pds">"</span></span><span class="pl-k">:</span> {
            <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Point<span class="pl-pds">"</span></span>,
            <span class="pl-s"><span class="pl-pds">"</span>coordinates<span class="pl-pds">"</span></span><span class="pl-k">:</span> [
              <span class="pl-c1">51.549516</span>,
              <span class="pl-k">-</span><span class="pl-c1">0.80702</span>
            ]
          }
        }
      ]
    },

...

      <span class="pl-s"><span class="pl-pds">"</span>postcode_docs<span class="pl-pds">"</span></span><span class="pl-k">:</span> [
        {
          <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span><span class="pl-k">:</span> ObjectId(<span class="pl-s"><span class="pl-pds">"</span>560053e280c3678b1978b524<span class="pl-pds">"</span></span>),
          <span class="pl-s"><span class="pl-pds">"</span>postcode<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>SL6 7RJ<span class="pl-pds">"</span></span>,
          <span class="pl-s"><span class="pl-pds">"</span>location<span class="pl-pds">"</span></span><span class="pl-k">:</span> {
            <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Point<span class="pl-pds">"</span></span>,
            <span class="pl-s"><span class="pl-pds">"</span>coordinates<span class="pl-pds">"</span></span><span class="pl-k">:</span> [
              <span class="pl-c1">51.536848</span>,
              <span class="pl-k">-</span><span class="pl-c1">0.735835</span>
            ]
          }
        }
      ]
    }</pre>
</div>
<p>The pipeline can then be extended with a <code>$project</code> stage to refactor the documents, removing any information that isn&#8217;t needed. The documents are then sorted in reverse-price order:</p>
<div class="highlight highlight-source-js">
<pre>db.homeSales.aggregate([
  {$match<span class="pl-k">:</span> {
    amount<span class="pl-k">:</span> {$gte<span class="pl-k">:</span><span class="pl-c1">3000000</span>}}
  }, 
  {$lookup<span class="pl-k">:</span> {
    from<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>postcodes<span class="pl-pds">"</span></span>, 
    localField<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>address.postcode<span class="pl-pds">"</span></span>,
    foreignField<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>postcode<span class="pl-pds">"</span></span>,
    as<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>postcode_docs<span class="pl-pds">"</span></span>}
  },
  {$project<span class="pl-k">:</span> {
    _id<span class="pl-k">:</span> <span class="pl-c1">0</span>,
    saleDate<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$date<span class="pl-pds">"</span></span>,
    price<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$amount<span class="pl-pds">"</span></span>,
    address<span class="pl-k">:</span> <span class="pl-c1">1</span>,
    location<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$postcode_docs.location<span class="pl-pds">"</span></span>}},
  {$sort<span class="pl-k">:</span>
    {
      price<span class="pl-k">:</span> <span class="pl-k">-</span><span class="pl-c1">1</span>
    }}
])</pre>
</div>
<p>The address and physical location of every home sale, starting with the most expensive is then shown:</p>
<div class="highlight highlight-source-js">
<pre>    {
      <span class="pl-s"><span class="pl-pds">"</span>address<span class="pl-pds">"</span></span><span class="pl-k">:</span> {
        <span class="pl-s"><span class="pl-pds">"</span>nameOrNumber<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>2 - 3<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>street<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>THE SWITCHBACK<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>town<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>MAIDENHEAD<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>county<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>WINDSOR AND MAIDENHEAD<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>postcode<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>SL6 7RJ<span class="pl-pds">"</span></span>
      },
      <span class="pl-s"><span class="pl-pds">"</span>saleDate<span class="pl-pds">"</span></span><span class="pl-k">:</span> ISODate(<span class="pl-s"><span class="pl-pds">"</span>1999-03-15T00:00:00Z<span class="pl-pds">"</span></span>),
      <span class="pl-s"><span class="pl-pds">"</span>price<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">5425000</span>,
      <span class="pl-s"><span class="pl-pds">"</span>location<span class="pl-pds">"</span></span><span class="pl-k">:</span> [
        {
          <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Point<span class="pl-pds">"</span></span>,
          <span class="pl-s"><span class="pl-pds">"</span>coordinates<span class="pl-pds">"</span></span><span class="pl-k">:</span> [
            <span class="pl-c1">51.536848</span>,
            <span class="pl-k">-</span><span class="pl-c1">0.735835</span>
          ]
        }
      ]
    },

...

    {
      <span class="pl-s"><span class="pl-pds">"</span>address<span class="pl-pds">"</span></span><span class="pl-k">:</span> {
        <span class="pl-s"><span class="pl-pds">"</span>nameOrNumber<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>TEMPLE FERRY PLACE<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>street<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>MILL LANE<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>town<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>MAIDENHEAD<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>county<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>WINDSOR AND MAIDENHEAD<span class="pl-pds">"</span></span>,
        <span class="pl-s"><span class="pl-pds">"</span>postcode<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>SL6 5ND<span class="pl-pds">"</span></span>
      },
      <span class="pl-s"><span class="pl-pds">"</span>saleDate<span class="pl-pds">"</span></span><span class="pl-k">:</span> ISODate(<span class="pl-s"><span class="pl-pds">"</span>2012-04-19T00:00:00Z<span class="pl-pds">"</span></span>),
      <span class="pl-s"><span class="pl-pds">"</span>price<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">3000000</span>,
      <span class="pl-s"><span class="pl-pds">"</span>location<span class="pl-pds">"</span></span><span class="pl-k">:</span> [
        {
          <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Point<span class="pl-pds">"</span></span>,
          <span class="pl-s"><span class="pl-pds">"</span>coordinates<span class="pl-pds">"</span></span><span class="pl-k">:</span> [
            <span class="pl-c1">51.549516</span>,
            <span class="pl-k">-</span><span class="pl-c1">0.80702</span>
          ]
        }
      ]
    }</pre>
</div>
<h3>
<a id="user-content-building-further-pipelines" class="anchor" href="#building-further-pipelines" aria-hidden="true"><span class="octicon octicon-link"></span></a>Building Further Pipelines</h3>
<p>If all of the sales need to be analyzed (rather than just the most expensive few) then there would be too many results from the previous pipeline to be easily understood. For this reason, the pipeline is modified so that extra analysis and aggregation is performed within the database. This can be done using a <code>$group</code> stage – in this case to produce sales statistics by year:</p>
<div class="highlight highlight-source-js">
<pre>db.homeSales.aggregate([
  {
    $group<span class="pl-k">:</span> 
    {
      _id<span class="pl-k">:</span> {$year<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$date<span class="pl-pds">"</span></span>},
      higestPrice<span class="pl-k">:</span> {$max<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$amount<span class="pl-pds">"</span></span>},
      lowestPrice<span class="pl-k">:</span> {$min<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$amount<span class="pl-pds">"</span></span>},
      averagePrice<span class="pl-k">:</span> {$avg<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$amount<span class="pl-pds">"</span></span>},
      priceStdDev<span class="pl-k">:</span> {$stdDevPop<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$amount<span class="pl-pds">"</span></span>}
    }
  },
  {
    $sort<span class="pl-k">:</span> {_id<span class="pl-k">:</span> <span class="pl-c1">1</span>}
  }
])</pre>
</div>
<div class="highlight highlight-source-js">
<pre>    {
      <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">1995</span>,
      <span class="pl-s"><span class="pl-pds">"</span>higestPrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">1000000</span>,
      <span class="pl-s"><span class="pl-pds">"</span>lowestPrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">12000</span>,
      <span class="pl-s"><span class="pl-pds">"</span>averagePrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">114059.35206869633</span>,
      <span class="pl-s"><span class="pl-pds">"</span>priceStdDev<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">81540.50490801703</span>
    },

...

    {
      <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">2015</span>,
      <span class="pl-s"><span class="pl-pds">"</span>higestPrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">1688000</span>,
      <span class="pl-s"><span class="pl-pds">"</span>lowestPrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">125000</span>,
      <span class="pl-s"><span class="pl-pds">"</span>averagePrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">451413.23917137476</span>,
      <span class="pl-s"><span class="pl-pds">"</span>priceStdDev<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">228293.6005201898</span>
    }

</pre>
</div>
<p>Note that this is using the <code>$stdDevPop</code> (standard deviation) aggregation operator being introduced in MongoDB 3.2.</p>
<p>There&#8217;s more precision than needed for some of the keys and so a common pattern can be employed – use a final <code>$project</code> stage to tidy up the data:</p>
<div class="highlight highlight-source-js">
<pre>db.homeSales.aggregate([
  {
    $group<span class="pl-k">:</span> 
    {
      _id<span class="pl-k">:</span> {$year<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$date<span class="pl-pds">"</span></span>},
      higestPrice<span class="pl-k">:</span> {$max<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$amount<span class="pl-pds">"</span></span>},
      lowestPrice<span class="pl-k">:</span> {$min<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$amount<span class="pl-pds">"</span></span>},
      averagePrice<span class="pl-k">:</span> {$avg<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$amount<span class="pl-pds">"</span></span>},
      priceStdDev<span class="pl-k">:</span> {$stdDevPop<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$amount<span class="pl-pds">"</span></span>}
    }
  },
  {
    $sort<span class="pl-k">:</span> {_id<span class="pl-k">:</span> <span class="pl-c1">1</span>}
  },
  {
    $project<span class="pl-k">:</span>
    {
      _id<span class="pl-k">:</span> <span class="pl-c1">1</span>,
      higestPrice<span class="pl-k">:</span> <span class="pl-c1">1</span>,
      lowestPrice<span class="pl-k">:</span> <span class="pl-c1">1</span>,
      averagePrice<span class="pl-k">:</span> {$trunc<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$averagePrice<span class="pl-pds">"</span></span>},
      priceStdDev<span class="pl-k">:</span> {$trunc<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$priceStdDev<span class="pl-pds">"</span></span>}
    }
  }
])</pre>
</div>
<div class="highlight highlight-source-js">
<pre>
    {
      <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">1995</span>,
      <span class="pl-s"><span class="pl-pds">"</span>higestPrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">1000000</span>,
      <span class="pl-s"><span class="pl-pds">"</span>lowestPrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">12000</span>,
      <span class="pl-s"><span class="pl-pds">"</span>averagePrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">114059</span>,
      <span class="pl-s"><span class="pl-pds">"</span>priceStdDev<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">81540</span>
    },

...

    {
      <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">2015</span>,
      <span class="pl-s"><span class="pl-pds">"</span>higestPrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">1688000</span>,
      <span class="pl-s"><span class="pl-pds">"</span>lowestPrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">125000</span>,
      <span class="pl-s"><span class="pl-pds">"</span>averagePrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">451413</span>,
      <span class="pl-s"><span class="pl-pds">"</span>priceStdDev<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">228293</span>
    }</pre>
</div>
<p>It often makes sense to store the results in a new collection – either because the results will be reused many times or that subsequent aggregation pipelines will reference them. This is simple to achieve using a <code>$out</code> stage; note that:</p>
<ul>
<li>If the target collection already exists then its contents will be overwritten</li>
<li>If used then the <code>$out</code> must be the final stage in the pipeline</li>
</ul>
<p>The following example writes the results to a collection called <code>annualHomePrices</code>:</p>
<div class="highlight highlight-source-js">
<pre>db.homeSales.aggregate([
  {
    $group<span class="pl-k">:</span> 
    {
      _id<span class="pl-k">:</span> {$year<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$date<span class="pl-pds">"</span></span>},
      highestPrice<span class="pl-k">:</span> {$max<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$amount<span class="pl-pds">"</span></span>},
      lowestPrice<span class="pl-k">:</span> {$min<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$amount<span class="pl-pds">"</span></span>},
      averagePrice<span class="pl-k">:</span> {$avg<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$amount<span class="pl-pds">"</span></span>},
      priceStdDev<span class="pl-k">:</span> {$stdDevPop<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$amount<span class="pl-pds">"</span></span>}
    }
  },
  {
    $sort<span class="pl-k">:</span> {_id<span class="pl-k">:</span> <span class="pl-c1">1</span>}
  },
  {
    $project<span class="pl-k">:</span>
    {
      _id<span class="pl-k">:</span> <span class="pl-c1">0</span>,
      year<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$_id<span class="pl-pds">"</span></span>,
      highestPrice<span class="pl-k">:</span> <span class="pl-c1">1</span>,
      lowestPrice<span class="pl-k">:</span> <span class="pl-c1">1</span>,
      averagePrice<span class="pl-k">:</span> {$trunc<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$averagePrice<span class="pl-pds">"</span></span>},
      priceStdDev<span class="pl-k">:</span> {$trunc<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$priceStdDev<span class="pl-pds">"</span></span>}
    }
  },
  {
    $out<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>annualHomePrices<span class="pl-pds">"</span></span>
  }
])</pre>
</div>
<div class="highlight highlight-source-js">
<pre><span class="pl-k">&gt;</span> db.annualHomePrices.findOne()
{
  <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span><span class="pl-k">:</span> ObjectId(<span class="pl-s"><span class="pl-pds">"</span>560957ac29a5574d557d426d<span class="pl-pds">"</span></span>),
  <span class="pl-s"><span class="pl-pds">"</span>highestPrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">1000000</span>,
  <span class="pl-s"><span class="pl-pds">"</span>lowestPrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">12000</span>,
  <span class="pl-s"><span class="pl-pds">"</span>averagePrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">114059</span>,
  <span class="pl-s"><span class="pl-pds">"</span>priceStdDev<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">81540</span>,
  <span class="pl-s"><span class="pl-pds">"</span>year<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">1995</span>
}</pre>
</div>
<p>These &#8220;interim&#8221; results could then be used to build further result sets – without the need to run all of that processing again. As an example, using a simple <code>$project</code> stage, the gap between the highest and lowest house sale can be calculated for each year:</p>
<div class="highlight highlight-source-js">
<pre>db.annualHomePrices.aggregate([
  {$project<span class="pl-k">:</span> 
    {
      Year<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$year<span class="pl-pds">"</span></span>,
      hightToLowPriceGap<span class="pl-k">:</span> {
        $subtract<span class="pl-k">:</span> [<span class="pl-s"><span class="pl-pds">"</span>$highestPrice<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>$lowestPrice<span class="pl-pds">"</span></span>]
      },
      _id<span class="pl-k">:</span> <span class="pl-c1">0</span>
    }
  }
])</pre>
</div>
<div class="highlight highlight-source-js">
<pre>{
   <span class="pl-s"><span class="pl-pds">"</span>Year<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">2012</span>,
   <span class="pl-s"><span class="pl-pds">"</span>hightToLowPriceGap<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">2923000</span>
},
{
   <span class="pl-s"><span class="pl-pds">"</span>Year<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">2013</span>,
   <span class="pl-s"><span class="pl-pds">"</span>hightToLowPriceGap<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">5092250</span>
},
{
   <span class="pl-s"><span class="pl-pds">"</span>Year<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">2014</span>,
   <span class="pl-s"><span class="pl-pds">"</span>hightToLowPriceGap<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">3883050</span>
},
{
  <span class="pl-s"><span class="pl-pds">"</span>Year<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">2015</span>,
  <span class="pl-s"><span class="pl-pds">"</span>hightToLowPriceGap<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">1563000</span>
}</pre>
</div>
<p>As a final stage in this post, a pipeline is built to find the postal code and geographic location of the most expensive house sale for each of the recorded years:<br />
Perform a <code>$sort</code> on the full <code>homeSales</code> data set so that the documents are ordered from most expensive sale first<br />
<code>$group</code> the results based on the year of the home sale, deriving the <code>priciestPostCode</code> from the <code>$first</code> document in that group (year). Because the documents were sorted on price before entering the <code>group</code> stage, the first document is also the one with the highest price<br />
<code>$lookup</code> the postal code in the <code>postcodes</code> collection to get the geolocation data<br />
<code>$sort</code> the results by year<br />
<code>$project</code> just the data that is of interest</p>
<div class="highlight highlight-source-js">
<pre>db.homeSales.aggregate([
    {
      $sort<span class="pl-k">:</span> {amount<span class="pl-k">:</span> <span class="pl-k">-</span><span class="pl-c1">1</span>}
    },
    {
      $group<span class="pl-k">:</span>
      {
        _id<span class="pl-k">:</span> {$year<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$date<span class="pl-pds">"</span></span>},
        priciestPostCode<span class="pl-k">:</span> {$first<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$address.postcode<span class="pl-pds">"</span></span>}
      }
    },
    {
      $lookup<span class="pl-k">:</span>
      {
        from<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>postcodes<span class="pl-pds">"</span></span>,
        localField<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>priciestPostCode<span class="pl-pds">"</span></span>,
        foreignField<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>postcode<span class="pl-pds">"</span></span>,
        as<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>locationData<span class="pl-pds">"</span></span>
      }
    },
    {
      $sort<span class="pl-k">:</span> {_id<span class="pl-k">:</span> <span class="pl-k">-</span><span class="pl-c1">1</span>}
    },
    {
      $project<span class="pl-k">:</span>
      {
        _id<span class="pl-k">:</span> <span class="pl-c1">0</span>,
        Year<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$_id<span class="pl-pds">"</span></span>,
        PostCode<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$priciestPostCode<span class="pl-pds">"</span></span>,
        <span class="pl-c1">Location</span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$locationData.location<span class="pl-pds">"</span></span>
      }
    }
  ])</pre>
</div>
<div class="highlight highlight-source-js">
<pre>{
  <span class="pl-s"><span class="pl-pds">"</span>Year<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">2015</span>,
  <span class="pl-s"><span class="pl-pds">"</span>PostCode<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>SL6 9UD<span class="pl-pds">"</span></span>,
  <span class="pl-s"><span class="pl-pds">"</span>Location<span class="pl-pds">"</span></span><span class="pl-k">:</span> [
    {
      <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Point<span class="pl-pds">"</span></span>,
      <span class="pl-s"><span class="pl-pds">"</span>coordinates<span class="pl-pds">"</span></span><span class="pl-k">:</span> [
        <span class="pl-c1">51.558455</span>,
        <span class="pl-k">-</span><span class="pl-c1">0.756023</span>
      ]
    }
  ]
},
{
  <span class="pl-s"><span class="pl-pds">"</span>Year<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">2014</span>,
  <span class="pl-s"><span class="pl-pds">"</span>PostCode<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>SL6 1UP<span class="pl-pds">"</span></span>,
  <span class="pl-s"><span class="pl-pds">"</span>Location<span class="pl-pds">"</span></span><span class="pl-k">:</span> [
    {
      <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Point<span class="pl-pds">"</span></span>,
      <span class="pl-s"><span class="pl-pds">"</span>coordinates<span class="pl-pds">"</span></span><span class="pl-k">:</span> [
        <span class="pl-c1">51.51407</span>,
        <span class="pl-k">-</span><span class="pl-c1">0.704414</span>
      ]
    }
  ]
},
...</pre>
</div>
<h2>
<a id="user-content-adding-some-coding-glue-and-geolocation" class="anchor" href="#adding-some-coding-glue-and-geolocation" aria-hidden="true"><span class="octicon octicon-link"></span></a>Adding Some Coding Glue and Geolocation</h2>
<p>Obviously, there are limits as to how much can be achieved with a single aggregation pipeline but with the addition of just a little code outside of the database (in this example, JavaScript in the <code>mongo</code> shell), additional results can be produced.</p>
<p>We start by repeating an aggregation from the previous section but store the data in a collection so that we can build upon those results:</p>
<div class="highlight highlight-source-js">
<pre>db.homeSales.aggregate([
    {
      $sort<span class="pl-k">:</span> {amount<span class="pl-k">:</span> <span class="pl-k">-</span><span class="pl-c1">1</span>}
    },
    {
      $group<span class="pl-k">:</span>
      {
        _id<span class="pl-k">:</span> {$year<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$date<span class="pl-pds">"</span></span>},
        priciestPostCode<span class="pl-k">:</span> {$first<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$address.postcode<span class="pl-pds">"</span></span>}
      }
    },
    {
      $lookup<span class="pl-k">:</span>
      {
        from<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>postcodes<span class="pl-pds">"</span></span>,
        localField<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>priciestPostCode<span class="pl-pds">"</span></span>,
        foreignField<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>postcode<span class="pl-pds">"</span></span>,
        as<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>locationData<span class="pl-pds">"</span></span>
      }
    },
    {
      $sort<span class="pl-k">:</span> {_id<span class="pl-k">:</span> <span class="pl-k">-</span><span class="pl-c1">1</span>}
    },
    {
      $project<span class="pl-k">:</span>
      {
        _id<span class="pl-k">:</span> <span class="pl-c1">0</span>,
        Year<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$_id<span class="pl-pds">"</span></span>,
        PostCode<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$priciestPostCode<span class="pl-pds">"</span></span>,
        <span class="pl-c1">Location</span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$locationData.location<span class="pl-pds">"</span></span>
      }
    },
    {
      $out<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>hottestLocations<span class="pl-pds">"</span></span>
    }
  ])</pre>
</div>
<div class="highlight highlight-source-js">
<pre>db.hottestLocations.findOne()
{
  <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span><span class="pl-k">:</span> ObjectId(<span class="pl-s"><span class="pl-pds">"</span>5629108c96be45aba9cb0c98<span class="pl-pds">"</span></span>),
  <span class="pl-s"><span class="pl-pds">"</span>Year<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">2015</span>,
  <span class="pl-s"><span class="pl-pds">"</span>PostCode<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>SL6 9UD<span class="pl-pds">"</span></span>,
  <span class="pl-s"><span class="pl-pds">"</span>Location<span class="pl-pds">"</span></span><span class="pl-k">:</span> [
    {
      <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Point<span class="pl-pds">"</span></span>,
      <span class="pl-s"><span class="pl-pds">"</span>coordinates<span class="pl-pds">"</span></span><span class="pl-k">:</span> [
        <span class="pl-c1">51.558455</span>,
        <span class="pl-k">-</span><span class="pl-c1">0.756023</span>
      ]
    }
  ]
}</pre>
</div>
<p>In this example, geospatial operations are performed on the <code>location</code> from the <code>postcodes</code> collection and so a geospatial index should be added:</p>
<div class="highlight highlight-source-js">
<pre>db.postcodes.createIndex({location<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>2dsphere<span class="pl-pds">"</span></span>})</pre>
</div>
<p>A function is created that, given a location, will find the five nearest postcodes – taking advantage of a <code>$geoNear</code> stage – note that this must be the first stage in the pipeline:</p>
<div class="highlight highlight-source-js">
<pre><span class="pl-k">var</span> <span class="pl-en">findNeighbours</span> <span class="pl-k">=</span> <span class="pl-k">function</span> (<span class="pl-smi">spot</span>, <span class="pl-smi">yearTag</span>) {
  <span class="pl-k">var</span> result <span class="pl-k">=</span> db.postcodes.aggregate([
      {
        $geoNear<span class="pl-k">:</span>
        {
          near<span class="pl-k">:</span> spot,
          distanceField<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>distance<span class="pl-pds">"</span></span>,
          num<span class="pl-k">:</span> <span class="pl-c1">5</span>,
          spherical<span class="pl-k">:</span> <span class="pl-c1">true</span>
        }
      },
      {
        $group<span class="pl-k">:</span> {
          _id<span class="pl-k">:</span> yearTag,
          <span class="pl-s"><span class="pl-pds">"</span>neighbours<span class="pl-pds">"</span></span><span class="pl-k">:</span> {
            $addToSet<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$postcode<span class="pl-pds">"</span></span>
          }
        }
      }
    ]);
  <span class="pl-k">return</span> result.result;
}</pre>
</div>
<p>Then, for each of the <code>hottestLocations</code> collection, that function is called to display and the contents of the returned cursor are displayed:</p>
<div class="highlight highlight-source-js">
<pre>db.hottestLocations.<span class="pl-c1">find</span>().forEach(<span class="pl-k">function</span>(<span class="pl-smi">myDoc</span>) {
  <span class="pl-k">var</span> myCursor <span class="pl-k">=</span> findNeighbours(myDoc.<span class="pl-c1">Location</span>[<span class="pl-c1">0</span>], myDoc.Year);
  myCursor.forEach(printjson);
})</pre>
</div>
<p>The result is a list of the 5 closest postcodes to the top selling home each year:</p>
<div class="highlight highlight-source-js">
<pre>{
  <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">1995</span>,
  <span class="pl-s"><span class="pl-pds">"</span>neighbours<span class="pl-pds">"</span></span><span class="pl-k">:</span> [
    <span class="pl-s"><span class="pl-pds">"</span>SL6 2NL<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>SL6 2JL<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>SL6 2NB<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>SL6 2JN<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>SL6 2NA<span class="pl-pds">"</span></span>
  ]
}

...

{
  <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">2015</span>,
  <span class="pl-s"><span class="pl-pds">"</span>neighbours<span class="pl-pds">"</span></span><span class="pl-k">:</span> [
    <span class="pl-s"><span class="pl-pds">"</span>SL6 9XB<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>SL6 9XL<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>SL6 9UE<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>SL6 9UB<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>SL6 9UD<span class="pl-pds">"</span></span>
  ]
}</pre>
</div>
<h2>
<a id="user-content-bonus-query--for-those-choosing-a-school" class="anchor" href="#bonus-query--for-those-choosing-a-school" aria-hidden="true"><span class="octicon octicon-link"></span></a>Bonus Query – For Those Choosing a School</h2>
<p>There&#8217;s often a correlation between the house prices near a school and that school&#8217;s performance. So, if you were considering a specific school then it might make sense to check house prices in the area surrounding that school. </p>
<p>The following pipeline will find house price statistics, by year, for all postcodes within a 3 km radius of the school – which is located at coordinates (51.5156725, -0.727387):</p>
<div class="highlight highlight-source-js">
<pre>db.postcodes.aggregate([
      {
        $geoNear<span class="pl-k">:</span>
        {
          near<span class="pl-k">:</span> 
          {
            <span class="pl-s"><span class="pl-pds">"</span>type<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Point<span class="pl-pds">"</span></span>,
            <span class="pl-s"><span class="pl-pds">"</span>coordinates<span class="pl-pds">"</span></span><span class="pl-k">:</span> [
              <span class="pl-c1">51.5156725</span>,
              <span class="pl-k">-</span><span class="pl-c1">0.727387</span>
            ]},
          distanceField<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>distance<span class="pl-pds">"</span></span>,
          num<span class="pl-k">:</span> <span class="pl-c1">10000</span>,
          maxDistance<span class="pl-k">:</span> <span class="pl-c1">3000</span>,
          spherical<span class="pl-k">:</span> <span class="pl-c1">true</span>
        }
      },
      {
        $lookup<span class="pl-k">:</span> {
          from<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>homeSales<span class="pl-pds">"</span></span>,
          localField<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>postcode<span class="pl-pds">"</span></span>,
          foreignField<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>address.postcode<span class="pl-pds">"</span></span>,
          as<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>priceData<span class="pl-pds">"</span></span>
        }
      },
      {
        $unwind<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$priceData<span class="pl-pds">"</span></span>
      },

      {
        $group<span class="pl-k">:</span> 
        {
          _id<span class="pl-k">:</span> {$year<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$priceData.date<span class="pl-pds">"</span></span>},
          highestPrice<span class="pl-k">:</span> {$max<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$priceData.amount<span class="pl-pds">"</span></span>},
          lowestPrice<span class="pl-k">:</span> {$min<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$priceData.amount<span class="pl-pds">"</span></span>},
          averagePrice<span class="pl-k">:</span> {$avg<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$priceData.amount<span class="pl-pds">"</span></span>},
          priceStdDev<span class="pl-k">:</span> {$stdDevPop<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$priceData.amount<span class="pl-pds">"</span></span>}
        }
      },
      {
        $project<span class="pl-k">:</span>
        {
          _id<span class="pl-k">:</span> <span class="pl-c1">0</span>,
          Year<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span>,
          highestPrice<span class="pl-k">:</span> <span class="pl-c1">1</span>,
          lowestPrice<span class="pl-k">:</span> <span class="pl-c1">1</span>,
          averagePrice<span class="pl-k">:</span> {$trunc<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$averagePrice<span class="pl-pds">"</span></span>},
          priceStdDev<span class="pl-k">:</span> {$trunc<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$priceStdDev<span class="pl-pds">"</span></span>}
        }
      },
      {
        $sort<span class="pl-k">:</span> 
        {
          <span class="pl-s"><span class="pl-pds">"</span>Year<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-k">-</span><span class="pl-c1">1</span>
        }
      }
    ]);</pre>
</div>
<div class="highlight highlight-source-js">
<pre>{
  <span class="pl-s"><span class="pl-pds">"</span>highestPrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">1350000</span>,
  <span class="pl-s"><span class="pl-pds">"</span>lowestPrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">125000</span>,
  <span class="pl-s"><span class="pl-pds">"</span>averagePrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">410593</span>,
  <span class="pl-s"><span class="pl-pds">"</span>priceStdDev<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">182358</span>,
  <span class="pl-s"><span class="pl-pds">"</span>Year<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">2015</span>
},
...
{
  <span class="pl-s"><span class="pl-pds">"</span>highestPrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">930000</span>,
  <span class="pl-s"><span class="pl-pds">"</span>lowestPrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">12000</span>,
  <span class="pl-s"><span class="pl-pds">"</span>averagePrice<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">103455</span>,
  <span class="pl-s"><span class="pl-pds">"</span>priceStdDev<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">68615</span>,
  <span class="pl-s"><span class="pl-pds">"</span>Year<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">1995</span>
}</pre>
</div>
<h2>
<a id="user-content-limitations" class="anchor" href="#limitations" aria-hidden="true"><span class="octicon octicon-link"></span></a>Limitations</h2>
<p>As seen, it’s possible to build up sophisticated analytical queries using the enhanced aggregation features – especially when pipelines are combined with a little application or scripting glue. </p>
<p>Some limitations that you may meet include:</p>
<ul>
<li>
<code>$geoNear</code> can only be used as the first stage in the pipeline</li>
<li>
<code>$lookup</code> only supports equality for the match and the equality has to be between a single key from each collection</li>
<li>The right-collection for <code>$lookup</code> cannot be sharded</li>
<li>The pipeline is linear; there are no forks and once data has been aggregated, the lost details can&#8217;t be reused later in the pipeline (this is why writing results to a new collection using <code>$out</code> can be helpful)</li>
<li>One can remove information at each stage but it&#8217;s impossible to add new raw data (other than through <code>$lookup</code>)</li>
<li>Indexes are only used for the beginning stages of the pipeline (and right tables in any subsequent <code>$lookup</code>)</li>
<li>
<code>$out</code> can only be used in the final stage of the pipeline</li>
</ul>
<h2>
<a id="user-content-when-to-use-full-data-visualization-solutions" class="anchor" href="#when-to-use-full-data-visualization-solutions" aria-hidden="true"><span class="octicon octicon-link"></span></a>When to Use Full Data Visualization Solutions</h2>
<p>A lot can be achieved directly in the database – especially when augmented with a small amount of code. So when would it make sense to use a BI visualization tool such as Tableau. The capabilities will vary from product to product but some general considerations are given here:</p>
<ul>
<li>
<strong>Visualization</strong> – displaying information in graphs and on maps (rather than in JSON result sets) makes it much simpler for the human mind to see patterns and draw conclusions from the data (see Figure 1 which is based on the same data set used earlier and graphically shows the highest home sale price by location and year)</li>
<li>
<strong>Multiple Data Sources</strong> – combining data from multiple sources (data blending); for example from a MongoDB database and an Excel spreadsheet can greatly broaden the context of reports</li>
<li>
<strong>Interactivity</strong> – visualization tools make it simple to create interactive queries/dashboards where business user can graphically tweak parameters to get precise results and test theories</li>
<li>
<strong>Skills</strong> – performing all of the analytics directly in MongoDB requires knowledge of the MongoDB Query Language and possibly some basic coding skills. Using the visualization tools is analogous to using intermediate features in Microsoft Excel such as pivot tables and graphs and so it opens up the ability to analyze the data to a broader set of users in the organization</li>
<li>
<strong>Extra functions</strong> – for example, the ability to add trend lines to a chart</li>
</ul>
<p><a href="https://camo.githubusercontent.com/c06051cc9b7415379160844df37fd39da4c75e38/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f5461626c6561755f4d6f6e676f44425f446174612e706e67" target="_blank"><img decoding="async" src="https://camo.githubusercontent.com/c06051cc9b7415379160844df37fd39da4c75e38/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f5461626c6561755f4d6f6e676f44425f446174612e706e67" alt="MongoDB Data Visualized in a Tableau Map" title="MongoDB Data Visualized in a Tableau Map" data-canonical-src="http://clusterdb.com/upload/Tableau_MongoDB_Data.png" style="max-width:100%;"></a><br />
<em>Figure 1: MongoDB Data Visualized in a Tableau Map</em></p>
<p>MongoDB 3.2 introduces the MongoDB Connector for BI which allows Business Intelligence tools such as Tableau to access data from MongoDB using SQL – opening up a range of new options for performing analytics on live data.</p>
<h2>
<a id="user-content-next-steps" class="anchor" href="#next-steps" aria-hidden="true"><span class="octicon octicon-link"></span></a>Next Steps</h2>
<p>To learn more about what&#8217;s coming up in MongoDB 3.2, register for the <a href="https://www.mongodb.com/webinar/whats-new-in-mongodb-3-2">What&#8217;s new in MongoDB 3.2 webinar</a> and review the <a href="https://docs.mongodb.org/manual/release-notes/3.2/">MongoDB 3.2 release notes</a>.</p>
<p>There&#8217;s a <a href="https://www.mongodb.com/presentations/webinar-joins-and-other-aggregation-enhancements-coming-in-mongodb-3-2" title="Webinar: Joins and Other Aggregation Enhancements Coming in MongoDB 3.2">webinar recording</a> explaining more about <code>$lookup</code> and the other aggregation features.</p>
<p>To get the best understanding of the new features then you should experiment with the software which is available in the MongoDB 3.2 (not for production) download – to use the new <code>$lookup</code> aggregation theMongoDB Enterprise Advanced download should be used.</p>
<p>The reason MongoDB releases development releases is to give the community a chance to try out the new software – and we hope that you&#8217;ll give us feedback, whether it be by joining the <a href="https://www.mongodb.com/blog/post/announcing-the-mongodb-3-2-bug-hunt">MongoDB 3.2 bug hunt</a> or commenting on this post.</p>
</article>
<p></body></html></p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/joins-and-other-aggregation-enhancements-in-mongodb-3-2/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Document Validation &#8211; Adding Just the Right Amount of Control Over Your MongoDB Documents</title>
		<link>/mongodb/document-validation-adding-just-the-right-amount-of-control-over-your-mongodb-documents</link>
					<comments>/mongodb/document-validation-adding-just-the-right-amount-of-control-over-your-mongodb-documents#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 06 Nov 2015 15:32:59 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[document]]></category>
		<category><![CDATA[Document Validation]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB 3.2]]></category>
		<guid isPermaLink="false">/?p=4130</guid>

					<description><![CDATA[This post looks at Document Validation, a new feature in MongoDB 3.2. It introduces the feature together with its benefits and then goes on to step through a tutorial on how to introduce validation to an existing, live MongoDB deployment. This material was orginally published on the MongoDB blog. Disclaimer MongoDB&#8217;s future product plans are]]></description>
										<content:encoded><![CDATA[<p><body></p>
<article class="markdown-body">
<p>This post looks at Document Validation, a new feature in MongoDB 3.2. It introduces the feature together with its benefits and then goes on to step through a tutorial on how to introduce validation to an existing, live MongoDB deployment. This material was orginally published on the <a href="https://www.mongodb.com/blog/post/document-validation-part-1-adding-just-the-right-amount-of-control-over-your-documents" title="Document Validation - Adding Just the Right Amount of Control Over Your MongoDB Documents">MongoDB blog</a>.</p>
<h3>
<a id="user-content-disclaimer" class="anchor" href="#disclaimer" aria-hidden="true"><span class="octicon octicon-link"></span></a>Disclaimer</h3>
<p>MongoDB&#8217;s future product plans are for informational purposes only. MongoDB&#8217;s plans may change and you should not rely on them for delivery of a specific feature at a specific time.</p>
<h3>
<a id="user-content-introduction" class="anchor" href="#introduction" aria-hidden="true"><span class="octicon octicon-link"></span></a>Introduction</h3>
<p>One of MongoDB’s primary attractions for developers is that it gives them the ability to start application development without first needing to define a formal schema. Operations teams appreciate the fact that they don&#8217;t need to perform a time-consuming schema upgrade operation every time the developers need to store a different attribute (as an example, <a href="https://www.mongodb.com/customers/weather-channel" title="The Weather Channel is now able to launch new features in hours whereas it used to take weeks">The Weather Channel is now able to launch new features in hours whereas it used to take weeks</a>. For business leaders, the application gets launched much faster, and new features can be rolled out more frequently. MongoDB powers agility.</p>
<p>Many projects reach a point where it&#8217;s necessary to enforce rules on what&#8217;s being stored in the database – for example, that for any document in a particular collection, you can be assured that certain attributes are present. Reasons for this include:</p>
<ul>
<li>Different development teams working with the same data; each one needing to know what they can expect to find in a particular collection</li>
<li>Development teams working on different applications, spread over multiple sites means that a clear understanding of shared data is important</li>
<li>Development teams from different companies where misunderstandings about what data should be present can lead to issues</li>
</ul>
<p>As an example, an e-commerce website may centralize a product catalog feed from each of its vendors into a single collection. If one of the vendors alters the format of its product catalog, the global catalog search could fail.</p>
<p>This has resulted in developers building their own validation logic &#8211; either with the application code (possibly multiple times for different applications) or by adding middleware such as <a href="http://mongoosejs.com/" title="elegant mongodb object modeling for node.js">Mongoose</a>.</p>
<p>If the database doesn’t enforce rules about the data, development teams need to implement this logic in their applications. However, use of multiple development languages makes it hard to add a validation layer across multiple applications.</p>
<p>To address the challenges discussed above, while at the same time maintaining the benefits of a dynamic schema, MongoDB 3.2 introduces document validation.</p>
<h3>
<a id="user-content-validating-documents-in-mongodb-32" class="anchor" href="#validating-documents-in-mongodb-32" aria-hidden="true"><span class="octicon octicon-link"></span></a>Validating Documents in MongoDB 3.2</h3>
<p>Note that at the time of writing, MongoDB 3.2 is not yet released but this functionality can be tried out in <a href="https://docs.mongodb.org/master/release-notes/3.2/" title="MongoDB 3.2 Documentation">MongoDB 3.2</a> <strong>which is available for testing only, not production</strong>.</p>
<p>Document Validation provides significant flexibility to customize which parts of the documents are <strong>and are not</strong> validated for any collection. For any key it might be appropriate to check:</p>
<ul>
<li>That a key exists</li>
<li>If a key does exist, is it of the correct type</li>
<li>That the value is in a particular format (e.g., regular expressions can be used to check if the contents of the string matches a particular pattern)</li>
<li>That the value falls within a given range</li>
</ul>
<p>Further, it may be necessary to combine these checks – for example that the document contains the user&#8217;s name and either their email address or phone number, and if the email address does exist, then it must be correctly formed.</p>
<p>Adding the validation checks to a collection is very intuitive to any developer or DBA familiar with MongoDB as it uses the same expression syntax as a <code>find</code> query to search the database. As an example, the following snippet adds validations to the <code>contacts</code> collection that validates:</p>
<ul>
<li>The year of birth is no later than 1994</li>
<li>The document contains a phone number and/or an email address </li>
<li>When present, the phone number and email addresses are strings</li>
</ul>
<div class="highlight highlight-source-js">
<pre>db.runCommand({
   collMod<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>contacts<span class="pl-pds">"</span></span>,
   validator<span class="pl-k">:</span> { 
      $and<span class="pl-k">:</span> [
        {year_of_birth<span class="pl-k">:</span> {$lte<span class="pl-k">:</span> <span class="pl-c1">1994</span>}},
        {$or<span class="pl-k">:</span> [ 
                  {phone<span class="pl-k">:</span> { $type<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>string<span class="pl-pds">"</span></span>}}, 
                  {email<span class="pl-k">:</span> { $type<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>string<span class="pl-pds">"</span></span>}}
              ]}]
    }})</pre>
</div>
<h3>
<a id="user-content-when-and-how-to-add-document-validation" class="anchor" href="#when-and-how-to-add-document-validation" aria-hidden="true"><span class="octicon octicon-link"></span></a>When and How to Add Document Validation</h3>
<p>Proponents of the waterfall development processes would assert that all of the validations should be added right at the start of the project – certainly before going into production. This is possible, but in more agile approaches, the first version may deploy with no validations and future releases will add new data and checks. Fortunately, MongoDB 3.2 provides a great deal of flexibility in this area. </p>
<p>For existing data, we want to allow the application to continue to operate as we introduce validation into our collections. Therefore, we want to allow updates and simply log failed validations so we can take corrective measures separately if necessary, or take no action.</p>
<p>For new data, we want to ensure the data is valid and therefore return an error if the validation fails.</p>
<p>For any collection, developers or the DBA can choose to specify validation rules for each collection as well as indicating whether failed validations result in a hard error or just a warning – Table 1 shows the available permutations.</p>
<p><a href="https://camo.githubusercontent.com/7a2ba719204606a07e202de4d1bee8972f5e7726/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f746162782e706e67" target="_blank"><img decoding="async" src="https://camo.githubusercontent.com/7a2ba719204606a07e202de4d1bee8972f5e7726/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f746162782e706e67" alt="Configuration options for controlling how document validations are applied to a collection" data-canonical-src="http://clusterdb.com/upload/tabx.png" style="max-width:100%;"></a></p>
<p><em>Table 1: Configuration Options for Document Validation</em></p>
<p>Figure 1 illustrates one possible timeline for how the application is developed.</p>
<p><a href="https://camo.githubusercontent.com/48cc829a4d7298a7bf6310c9bce926b2661630b3/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f496e74726f647563696e675f646f63756d656e745f76616c69646174696f6e732e706e67" target="_blank"><img decoding="async" src="https://camo.githubusercontent.com/48cc829a4d7298a7bf6310c9bce926b2661630b3/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f496e74726f647563696e675f646f63756d656e745f76616c69646174696f6e732e706e67" alt="Lifecycle for introducing document validation" data-canonical-src="http://clusterdb.com/upload/Introducing_document_validations.png" style="max-width:100%;"></a></p>
<p><em>Figure 1: Aligning document validation with application lifecycle</em></p>
<p>Of course, as applications evolve they require additional pieces of data and it will often make sense to add to the documentat validation rules to check that this data is always included. Figure 2 illustrates an example timeline of how this could be managed.</p>
<p><a href="https://camo.githubusercontent.com/58012ff5b68410c0b954c6d3db0a28bbb2bb8308/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f457874656e64696e675f646f63756d656e745f76616c69646174696f6e732e706e67" target="_blank"><img decoding="async" src="https://camo.githubusercontent.com/58012ff5b68410c0b954c6d3db0a28bbb2bb8308/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f457874656e64696e675f646f63756d656e745f76616c69646174696f6e732e706e67" alt="Introducing New Data Together with Validations" title="Introducing New Data Together with Validations" data-canonical-src="http://clusterdb.com/upload/Extending_document_validations.png" style="max-width:100%;"></a></p>
<p><em>Figure 2: Introducing New Data Together with Validations</em></p>
<h3>
<a id="user-content-coping-with-multiple-schema-versions" class="anchor" href="#coping-with-multiple-schema-versions" aria-hidden="true"><span class="octicon octicon-link"></span></a>Coping with Multiple Schema Versions</h3>
<p>A tricky problem to solve with RDBMSs is the versioning of data models; with MongoDB it&#8217;s very straight-forward to set up validations that can cope with different versions of documents, with each version having a different set of checks applied. In the example validation checks below, the following logic is applied:</p>
<ul>
<li>If the document is unversioned (possibly dating to the time before validations were added), then no checks are applied</li>
<li>For version 1, the document is checked to make sure that the <code>name</code> key exists</li>
<li>For version 2 documents, the type of the <code>name</code> key is also validated to ensure that it is a string</li>
</ul>
<div class="highlight highlight-source-js">
<pre>db.runCommand({
   collMod<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>contacts<span class="pl-pds">"</span></span>,
   validator<span class="pl-k">:</span>
     {$or<span class="pl-k">:</span> [{version<span class="pl-k">:</span> {<span class="pl-s"><span class="pl-pds">"</span>$exists<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">false</span>}},
            {version<span class="pl-k">:</span> <span class="pl-c1">1</span>,
             $and<span class="pl-k">:</span> [{Name<span class="pl-k">:</span> {<span class="pl-s"><span class="pl-pds">"</span>$exists<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">true</span>}}]
            },
            {version<span class="pl-k">:</span> <span class="pl-c1">2</span>,
             $and<span class="pl-k">:</span> [{Name<span class="pl-k">:</span> {<span class="pl-s"><span class="pl-pds">"</span>$exists<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">true</span>, <span class="pl-s"><span class="pl-pds">"</span>$type<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">2</span>}}]
            }
          ]
      } 
})</pre>
</div>
<p>In this way, multiple versions of documents can exist within the same collection, and the application can lazily up-version them over time. Note that the <code>version</code> attribute is user-defined.</p>
<h3>
<a id="user-content-document-validation-limitations-in-mongodb-32" class="anchor" href="#document-validation-limitations-in-mongodb-32" aria-hidden="true"><span class="octicon octicon-link"></span></a>Document Validation Limitations in MongoDB 3.2</h3>
<p>This is the first release of Document Validation and so it&#8217;s inevitable that there are still some things that would be great to add:</p>
<ul>
<li>The current error message is very generic and doesn&#8217;t pick out which part of your document failed validation (note that the validation rule for a collection may check several things across many attributes). <a href="https://jira.mongodb.org/browse/SERVER-20547">Jira ticket</a>
</li>
<li>The validation checks cannot compare one key&#8217;s value against another (whether in the same or different documents). For example <code>{salary: {$gte: startingSalary}}</code> is not possible. <a href="https://jira.mongodb.org/browse/SERVER-2702">Jira ticket</a>
</li>
<li>It is the application or DBA&#8217;s responsibility to bring legacy data into compliance with new rules (there are no audits or tools) &#8211; the tutorial in this post attempts to show how this can be done.</li>
</ul>
<h3>
<a id="user-content-where-mongodb-document-validation-excels-vs-rdbmss" class="anchor" href="#where-mongodb-document-validation-excels-vs-rdbmss" aria-hidden="true"><span class="octicon octicon-link"></span></a>Where MongoDB Document Validation Excels (vs. RDBMSs)</h3>
<p>In MongoDB, Document Validation is simple to set up. There is no need for stored procedures – which for many types of validation would be required in an RDBMS – and because the familiar MongoDB query language is used, there is no new syntax to learn.</p>
<p>The functionality is very flexible and it can enforce constraints on as little or as much of the schema as required. You get the best of both worlds – a dynamic schema for rapidly changing, polymorphic data, with the option to enforce strict validation checks against specific attributes from the onset of your project, or much later on. If you initially have no validations defined, they can still be added later – even once in production, across thousand of servers.</p>
<p>It is always a concern whether adding extra checks will impact the performance of the system; in our tests, document validation adds a negligible overhead.</p>
<h3>
<a id="user-content-so-is-all-data-validation-now-done-in-the-database" class="anchor" href="#so-is-all-data-validation-now-done-in-the-database" aria-hidden="true"><span class="octicon octicon-link"></span></a>So, is all Data Validation Now Done in the Database?</h3>
<p>The answer is &#8216;probably not&#8217; – either because there&#8217;s a limit to what can be done in the database or because there will always be a more appropriate place for some checks. Here are some areas to consider:</p>
<ul>
<li>For a good user-experience, checks should be made as high up the stack as is sensible. For example, the format of an entered email address should be first checked in the browser rather than waiting for the request to be processed and an attempt made to write it to the database.</li>
<li>Any validations which need to compare values between keys, other documents, or external information cannot currently be implemented within the database.</li>
<li>Many checks are best made within the application&#8217;s business logic – for example &#8220;is this user allowed to use these services in their home country&#8221;; the checks in the database are primarily there to protect against coding errors.</li>
<li>If you need information on <strong>why</strong> the document failed validation then the application will need to check against each of the sub-rules within collection&#8217;s validation rule as the error message will not currently give this level of detail.</li>
</ul>
<h3>
<a id="user-content-tutorial" class="anchor" href="#tutorial" aria-hidden="true"><span class="octicon octicon-link"></span></a>Tutorial</h3>
<p>The intent of this section is to step you through exactly how document validation can be introduced into an existing production deployment in such a way that there is no impact to your users. It covers:</p>
<ul>
<li>Setting up some test data (not needed for a real deployment)</li>
<li>Using MongoDB Compass and the <code>mongo</code> shell to reverse engineer the de facto data model and identify anomalies in the existing documents</li>
<li>Defining the appropriate document validation rules</li>
<li>Preventing new documents being added which don’t follow the new rules</li>
<li>Bring existing documents “up to spec” against the new rules</li>
</ul>
<p>This section looks at taking an existing, deployed database which currently has no document validations defined. It steps through understanding what the current document structure looks like; deciding on what rules to add and then rolling out those new rules.</p>
<p>As a pre-step add some data to the database (obviously, this isn&#8217;t needed if working with your real deployment).</p>
<div class="highlight highlight-source-js">
<pre>use clusterdb;
db.dropDatabase();
use clusterdb();
db.inventory.insert({ <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>sku<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span>, 
    <span class="pl-s"><span class="pl-pds">"</span>description<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>product 1<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>instock<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-c1">120</span> });
db.inventory.insert({ <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">"</span>sku<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>def<span class="pl-pds">"</span></span>, 
    <span class="pl-s"><span class="pl-pds">"</span>description<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>product 2<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>instock<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-c1">80</span> });
db.inventory.insert({ <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-c1">3</span>, <span class="pl-s"><span class="pl-pds">"</span>sku<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>ijk<span class="pl-pds">"</span></span>, 
    <span class="pl-s"><span class="pl-pds">"</span>description<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>product 3<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>instock<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-c1">60</span> });
db.inventory.insert({ <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-c1">4</span>, <span class="pl-s"><span class="pl-pds">"</span>sku<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>jkl<span class="pl-pds">"</span></span>, 
    <span class="pl-s"><span class="pl-pds">"</span>description<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>product 4<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>instock<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-c1">70</span> });
db.inventory.insert({ <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-c1">5</span>, <span class="pl-s"><span class="pl-pds">"</span>sku<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-c1">null</span>, 
    <span class="pl-s"><span class="pl-pds">"</span>description<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Incomplete<span class="pl-pds">"</span></span> });
db.inventory.insert({ <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-c1">6</span> });

<span class="pl-k">for</span> (i<span class="pl-k">=</span><span class="pl-c1">1000</span>; i<span class="pl-k">&lt;</span><span class="pl-c1">2000</span>; i<span class="pl-k">++</span>) {
  db.orders.insert({
    _id<span class="pl-k">:</span> i,
    item<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span>, 
    price<span class="pl-k">:</span> i <span class="pl-k">%</span> <span class="pl-c1">50</span>,
    quantity<span class="pl-k">:</span> i <span class="pl-k">%</span> <span class="pl-c1">5</span>
  });
};

<span class="pl-k">for</span> (i<span class="pl-k">=</span><span class="pl-c1">2000</span>; i<span class="pl-k">&lt;</span><span class="pl-c1">3000</span>; i<span class="pl-k">++</span>) {
  db.orders.insert({
    _id<span class="pl-k">:</span> i,
    item<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>jkl<span class="pl-pds">"</span></span>, 
    price<span class="pl-k">:</span> i <span class="pl-k">%</span> <span class="pl-c1">30</span>,
    quantity<span class="pl-k">:</span> <span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">10</span> <span class="pl-k">*</span> <span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()) <span class="pl-k">+</span> <span class="pl-c1">1</span>
  });
};

<span class="pl-k">for</span> (i<span class="pl-k">=</span><span class="pl-c1">3000</span>; i<span class="pl-k">&lt;</span><span class="pl-c1">3200</span>; i<span class="pl-k">++</span>) {
  db.orders.insert({
    _id<span class="pl-k">:</span> i,
    price<span class="pl-k">:</span> i <span class="pl-k">%</span> <span class="pl-c1">30</span>,
    quantity<span class="pl-k">:</span> <span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">10</span> <span class="pl-k">*</span> <span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()) <span class="pl-k">+</span> <span class="pl-c1">1</span>
  });
};

<span class="pl-k">for</span> (i<span class="pl-k">=</span><span class="pl-c1">3200</span>; i<span class="pl-k">&lt;</span><span class="pl-c1">3500</span>; i<span class="pl-k">++</span>) {
  db.orders.insert({
    _id<span class="pl-k">:</span> i,
    item<span class="pl-k">:</span> <span class="pl-c1">null</span>,
    price<span class="pl-k">:</span> i <span class="pl-k">%</span> <span class="pl-c1">30</span>,
    quantity<span class="pl-k">:</span> <span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">10</span> <span class="pl-k">*</span> <span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()) <span class="pl-k">+</span> <span class="pl-c1">1</span>
  });
};

<span class="pl-k">for</span> (i<span class="pl-k">=</span><span class="pl-c1">3500</span>; i<span class="pl-k">&lt;</span><span class="pl-c1">4000</span>; i<span class="pl-k">++</span>) {
  db.orders.insert({
    _id<span class="pl-k">:</span> i,
    item<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span>,
    price<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>free<span class="pl-pds">"</span></span>,
    quantity<span class="pl-k">:</span> <span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">10</span> <span class="pl-k">*</span> <span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()) <span class="pl-k">+</span> <span class="pl-c1">1</span>
  });
};

<span class="pl-k">for</span> (i<span class="pl-k">=</span><span class="pl-c1">4000</span>; i<span class="pl-k">&lt;</span><span class="pl-c1">4250</span>; i<span class="pl-k">++</span>) {
  db.orders.insert({
    _id<span class="pl-k">:</span> i,
    item<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span>,
    price<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>if you have to ask....<span class="pl-pds">"</span></span>,
    quantity<span class="pl-k">:</span> <span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(<span class="pl-c1">10</span> <span class="pl-k">*</span> <span class="pl-c1">Math</span>.<span class="pl-c1">random</span>()) <span class="pl-k">+</span> <span class="pl-c1">1</span>
  });
};</pre>
</div>
<p>The easiest way to start understanding the de facto schema for your database is to use MongoDB Compass. Simply connect Compass to your <code>mongod</code> (or <code>mongos</code> if you&#8217;re using sharding) and select the database/collection you&#8217;d like to look into. To see MongoDB Compass in action – view this <a href="https://www.google.com/url?q=https://youtu.be/3w9HVFh1hRs">demo video</a>.</p>
<p>As shown in Figure 3, there are <strong>typically</strong> four keys in each document from the <code>clusterdb.orders</code> table:</p>
<ul>
<li>
<code>_id</code> is  always present and is a number</li>
<li>
<code>item</code> is normally present and is a string (either &#8220;abc&#8221; or &#8220;jkl&#8221;) but is occasionally <code>null</code> or missing altogether (undefined)</li>
<li>
<code>price</code> is always present and is in most cases a number (the histogram shows how the values are distributed between 0 and 49) but in some cases it&#8217;s a string</li>
<li>
<code>quantity</code> is always present and is a number</li>
</ul>
<p><a href="https://camo.githubusercontent.com/c6be166af57c3e05bd9178641b3b44e2b09303d1/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f436f6d70617373312e706e67" target="_blank"><img decoding="async" src="https://camo.githubusercontent.com/c6be166af57c3e05bd9178641b3b44e2b09303d1/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f436f6d70617373312e706e67" alt="Viewing the Document Schema using MongoDB Compass" title="Viewing the Document Schema using MongoDB Compass" data-canonical-src="http://clusterdb.com/upload/Compass1.png" style="max-width:100%;"></a></p>
<p><em>Figure 3: Viewing the Document Schema using MongoDB Compass</em></p>
<p>For this tutorial, we&#8217;ll focus on the <code>price</code>. By clicking on the <code>string</code> label, Compass will show us more information about the string content for <code>price</code> &#8211; this is shown in Figure 4.</p>
<p><a href="https://camo.githubusercontent.com/e9c905f6f8c7b0a2e50ae9cd8116072c0d1b9daf/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f436f6d70617373322e706e67" target="_blank"><img decoding="async" src="https://camo.githubusercontent.com/e9c905f6f8c7b0a2e50ae9cd8116072c0d1b9daf/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f436f6d70617373322e706e67" alt="Drilling Down into string Values" title="Drilling Down into string Values" data-canonical-src="http://clusterdb.com/upload/Compass2.png" style="max-width:100%;"></a></p>
<p><em>Figure 4: Drilling Down into string Values</em></p>
<p>Compass shows us that:</p>
<ul>
<li>For those instances of <code>price</code> which are strings, the common values are &#8220;free&#8221; and &#8220;if you have to ask&#8230;.&#8221;. </li>
<li>If you click on one of those values, a query expression is formed and clicking &#8220;Apply&#8221; runs that query and now Compass will show you information only for that subset of documents. For example, where <code>price == "if you have to ask...."</code> (see Figure 5). </li>
<li>By selecting multiple attributes, you can build up fairly complex queries.</li>
<li>The query you build visually is printed at the top so you can easily copy/paste into other contexts like the shell.</li>
</ul>
<p><a href="https://camo.githubusercontent.com/65ae683d19bb485b640b21590bbca8de71bcb208/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f436f6d70617373332e706e67" target="_blank"><img decoding="async" src="https://camo.githubusercontent.com/65ae683d19bb485b640b21590bbca8de71bcb208/687474703a2f2f636c757374657264622e636f6d2f75706c6f61642f436f6d70617373332e706e67" alt="Formulating Search Expressions with MongoDB Compass" title="Formulating Search Expressions with MongoDB Compass" data-canonical-src="http://clusterdb.com/upload/Compass3.png" style="max-width:100%;"></a></p>
<p><em>Figure 5: Formulating Search Expressions with MongoDB Compass</em></p>
<p>If applications are to work with the <code>price</code> from these documents then it would be simpler it it was always set to a numerical value, and so this is something that should be fixed.</p>
<p>Before cleaning up the existing documents, the application should be updated to ensure numerical values are stored in the price field. We can do this by adding a new validation rule to the collection. We want this rule to:</p>
<ul>
<li>Allow changes to existing invalid documents</li>
<li>Prevent inserts of new documents which violate validation rules</li>
<li>Set up a <strong>very</strong> simple document validation rule that checks that <code>price</code> exists and contains a <code>double</code> – see the <a href="http://docs.mongodb.org/master/reference/bson-types/" title="MongoDB BSON types">enumeration of MongoDB BSON types</a> </li>
</ul>
<p>These steps should be run from the <code>mongo</code> shell:</p>
<div class="highlight highlight-source-js">
<pre>db.orders.runCommand(<span class="pl-s"><span class="pl-pds">"</span>collMod<span class="pl-pds">"</span></span>, 
                   {validationLevel<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>moderate<span class="pl-pds">"</span></span>, 
                    validationAction<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>error<span class="pl-pds">"</span></span>});

db.runCommand({collMod<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>orders<span class="pl-pds">"</span></span>, 
               validator<span class="pl-k">:</span> {
                  price<span class="pl-k">:</span> {$exists<span class="pl-k">:</span> <span class="pl-c1">true</span>},
                  price<span class="pl-k">:</span> {$type<span class="pl-k">:</span> <span class="pl-c1">1</span>}
                }
              });</pre>
</div>
<p>The validation rules for this collection can now be checked:</p>
<div class="highlight highlight-source-js">
<pre>db.getCollectionInfos({name<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">"</span>orders<span class="pl-pds">"</span></span>})
[
  {
    <span class="pl-s"><span class="pl-pds">"</span>name<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>orders<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>options<span class="pl-pds">"</span></span><span class="pl-k">:</span> {
      <span class="pl-s"><span class="pl-pds">"</span>validator<span class="pl-pds">"</span></span><span class="pl-k">:</span> {
        <span class="pl-s"><span class="pl-pds">"</span>price<span class="pl-pds">"</span></span><span class="pl-k">:</span> {
          <span class="pl-s"><span class="pl-pds">"</span>$type<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">1</span>
        }
      },
      <span class="pl-s"><span class="pl-pds">"</span>validationLevel<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>moderate<span class="pl-pds">"</span></span>,
      <span class="pl-s"><span class="pl-pds">"</span>validationAction<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>error<span class="pl-pds">"</span></span>
    }
  }
]</pre>
</div>
<p>Now that this has been set up, it&#8217;s possible to check that we can&#8217;t add a new document that breaks the rule:</p>
<div class="highlight highlight-source-js">
<pre>db.orders.insert({
    <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">6666</span>, 
    <span class="pl-s"><span class="pl-pds">"</span>item<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>jkl<span class="pl-pds">"</span></span>, 
    <span class="pl-s"><span class="pl-pds">"</span>price<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>rogue<span class="pl-pds">"</span></span>,
    <span class="pl-s"><span class="pl-pds">"</span>quantity<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">1</span> });

Document failed validation
WriteResult({
  <span class="pl-s"><span class="pl-pds">"</span>nInserted<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">0</span>,
  <span class="pl-s"><span class="pl-pds">"</span>writeError<span class="pl-pds">"</span></span><span class="pl-k">:</span> {
    <span class="pl-s"><span class="pl-pds">"</span>code<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">121</span>,
    <span class="pl-s"><span class="pl-pds">"</span>errmsg<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Document failed validation<span class="pl-pds">"</span></span>
  }
})</pre>
</div>
<p>But it&#8217;s OK to modify an existing document that does break the rule:</p>
<div class="highlight highlight-source-js">
<pre>db.orders.findOne({price<span class="pl-k">:</span> {$type<span class="pl-k">:</span> <span class="pl-c1">2</span>}});

{
  <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">3500</span>,
  <span class="pl-s"><span class="pl-pds">"</span>item<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>abc<span class="pl-pds">"</span></span>,
  <span class="pl-s"><span class="pl-pds">"</span>price<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>free<span class="pl-pds">"</span></span>,
  <span class="pl-s"><span class="pl-pds">"</span>quantity<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">5</span>
}

<span class="pl-k">&gt;</span> db.orders.update(
    {_id<span class="pl-k">:</span> <span class="pl-c1">3500</span>},
    {$set<span class="pl-k">:</span> {quantity<span class="pl-k">:</span> <span class="pl-c1">12</span>}});

Updated <span class="pl-c1">1</span> existing record(s) <span class="pl-k">in</span> 5ms
WriteResult({
  <span class="pl-s"><span class="pl-pds">"</span>nMatched<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">1</span>,
  <span class="pl-s"><span class="pl-pds">"</span>nUpserted<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">0</span>,
  <span class="pl-s"><span class="pl-pds">"</span>nModified<span class="pl-pds">"</span></span><span class="pl-k">:</span> <span class="pl-c1">1</span>
})</pre>
</div>
<p>Now that the application is no longer able to store new documents that break the new rule, it&#8217;s time to clean up the &#8220;legacy&#8221; documents. At this point, it&#8217;s important to point out that Compass works on a random sample of the documents in a collection (this is what allows it to be so quick). To make sure that we&#8217;re fixing <strong>all</strong> of the documents, we check from the <code>mongo</code> shell. As the following commands could consume significant resources, it may make sense to run them on a secondary):</p>
<div class="highlight highlight-source-js">
<pre>secondary<span class="pl-k">&gt;</span> db.orders.aggregate([
    {$match<span class="pl-k">:</span> {
      price<span class="pl-k">:</span> {$type<span class="pl-k">:</span> <span class="pl-c1">2</span>}}},
    {$group<span class="pl-k">:</span> {
      _id<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>$price<span class="pl-pds">"</span></span>, 
      count<span class="pl-k">:</span> {$sum<span class="pl-k">:</span><span class="pl-c1">1</span>}}}
  ])

{ <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>if you have to ask....<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>count<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-c1">250</span> }
{ <span class="pl-s"><span class="pl-pds">"</span>_id<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>free<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>count<span class="pl-pds">"</span></span> <span class="pl-k">:</span> <span class="pl-c1">500</span> }</pre>
</div>
<p>The number of exceptions isn&#8217;t too high and so it is safe to go ahead and fix up the data without consuming too many resources:</p>
<div class="highlight highlight-source-js">
<pre>db.orders.update(
    {price<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">"</span>free<span class="pl-pds">"</span></span>},
    {$set<span class="pl-k">:</span> {price<span class="pl-k">:</span> <span class="pl-c1">0</span>}},
    {multi<span class="pl-k">:</span> <span class="pl-c1">true</span>});

db.orders.update(
    {price<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">"</span>if you have to ask....<span class="pl-pds">"</span></span>},
    {$set<span class="pl-k">:</span> {price<span class="pl-k">:</span> <span class="pl-c1">1000000</span>}},
    {multi<span class="pl-k">:</span> <span class="pl-c1">true</span>});</pre>
</div>
<p>At this point it&#8217;s now safe to enter the strict mode where any inserts or updates will cause an error if the document being stored doesn&#8217;t follow the rules:</p>
<div class="highlight highlight-source-js">
<pre>db.orders.runCommand(<span class="pl-s"><span class="pl-pds">"</span>collMod<span class="pl-pds">"</span></span>, 
                   {validationLevel<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>strict<span class="pl-pds">"</span></span>, 
                    validationAction<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>error<span class="pl-pds">"</span></span>});</pre>
</div>
<h3>
<a id="user-content-next-steps" class="anchor" href="#next-steps" aria-hidden="true"><span class="octicon octicon-link"></span></a>Next Steps</h3>
<p>Hopefully this has given you a sense for what the Document Validation functionality offers and started you thinking about how it could be applied to your application and database. I&#8217;d encourage you to read up more on the topic and these are some great resources:</p>
<ul>
<li><a href="https://www.mongodb.com/presentations/webinar-document-validation-in-mongodb-3-2" title="Webinar: Document Validation in MongoDB 3.2">Webinar: Document Validation in MongoDB 3.2</a></li>
<li><a href="https://docs.mongodb.org/master/release-notes/3.2/#document-validation" title="MongoDB 3.2 documentation for Document Validation">MongoDB 3.2 documentation for Document Validation</a></li>
<li>The best way to really get a feel for the functionality is to try it out for yourself:<a href="https://www.mongodb.org/downloads#development" title="Download MongoDB 3.2">Download MongoDB 3.2</a>
</li>
<li>Feedback is welcomed and we’d encourage you to join the <a href="https://www.mongodb.com/blog/post/announcing-the-mongodb-3-2-bug-hunt">MongoDB 3.2 bug hunt</a>
</li>
<li>
<a href="http://www.eliothorowitz.com/blog/2015/09/11/document-validation-and-what-dynamic-schema-means/" title="Document Validation and What Dynamic Schema Means">Document Validation and What Dynamic Schema Means</a> – Eliot Horowitz. This blog post adds context to why this functionality is being introduced now.</li>
<li>
<a href="https://www.mongodb.com/presentations/data-management-3-bulletproof-data-management" title="Bulletproof Data Management">Bulletproof Data Management</a> – Buzz Moschetti. Great presentation on how to look after your data &#8211; including in earlier versions of MongoDB.</li>
</ul>
</article>
<p></body></html></p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/document-validation-adding-just-the-right-amount-of-control-over-your-mongodb-documents/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Free Webinar: Document Validation in MongoDB 3.2</title>
		<link>/mongodb/free-webinar-document-validation-in-mongodb-3-2</link>
					<comments>/mongodb/free-webinar-document-validation-in-mongodb-3-2#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Mon, 26 Oct 2015 22:27:01 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[3.2]]></category>
		<category><![CDATA[Document Validation]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB 3.2]]></category>
		<guid isPermaLink="false">/?p=4120</guid>

					<description><![CDATA[I’ll be presenting a free webinar on Thursday29th Octover – the new Document Validation feature coming in MongoDB 3.2. Thursday, October 29, 2015 9am PDT &#124; 12pm EDT &#124; 4pm GMT One of MongoDB’s primary attractions for developers is that it gives them the ability to start application development without needing to define a formal, up-front]]></description>
										<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2015/09/Document_Validation_rule.png"><img decoding="async" src="/wp-content/uploads/2015/09/Document_Validation_rule-300x114.png" alt="Defining MongoDB Document Validation Rules" width="300" height="114" class="alignright size-medium wp-image-4110" srcset="/wp-content/uploads/2015/09/Document_Validation_rule-300x114.png 300w, /wp-content/uploads/2015/09/Document_Validation_rule-1024x390.png 1024w, /wp-content/uploads/2015/09/Document_Validation_rule-900x343.png 900w" sizes="(max-width: 300px) 100vw, 300px" /></a>I’ll be presenting a free webinar on Thursday29th Octover – the new Document Validation feature coming in MongoDB 3.2. </p>
<p>Thursday, October 29, 2015<br />
9am PDT | 12pm EDT | 4pm GMT</p>
<p>One of MongoDB’s primary attractions for developers is that it gives them the ability to start application development without needing to define a formal, up-front schema. Operations teams appreciate the fact that they don&#8217;t need to perform a time-consuming schema upgrade operation every time the developers need to store a different attribute.</p>
<p>Some projects reach a point where it&#8217;s necessary to define rules on what&#8217;s being stored in the database. This webinar explains how MongoDB 3.2 allows that document validation work to be performed by the database rather than in the application code.</p>
<p>This webinar focuses on the benefits of using document validation: how to set up the rules using the familiar MongoDB Query Language and how to safely roll it out into an existing, mature production environment.</p>
<p>During the webinar, you will get chance to submit your questions and get them answered by the experts.</p>
<p>The webinar is free but you need to <a href="https://www.mongodb.com/webinar/document-validation-in-mongodb-3-2">register in advance here</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/free-webinar-document-validation-in-mongodb-3-2/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MongoDB Document Validation &#8211; London MUG charts</title>
		<link>/mongodb/mongodb-document-validation-london-mug-charts</link>
					<comments>/mongodb/mongodb-document-validation-london-mug-charts#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Wed, 16 Sep 2015 15:37:48 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[3.2]]></category>
		<category><![CDATA[Database]]></category>
		<category><![CDATA[document]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB 3.2]]></category>
		<guid isPermaLink="false">/?p=4109</guid>

					<description><![CDATA[Last night I preented on the MongoDB 3.2 Documentation Validation feature at the London MongoDB User Group meetup; the charts are shared here. Unfortunately, I didn&#8217;t record the demo and so you&#8217;ll have to grab me at a future MUG if you&#8217;d like to see that! Abstract One of MongoDB’s primary appeals to developers is]]></description>
										<content:encoded><![CDATA[<p>Last night I preented on the MongoDB 3.2 Documentation Validation feature at the <a href="http://www.meetup.com/London-MongoDB-User-Group/events/224606434/" target="_blank">London MongoDB User Group meetup</a>; the charts are shared here. Unfortunately, I didn&#8217;t record the demo and so you&#8217;ll have to grab me at a future MUG if you&#8217;d like to see that!</p>
<p><strong>Abstract</strong></p>
<p>One of MongoDB’s primary appeals to developers is that it gives them the ability to start application development without needing to define a formal, up-front schema. Operations teams appreciate the fact that they don&#8217;t need to perform a time-consuming schema upgrade operation every time the developers need to store a different attribute (as an example, The Weather Channel is now able to launch new features in hours whereas it used to take weeks). For business leaders, the application gets launched much faster, and new features can be rolled out more frequently. MongoDB powers agility. </p>
<p>Some projects reach a point where it&#8217;s necessary to define rules on what&#8217;s being stored in the database – for example, that for any document in a particular collection, you can be assured that certain attributes are present. </p>
<p>To address the challenges discussed above, while at the same time maintaining the benefits of a dynamic schema, MongoDB 3.2 introduces document validation.</p>
<p>There is significant flexibility to customize which parts of the documents are <strong>and are not</strong> validated for any collection.</p>
<p><iframe src="//www.slideshare.net/slideshow/embed_code/key/pRViHhcmzlQYTt" width="600" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> </p>
<div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/andrewjamesmorgan/document-validation-in-mongodb-32" title="Document validation in MongoDB 3.2" target="_blank">Document validation in MongoDB 3.2</a> </strong> from <strong><a href="//www.slideshare.net/andrewjamesmorgan" target="_blank">Andrew Morgan</a></strong> </div>
<p>Please feel free to ask any questions through comments on this post.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/mongodb-document-validation-london-mug-charts/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
