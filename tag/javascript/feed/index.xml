<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>javascript &#8211; Andrew Morgan on Databases</title>
	<atom:link href="./feed/index.html" rel="self" type="application/rss+xml" />
	<link>./../../index.html</link>
	<description>Database technologies - especially around scalability and High Availability</description>
	<lastBuildDate>Wed, 26 Jan 2022 10:30:57 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>Introducing Flexible Sync (Preview) – The Next Iteration of Realm Sync</title>
		<link>./../../mongodb/introducing-flexible-sync-preview-the-next-iteration-of-realm-sync/index.html</link>
					<comments>./../../mongodb/introducing-flexible-sync-preview-the-next-iteration-of-realm-sync/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Wed, 26 Jan 2022 10:30:57 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[Realm]]></category>
		<category><![CDATA[.net]]></category>
		<category><![CDATA[android]]></category>
		<category><![CDATA[ios]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[kotlin]]></category>
		<category><![CDATA[Swift]]></category>
		<guid isPermaLink="false">./../../index.html?p=4651</guid>

					<description><![CDATA[We are excited to announce the public preview of our next version of Realm Sync: Flexible Sync. This new method of syncing puts the power into the hands of the developer. Now, developers can get more granular control over the data synced to user applications with intuitive language-native queries and hierarchical permissions. Introduction Prior to]]></description>
										<content:encoded><![CDATA[<p>We are excited to announce the public preview of our next version of Realm Sync: Flexible Sync. This new method of syncing puts the power into the hands of the developer. Now, developers can get more granular control over the data synced to user applications with intuitive language-native queries and hierarchical permissions.</p>
<p><iframe width=600 height=400 src="https://www.youtube.com/embed/bGaMhy7ns3I" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p>
<h2>Introduction</h2>
<p>Prior to launching the general availability of Realm Sync in February 2021, the Realm team spent countless hours with developers learning how they build best-in-class mobile applications. A common theme emerged—building real-time, offline-first mobile apps require an overwhelming amount of complex, non-differentiating work.</p>
<p>Our <a href="https://www.mongodb.com/developer/how-to/realm-partitioning-strategies/">first version of Realm Sync</a> addressed this pain by abstracting away offline-first, real-time syncing functionality using declarative APIs. It expedited the time-to-market for many developers and worked well for apps where data is static and compartmentalized, or where permissions rarely need to change. But for dynamic apps and complex use cases, developers still had to spend time creating workarounds instead of developing new features. With that in mind, we built the next iteration of Realm Sync: Flexible Sync. Flexible Sync is designed to help developers:</p>
<ul>
<li>Get to market faster: Use intuitive, language-native queries to define the data synced to user applications instead of proprietary concepts.</li>
<li>Optimize real-time collaboration between users: Utilize object-level conflict-resolution logic.</li>
<li>Simplify permissions: Apply role-based logic to applications with an expressive permissions system that groups users into roles on a pe-class or collection basis.</li>
</ul>
<h2>Language-Native Querying</h2>
<p>Flexible Sync’s query-based sync logic is distinctly different from how Realm Sync operates today. The new structure is designed to more closely mirror how developers are used to building sync today—typically using GET requests with query parameters.</p>
<p>One of the primary benefits of Flexible Sync is that it eliminates all the time developers spend determining what query parameters to pass to an endpoint. Instead, the Realm APIs directly integrate with the native querying system on the developer’s choice of platform—for example, a predicate-based query language for iOS, a Fluent query for Android, a string-based query for Javascript, and a LINQ query for .NET.</p>
<p>Under the hood, the Realm Sync thread sends the query to MongoDB Realm (Realm’s cloud offering). MongoDB Realm translates the query to MongoDB’s query language and executes the query against MongoDB Atlas. Atlas then returns the resulting documents. Those documents are then translated into Realm objects, sent down to the Realm client, and stored on disk. The Realm Sync thread keeps a queue of any changes made locally to synced objects—even when offline. As soon as connectivity is reestablished, any changes made to the server-side or client-side are synced down using built-in granular conflict resolution logic. All of this occurs behind the scenes while the developer is interacting with the data. This is the part we’ve heard our users describe as “magic.”</p>
<p>Flexible Sync also enables much more dynamic queries, based on user inputs. Picture a home listing app that allows users to search available properties in a certain area. As users define inputs—only show houses in Dallas, TX that cost less than $300k and have at least three bedrooms—the query parameters can be combined with logical ANDs and ORs to produce increasingly complex queries, and narrow down the search result even further. All query results are combined into a single realm file on the client’s device, which significantly simplifies code required on the client-side and ensures changes to data are synced efficiently and in real time.</p>
<h3>Swift</h3>
<pre><code class="swift">// Set your Schema
class Listing: Object {
    @Persisted(primaryKey: true) var _id: ObjectId
    @Persisted var location: String
    @Persisted var price: Int
    @Persisted var bedrooms: Int
}

// Configure your App and login
let app = App(id: "XXXX")
let user = try! await app.login(credentials:
            .emailPassword(email: "email", password: "password"))

// Set the new Flexible Sync Config and open the Realm
let config = user.flexibleSyncConfiguration()
let realm = try! await Realm(configuration: config, downloadBeforeOpen: .always)

// Create a Query and Add it to your Subscriptions
let subscriptions = realm.subscriptions

try! await subscriptions.write {
    subscriptions.append(QuerySubscription&lt;Listing&gt;(name: "home-search") {
        $0.location == "dallas" &amp;&amp; $0.price &lt; 300000 &amp;&amp; $0.bedrooms &gt;= 3
    })
}

// Now query the local realm and get your home listings - output is 100 listings
// in the results
print(realm.objects(Listing.self).count)

// Remove the subscription - the data is removed from the local device but stays
// on the server
try! await subscriptions.write {
    subscriptions.remove(named: "home-search")
}

// Output is 0 - listings have been removed locally
print(realm.objects(Listing.self).count)
</code></pre>
<h3>Kotlin</h3>
<pre><code class="kotlin">// Set your Schema
open class Listing: ObjectRealm() {
  @PrimaryKey
  @RealmField("_id")
  var id: ObjectId
  var location: String = ""
  var price: Int = 0
  var bedrooms: Int = 0
}

// Configure your App and login
val app = App("&lt;YOUR_APP_ID_HERE&gt;")
val user = app.login(Credentials.emailPassword("email", "password"))

// Set the new Flexible Sync Config and open the Realm
let config = SyncConfiguration.defaultConfig(user)
let realm = Realm.getInstance(config)

// Create a Query and Add it to your Subscriptions
val subscriptions = realm.subscriptions
subscriptions.update { mutableSubscriptions -&gt;
   val sub = Subscription.create(
      "home-search", 
      realm.where&lt;Listing&gt;()
         .equalTo("location", "dallas")
         .lessThan("price", 300_000)
         .greaterThanOrEqual("bedrooms", 3)
   )
   mutableSubscriptions.add(subscription)
}

// Wait for server to accept the new subscription and download data
subscriptions.waitForSynchronization()
realm.refresh()

// Now query the local realm and get your home listings - output is 100 listings 
// in the results
val homes = realm.where&lt;Listing&gt;().count()

// Remove the subscription - the data is removed from the local device but stays 
// on the server
subscriptions.update { mutableSubscriptions -&gt;
   mutableSubscriptions.remove("home-search")
}
subscriptions.waitForSynchronization()
realm.refresh()

// Output is 0 - listings have been removed locally
val homes = realm.where&lt;Listing&gt;().count()
</code></pre>
<h3>.NET</h3>
<pre><code class="csharp">// Set your Schema
class Listing: RealmObject
{
    [PrimaryKey, MapTo("_id")]
    public ObjectId Id { get; set; }
    public string Location { get; set; }
    public int Price { get; set; }
    public int Bedrooms { get; set; }
}

// Configure your App and login
var app = App.Create(YOUR_APP_ID_HERE);
var user = await app.LogInAsync(Credentials.EmailPassword("email", "password"));

// Set the new Flexible Sync Config and open the Realm
var config = new FlexibleSyncConfiguration(user);
var realm = await Realm.GetInstanceAsync(config);

// Create a Query and Add it to your Subscriptions
var dallasQuery = realm.All&lt;Listing&gt;().Where(l =&gt; l.Location == "dallas" &amp;&amp; l.Price &lt; 300_000 &amp;&amp; l.Bedrooms &gt;= 3);
realm.Subscriptions.Update(() =&gt;
{
    realm.Subscriptions.Add(dallasQuery);
});

await realm.Subscriptions.WaitForSynchronizationAsync();

// Now query the local realm and get your home listings - output is 100 listings
// in the results
var numberOfListings = realm.All&lt;Listing&gt;().Count();

// Remove the subscription - the data is removed from the local device but stays
// on the server

realm.Subscriptions.Update(() =&gt;
{
    realm.Subscriptions.Remove(dallasQuery);
});

await realm.Subscriptions.WaitForSynchronizationAsync();

// Output is 0 - listings have been removed locally
numberOfListings = realm.All&lt;Listing&gt;().Count();
</code></pre>
<h3>JavaScript</h3>
<pre><code class="js">import Realm from "realm";

// Set your Schema
const ListingSchema = {
  name: "Listing",
  primaryKey: "_id",
  properties: {
    _id: "objectId",
    location: "string",
    price: "int",
    bedrooms: "int",
  },
};

// Configure your App and login
const app = new Realm.App({ id: YOUR_APP_ID_HERE });
const credentials = Realm.Credentials.emailPassword("email", "password");
const user = await app.logIn(credentials);

// Set the new Flexible Sync Config and open the Realm
const realm = await Realm.open({
  schema: [ListingSchema],
  sync: { user, flexible: true },
});

// Create a Query and Add it to your Subscriptions
await realm.subscriptions.update((mutableSubscriptions) =&gt; {
  mutableSubscriptions.add(
    realm
      .objects(ListingSchema.name)
      .filtered("location = 'dallas' &amp;&amp; price &lt; 300000 &amp;&amp; bedrooms = 3", {
        name: "home-search",
      })
  );
});

// Now query the local realm and get your home listings - output is 100 listings
// in the results
let homes = realm.objects(ListingSchema.name).length;

// Remove the subscription - the data is removed from the local device but stays
// on the server
await realm.subscriptions.update((mutableSubscriptions) =&gt; {
  mutableSubscriptions.removeByName("home-search");
});

// Output is 0 - listings have been removed locally
homes = realm.objects(ListingSchema.name).length;
</code></pre>
<h2>Optimizing for Real-Time Collaboration</h2>
<p>Flexible Sync also enhances query performance and optimizes for real-time user collaboration by treating a single object or document as the smallest entity for synchronization. Flexible Sync allows for Sync Realms to more efficiently share data and for conflict resolution to incorporate changes faster and with less data transfer.</p>
<p>For example, you and a fellow employee are analyzing the remaining tasks for a week. Your coworker wants to see all of the time-intensive tasks remaining (<code>workunits &amp;gt; 5</code>), and you want to see all the tasks you have left for the week (<code>owner == ianward</code>). Your queries will overlap where <code>workunits &amp;gt; 5</code> and <code>owner == ianward</code>. If your coworker notices one of your tasks is marked incorrectly as <code>7 workunits</code> and changes the value to <code>6</code>, you will see the change reflected on your device in real time. Under the hood, the merge algorithm will only sync the changed document instead of the entire set of query results increasing query performance.</p>
<p><img decoding="async" src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Interesecting_Tasks_380cf4962d.png" alt="Venn diagram showing that 2 different queries can share some of the same documents" /></p>
<h2>Permissions</h2>
<p>Whether it’s a company’s internal application or an app on the App Store, permissions are required in almost every application. That’s why we are excited by how seamless Flexible Sync makes applying a document-level permission model when syncing data—meaning synced documents can be limited based on a user’s role.</p>
<p>Consider how a sales organization uses a CRM application. An individual sales representative should only be able to access her own sales pipeline while her manager needs to be able to see the entire region’s sales pipeline. In Flexible Sync, a user’s role will be combined with the client-side query to determine the appropriate result set. For example, when the sales representative above wants to view her deals, she would send a query where <code>opportunities.owner == "EmmaLullo"</code> but when her manager wants to see all the opportunities for their entire team, they would query with opportunities.team == &#8220;West”. If a user sends a much more expansive query, such as querying for all opportunities, then the permissions system would only allow data to be synced for which the user had explicit access.</p>
<pre><code class="json">{
  "Opportunities": {
    "roles": [
        {
                name: "manager", 
                applyWhen: { "%%user.custom_data.isSalesManager": true},
                read: {"team": "%%user.custom_data.teamManager"}
                write: {"team": "%%user.custom_data.teamManager"}
            },
        {
                name: "salesperson",
                applyWhen: {},
                read: {"owner": "%%user.id"}
                write: {"owner": "%%user.id"}
        }
    ]
  },
{
  "Bookings": {
    "roles": [
        {
                name: "accounting", 
                applyWhen: { "%%user.custom_data.isAccounting": true},
                read: true,
                write: true
            },
        {
                name: "sales",
                applyWhen: {},
                read: {"%%user.custom_data.isSales": true},
                write: false
        }
    ]
  }
</code></pre>
<h2>Looking Ahead</h2>
<p>Ultimately, our goal with Flexible Sync is to deliver a sync service that can fit any use case or schema design pattern imaginable without custom code or workarounds. And while we are excited that Flexible Sync is now in preview, we’re nowhere near done.</p>
<p>The Realm Sync team is planning to bring you more query operators and permissions integrations over the course of 2022. Up next we are looking to expose array operators and enable querying on embedded documents, but really, we look to you, our users, to help us drive the roadmap. Submit your ideas and feature requests to our <a href="https://feedback.mongodb.com/forums/923521-realm">feedback portal</a> and ask questions in our <a href="https://www.mongodb.com/community/forums/c/realm/realm-sync/111">Community forum</a>. Happy building!</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mongodb/introducing-flexible-sync-preview-the-next-iteration-of-realm-sync/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>The Modern Application Stack &#8211; Part 5: Using ReactJS, ES6 &#038; JSX to Build a UI (the rise of MERN)</title>
		<link>./../../mongodb/the-modern-application-stack-part-5-using-reactjs-es6-jsx-to-build-a-ui-the-rise-of-mern/index.html</link>
					<comments>./../../mongodb/the-modern-application-stack-part-5-using-reactjs-es6-jsx-to-build-a-ui-the-rise-of-mern/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 24 Feb 2017 11:12:42 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[es6]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[mern]]></category>
		<category><![CDATA[mern stack]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[REACT]]></category>
		<category><![CDATA[reactjs]]></category>
		<guid isPermaLink="false">./../../index.html?p=4393</guid>

					<description><![CDATA[This is the fifth in a series of blog posts examining technologies such as ReactJS that are driving the development of modern web and mobile applications. Modern Application Stack – Part 1: Introducing The MEAN Stack introduced the technologies making up the MEAN (MongoDB, Express, Angular, Node.js) and MERN (MongoDB, Express, React, Node.js) Stacks, why]]></description>
										<content:encoded><![CDATA[<p>This is the fifth in a series of blog posts examining technologies such as <strong>ReactJS</strong> that are driving the development of modern web and mobile applications.</p>
<p><a href="./../../mongodb/modern-application-stack-part-1-introducing-the-mean-stack/index.html"><strong>Modern Application Stack – Part 1: Introducing The MEAN Stack</strong></a> introduced the technologies making up the MEAN (MongoDB, Express, Angular, Node.js) and MERN (MongoDB, Express, React, Node.js) Stacks, why you might want to use them, and how to combine them to build your web application (or your native mobile or desktop app).</p>
<p>The remainder of the series is focussed on working through the end to end steps of building a real (albeit simple) application – <em>MongoPop</em>. <a href="./../../mongodb/mean_stack_2_mongodb_node_js/index.html" title="MongoDB with Node.js"><strong>Part 2: Using MongoDB With Node.js</strong></a> created an environment where we could work with a MongoDB database from Node.js; it also created a simplified interface to the MongoDB Node.js Driver. <a href="htt./../../mongodb/the-modern-application-stack-part-3-building-a-rest-api-using-express-js/index.html" title="Building REST API for MongoDB using Express JS"><strong>Part 3: Building a REST API with Express.js</strong></a> built on Part 2 by using Express.js to add a REST API which will be used by the clients that we implement in the final posts. <a href="./../../mongodb/the-modern-application-stack-part-4-building-a-client-ui-using-angular-2-formerly-angularjs-typescript/index.html" title="Building a Client UI Using Angular 2 &amp; TypeScript"><strong>Part 4: Building a Client UI Using Angular 2 (formerly AngularJS) &amp; TypeScript</strong></a> completed the MEAN stack by adding an Angular 2 client.</p>
<p>This post is similar to <a href="./../../mongodb/the-modern-application-stack-part-4-building-a-client-ui-using-angular-2-formerly-angularjs-typescript/index.html" title="Building an Angular 2 client application">Part 4</a> except that it uses ReactJS rather than Angular to implement a remote web-app client for the <strong>Mongopop</strong> application – completing the full MERN application stack.</p>
<h2>ReactJS (recap)</h2>
<div id="attachment_4395" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2017/02/MERN_Stack.png"><img fetchpriority="high" decoding="async" aria-describedby="caption-attachment-4395" src="./../../wp-content/uploads/2017/02/MERN_Stack-1024x450.png" alt="MERN Stack architecture with React" width="480" height="211" class="size-large wp-image-4395" srcset="./../../wp-content/uploads/2017/02/MERN_Stack-1024x450.png 1024w, ./../../wp-content/uploads/2017/02/MERN_Stack-300x132.png 300w, ./../../wp-content/uploads/2017/02/MERN_Stack-768x338.png 768w, ./../../wp-content/uploads/2017/02/MERN_Stack.png 1819w" sizes="(max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4395" class="wp-caption-text">MERN Stack architecture with React</p></div>
<p><a href="https://facebook.github.io/react/" title="React, ReactJS">React</a> (alternatively referred to as ReactJS), is an up and coming alternative to Angular. It is a JavaScript library, developed by Facebook and Instagram, to build interactive, reactive user interfaces. Like Angular, React breaks the front-end application down into components. Each component can hold its own <em>state_and a parent can pass its state down to its child components (as _properties</em>) and those components can pass changes back to the parent through the use of callback functions. Components can also include regular data members (which are not state or properties) for data which isn&#8217;t rendered.</p>
<p>State variables should be updated using the <code>setState</code> function – this allows ReactJS to calculate which elements of the page need to be refreshed in order to reflect the change. As refreshing the whole page can be an expensive operation, this can represent a significant efficiency and is a big part of what makes React live up to its name as “reactive”.</p>
<p>React components are typically implemented using <a href="https://facebook.github.io/jsx/">JSX</a> – an extension of JavaScript that allows HTML syntax to be embedded within the code.</p>
<p>React is most commonly executed within the browser but it can also be run on the back-end server within Node.js, or as a mobile app using <em>React Native</em>.</p>
<h2>JSX &amp; ReactJS</h2>
<p>It&#8217;s possible to implement ReactJS components using &#8216;pure&#8217; JavaScript (though, we&#8217;ve already seen in this series that it&#8217;s more complicated than that) but it&#8217;s more typical to use <a href="https://facebook.github.io/react/docs/introducing-jsx.html" title="Introducing JSX">JSX</a>. JSX extends the JavaScript syntax to allow HTML and JavaScript expressions to be used in the same code – making the code concise and easy to understand.</p>
<p>Components can be implemented as a single function but in this post a class is used as it offers more options. The following code implements a very simple component:</p>
<pre><code class="js">class HelloMessage extends React.Component {
  render() {
    return &lt;div&gt;Hello {this.props.name}&lt;/div&gt;;
  }
}
</code></pre>
<p>By extending <code>React.Component</code>, we indicate that the class implements a component and that the <code>render()</code> method returns the contents of that component</p>
<p>The enclosing component can pass data down to this component as <em>properties</em> (accessed within the component as <code>this.props</code>); in this case, there is just one – <code>name</code>. JavaScript can be included at any point in the returned HTML by surrounding it with braces <code>{this.props.name}</code>. The enclosing component would include this code within its own <code>render()</code> method, where <code>userName</code> is part of that component&#8217;s state.:</p>
<pre><code class="js">&lt;HelloMessage
name={this.state.userName}
/&gt;
</code></pre>
<p>The <em>state</em> data member for a component should include all of the variable values that are to be rendered (apart from those that have been passed down as properties). State values can be initialized directly in the class&#8217;s constructor function but after that, the <code>setState({userName: "Andrew"})</code> method should be used so that ReactJS knows that any elements containing <code>userName</code> should be rerendered.</p>
<p>JSX gets compiled into JavaScript before it&#8217;s used (this post uses the <a href="https://babeljs.io/" title="Babel JavaScript compiler">Babel compiler</a>) and so there are no special dependencies on the browser.</p>
<h2>Downloading, running, and using the Mongopop ReactJS application</h2>
<p>The compiled ReactJS client code is included as part if the Mongopop package installed in <a href="./../../mongodb/mean_stack_2_mongodb_node_js/index.html" title="Using MongoDB With Node.js">Part 2: Using MongoDB With Node.js</a>.</p>
<p>The back-end application should be installed &amp; run in the same way as in parts 2 &amp; 3:</p>
<pre><code>git clone git@github.com:am-MongoDB/MongoDB-Mongopop.git
cd MongoDB-Mongopop
npm install
npm run express
</code></pre>
<p>Run the ReactJS client by browsing to <code>http://&lt;back-end-server&gt;:3000/react</code>.</p>
<p>Unlike the Angular client, the ReactJS application is developed and built as a separate project, and then compiled results are copied to <code>public/react</code> in the back-end server (this is covered in the next section).</p>
<h2>Build and deploy</h2>
<p>To access the source and build an updated version of the client, a new GitHub repository must be downloaded – <a href="https://github.com/am-MongoDB/MongoDB-Mongopop-ReactJS" title="Mongopop ReactJS client for MongoDB">MongoDB-Mongopop-ReactJS</a>:</p>
<pre><code class="bash">git clone git@github.com:am-MongoDB/MongoDB-Mongopop-ReactJS.git
cd MongoDB-Mongopop-ReactJS
</code></pre>
<p>As with the back-end and the Angular client, <code>package.json</code> includes a list of dependencies as well as scripts:</p>
<pre><code class="js">{
  "name": "mongopop-react-client",
  "version": "0.1.0",
  "private": false,
  "homepage": "http://localhost:3000/react",
  "devDependencies": {
    "react-scripts": "0.8.5"
  },
  "dependencies": {
    "mongodb": "^2.2.20",
    "react": "^15.4.2",
    "react-dom": "^15.4.2"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "eject": "react-scripts eject"
  }
}
</code></pre>
<p>Before running any of the software, the Node.js dependencies (as defined in <code>package.json</code> must be installed into the <code>node_modules</code> directory):</p>
<pre><code>npm install
</code></pre>
<p>To compile the JSX code, start the development server, and run the ReactJS client, run:</p>
<pre><code>export PORT=3030 # As Express is already using 3000 on this machine
npm start
</code></pre>
<p>This should automatically open the application within your browser. Note that the ReactJS code was loaded from a local development server but it will use the real REST API running in the back-end.</p>
<p>Note that when running in this mode, you may get errors when your browser tries accessing the REST API – this is because browsers typically block cross-site scripting. To work around this, install <a href="https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi/related?hl=en-US">this extension from the Google Chrome store</a>.</p>
<p>If you make changes to the ReactJS client and want to include them in the real back-end then build a new, optimized version:</p>
<pre><code>npm run build
</code></pre>
<p>The contents of the <code>MongoDB-Mongopop-ReactJS/build</code> folder should then be copied to <code>MongoDB-Mongopop/public/react</code>.</p>
<p>To see exactly what <code>react-scripts</code> is doing for these operations, review the scripts in <code>node_modules/react-scripts/scripts</code>.</p>
<h2>Component architecture of the Mongopop ReactJS UI</h2>
<p>Most ReactJS applications are built from one or more, nested components – Mongopop is no exception:</p>
<div id="attachment_4396" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2017/02/ReactJS_Components.png"><img decoding="async" aria-describedby="caption-attachment-4396" src="./../../wp-content/uploads/2017/02/ReactJS_Components-744x1024.png" alt="ReactJS components making up the Mongopop client app" width="480" height="661" class="size-large wp-image-4396" srcset="./../../wp-content/uploads/2017/02/ReactJS_Components-744x1024.png 744w, ./../../wp-content/uploads/2017/02/ReactJS_Components-218x300.png 218w, ./../../wp-content/uploads/2017/02/ReactJS_Components-768x1057.png 768w, ./../../wp-content/uploads/2017/02/ReactJS_Components.png 872w" sizes="(max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4396" class="wp-caption-text">ReactJS components making up the Mongopop client app</p></div>
<p>The top-level component (<code>MongoPopContainer</code>) renders the &#8220;Welcome to MongoPop&#8221; heading before delegating the the rest of the page to seven sub-components.</p>
<p><code>MongoPopContainer</code> is implemented by a <a href="https://github.com/am-MongoDB/MongoDB-Mongopop-ReactJS/blob/master/src/App.js" title="Mongopop App.js main React component">JSX class of the same name</a>. The class contains the state variables for any information which must be used by more than one sub-component (e.g. the collection name). It also includes handler functions that will be used by sub-components when they make changes to any state variable passed down. The class implements the <code>render()</code> function which returns the expression that ReactJS must convert to HTML for rendering; in addition to the opening <code>&lt;h1&gt;Welcome to MongoPop&lt;/h1&gt;</code>, it includes an element for each of the sub-components. As part of those element definitions, it passes down state variables (which the sub-component receives as properties):</p>
<pre><code class="js">&lt;CountDocuments
  dataService={this.dataService}
  collection={this.state.MongoDBCollectionName}
/&gt;
</code></pre>
<p>Changes to a data value by a parent component will automatically be propagated to a child – it&#8217;s best practice to have data flow in this direction as much as possible. If a data value is changed by a child <em>and</em> the parent (either directly or as a proxy for one of its other child components) needs to know of the change, then the child triggers an event. That event is processed by a handler registered by the parent – the parent may then explicitly act on the change, but even if it does nothing explicit, the change flows to the other child components.</p>
<p>Each of the sub-components is implemented by its own JSX class – e.g. <a href="https://github.com/am-MongoDB/MongoDB-Mongopop-ReactJS/blob/master/src/count.component.js" title="MongoDB Mongopop React count component">CountDocuments</a>.</p>
<p>Mongopop is a reasonably flat application with only one layer of sub-components below <code>MongoPopContainer</code>, but more complex applications may nest deeper and reuse components.</p>
<p>This table details what data is passed from <code>MongoPopContainer</code> down to each of its children and what data change events are sent back up to <code>MongoPopContainer</code> (and from there, back down to the other children):</p>
<table class='table table-bordered' summary="ReactJS components for Mongopop ReactJS client application">
<caption><strong>Flow of data between ReactJS components</strong></caption>
<thead>
<tr>
<th>Child component</th>
<th>Data passed down</th>
<th>Data changes passed back up</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<pre style="border:0px; background-color:#fff">ServerDetails</pre>
</td>
<td>Data service</td>
<td></td>
</tr>
<tr>
<td >
<pre style="border:0px; background-color:#fff">ConnectionInfo</pre>
</td>
<td>Data service</td>
<td></td>
</tr>
<tr>
<td>
<pre style="border:0px; background-color:#fff">CollectionName</pre>
</td>
<td>Data service</td>
<td>Collection Name</td>
</tr>
<tr>
<td rowspan="2">
<pre style="border:0px; background-color:#fff">AddDocuments</pre>
</td>
<td>Collection Name</td>
<td rowspan="2"></td>
</tr>
<tr>
<td>Data service</td>
</tr>
<tr>
<td rowspan="2">
<pre style="border:0px; background-color:#fff">CountDocuments</pre>
</td>
<td>Collection Name</td>
<td rowspan="2"></td>
</tr>
<tr>
<td>Data service</td>
</tr>
<tr>
<td rowspan="3">
<pre style="border:0px; background-color:#fff">UpdateDocuments</pre>
</td>
<td>Collection Name</td>
<td rowspan="3"></td>
</tr>
<tr>
<td>Data service</td>
</tr>
<tr>
<td>Sample data to play with</td>
</tr>
<tr>
<td rowspan="2">
<pre style="border:0px; background-color:#fff">SampleDocuments</pre>
</td>
<td>Collection Name</td>
<td rowspan="2">Sample data to play with</td>
</tr>
<tr>
<td>Data service</td>
</tr>
</tbody>
</table>
<h2>What are all of these files?</h2>
<p>To recap, the files and folders covered earlier in this series (for the back-end, under <code>MongoDB-Mongopop</code> folder):</p>
<ul>
<li><strong><code>package.json</code></strong>: Instructs the Node.js package manager (<code>npm</code>) what it needs to do; including which dependency packages should be installed</li>
<li><strong><code>node_modues</code></strong>: Directory where <code>npm</code> will install packages</li>
<li><strong><code>node_modues/mongodb</code></strong>: The <a href="https://mongodb.github.io/node-mongodb-native/" title="MongoDB driver for Node.js">MongoDB driver for Node.js</a></li>
<li><strong><code>node_modues/mongodb-core</code></strong>: Low-level MongoDB driver library; available for framework developers (application developers should avoid using it directly)</li>
<li><strong><code>javascripts/db.js</code></strong>: A JavaScript module we&#8217;ve created for use by our Node.js apps (in this series, it will be Express) to access MongoDB; this module in turn uses the MongoDB Node.js driver.</li>
<li><strong><code>config.js</code></strong>: Contains the application–specific configuration options</li>
<li><strong><code>bin/www</code></strong>: The script that starts an Express application; this is invoked by the <code>npm start</code> script within the <code>package.json</code> file. Starts the HTTP server, pointing it to the <code>app</code> module in <code>app.js</code></li>
<li><strong><code>app.js</code></strong>: Defines the main back-end application module (<code>app</code>). Configures:
<ul>
<li>That the application will be run by Express</li>
<li>Which routes there will be &amp; where they are located in the file system (<code>routes</code> directory)</li>
<li>What view engine to use (Jade in this case)</li>
<li>Where to find the <em>views</em> to be used by the view engine (<code>views</code> directory)</li>
<li>What middleware to use (e.g. to parse the JSON received in requests)</li>
<li>Where the static files (which can be read by the remote client) are located (<code>public</code> directory)</li>
<li>Error handler for queries sent to an undefined route</li>
</ul>
</li>
<li><strong><code>views</code></strong>: Directory containing the templates that will be used by the Jade view engine to create the HTML for any pages generated by the Express application (for this application, this is just the error page that&#8217;s used in cases such as mistyped routes (&#8220;404 Page not found&#8221;))</li>
<li><strong><code>routes</code></strong>: Directory containing one JavaScript file for each Express route
<ul>
<li><strong><code>routes/pop.js</code></strong>: Contains the Express application for the <code>/pop</code> route; this is the implementation of the Mongopop REST API. This defines methods for all of the supported route paths.</li>
</ul>
</li>
<li><strong><code>public</code></strong>: Contains all of the static files that must be accessible by a remote client (e.g., our Angular to React apps).</li>
</ul>
<p>In addition, for the ReactJS client application:</p>
<ul>
<li><strong><code>public/react</code></strong> The deployed ReactJS client code; e.g. the JSX code that has been compiled down into vanilla JavaScript</li>
</ul>
<p>More significant for this post are the new files introduced under the <code>MongoDB-Mongopop-ReactJS</code> folder:</p>
<ul>
<li><strong><code>build</code></strong>: Directory containing the compiled and optmized JavaScript (to be copied to the back-end)</li>
<li><strong><code>node-modules</code></strong>: Node.js modules used by the ReactJS client application (as opposed to the Express, server-side Node.js modules)</li>
<li><strong><code>public/index.html</code></strong>: Outer template for the application (includes the <code>root</code>div element)</li>
<li><strong><code>src</code></strong>: Directory JSX source code files we write for the application
<ul>
<li><strong><code>index.js</code></strong>: Top-level JSX for the client; creates the <code>&lt;App /&gt;</code> element as a placeholder to be expanded by App.js </li>
<li><strong><code>App.js</code></strong>: Replaces the <code>&lt;App /&gt;</code> element from <code>index.js</code> with the output from the <code>MongoPopContainer</code> component/class. Includes the rest of the client components</li>
<li><strong><code>X.component.js</code></strong>: Class implementing sub-component X</li>
<li><strong><code>data.service.js</code></strong>: Service used to interact with the back-end REST API (mostly used to access the database)</li>
</ul>
</li>
<li><strong><code>package.json</code></strong>: Instructs the Node.js package manager (<code>npm</code>) what it needs to do; including which dependency packages should be installed</li>
</ul>
<h2>&#8220;Boilerplate&#8221; files and how they get invoked</h2>
<p>If you&#8217;ve already read <a href="./../../mongodb/the-modern-application-stack-part-4-building-a-client-ui-using-angular-2-formerly-angularjs-typescript/index.html" title="Completing the MEAN stack – Mongopop Angular2 client">Part 4: Building a Client UI Using Angular 2 (formerly AngularJS) &amp; TypeScript</a>, you should be relieved to see that far fewer source files are involved before reaching the actual application code:</p>
<div id="attachment_4397" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2017/02/ReactJS_file_relationships.png"><img decoding="async" aria-describedby="caption-attachment-4397" src="./../../wp-content/uploads/2017/02/ReactJS_file_relationships-962x1024.png" alt="Relationships between ReactJS files" width="480" height="511" class="size-large wp-image-4397" srcset="./../../wp-content/uploads/2017/02/ReactJS_file_relationships-962x1024.png 962w, ./../../wp-content/uploads/2017/02/ReactJS_file_relationships-282x300.png 282w, ./../../wp-content/uploads/2017/02/ReactJS_file_relationships-768x817.png 768w, ./../../wp-content/uploads/2017/02/ReactJS_file_relationships.png 1340w" sizes="(max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4397" class="wp-caption-text">Relationships between ReactJS files</p></div>
<p><code>public/index.html</code> defines a <code>div</code> element with its <code>id</code> set to <code>root</code>:</p>
<p><script src="https://gist.github.com/am-MongoDB/9f298b6283e3a8d2d7d956291ec9439e.js"></script></p>
<p><code>src/index.js</code> accesses the <code>root</code> element from <code>public/index.html</code> so that it can be populated with the output from the application. It imports <code>src/App.js</code> and creates the <code>&lt;App /&gt;</code> element.</p>
<p><script src="https://gist.github.com/am-MongoDB/945a4aa73a75af90a25572b0de56b77e.js"></script></p>
<p><code>src/App.js</code> defines the <code>App</code> class to satisfy the <code>App</code> element in <code>src/index.js</code>; that class renders the <code>&lt;MongoPopContainer /&gt;</code> element, which is made up of all of the sub-components. <code>App.js</code> imports each of the sub-component source files (<code>X.component.js</code>) so that they can implement those components. It also imports <code>src/data.service.js</code> to give access to the back-end Mongopop REST API:</p>
<p><script src="https://gist.github.com/am-MongoDB/04bae5f85acfff596f7f1b4e29b7540e.js"></script></p>
<h2>Calling the REST API</h2>
<p>The <a href="https://github.com/am-MongoDB/MongoDB-Mongopop-ReactJS/blob/master/src/data.service.js" title="Acess to the Mongopop REST API from ReactJS">Data Service class</a> hides the communication with the back-end REST API; serving two purposes:</p>
<ul>
<li>Simplifying all of the components&#8217; code</li>
<li>Shielding the components&#8217; code from any changes in the REST API signature or behavior – that can all be handled within the DataService</li>
</ul>
<p>The functions of the data service return promises to make working with their asynchronous behaviour simpler. Refer back to <a href="./../../mongodb/mean_stack_2_mongodb_node_js/index.html" title="Using MongoDB With Node.js">Part 2: Using MongoDB With Node.js</a> if you need a recap on using <strong>promises</strong>.</p>
<p>As a reminder from <a href="h./../../mongodb/the-modern-application-stack-part-3-building-a-rest-api-using-express-js/index.html" title="Building a REST API with Express.js">Part 3: Building a REST API with Express.js</a>, this is the REST API we have to interact with:</p>
<table class='table table-bordered' summary="Express route paths implemented for the Mongopop REST API">
<caption><strong>Express routes implemented for the Mongopop REST API</strong></caption>
<thead>
<tr>
<th>Route Path</th>
<th>HTTP Method</th>
<th>Parameters</th>
<th>Response</th>
<th>Purpose</p>
<pre style="border:0px; background-color:#fff; height:0px">                      </pre>
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<pre style="border:0px; background-color:#fff">/pop/</pre>
</td>
<td>GET</td>
<td></td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">
{
"AppName": "MongoPop",
"Version": 1.0
}
        </pre>
</td>
<td>Returns the version of the API.</td>
</tr>
<tr>
<td>
<pre style="border:0px; background-color:#fff">/pop/ip</pre>
</td>
<td>GET</td>
<td></td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">{"ip": string}</pre>
</td>
<td>Fetches the IP Address of the server running the Mongopop backend.</td>
</tr>
<tr>
<td>
<pre style="border:0px; background-color:#fff">/pop/config</pre>
</td>
<td>GET</td>
<td></td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">
{
mongodb: {
    defaultDatabase: string,
    defaultCollection: string,
    defaultUri: string
},
mockarooUrl: string
}
        </pre>
</td>
<td>Fetches client-side defaults from the back-end config file.</td>
</tr>
<tr>
<td>
<pre style="border:0px; background-color:#fff">/pop/addDocs</pre>
</td>
<td>POST</td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">
{
MongoDBURI: string;
collectionName: string;
dataSource: string;
numberDocs: number;
unique: boolean;
}
        </pre>
</td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">
{
success: boolean;
count: number;
error: string;
}
        </pre>
</td>
<td>Add `numberDocs` batches of documents, using documents fetched from `dataSource`</td>
</tr>
<tr>
<td>
<pre style="border:0px; background-color:#fff">/pop/sampleDocs</pre>
</td>
<td>POST</td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">
{
MongoDBURI: string;
collectionName: string;
numberDocs: number;
}
        </pre>
</td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">
{
success: boolean;   
documents: string;
error: string;
}
        </pre>
</td>
<td>Read a sample of the documents from a collection.</td>
</tr>
<tr>
<td>
<pre style="border:0px; background-color:#fff">/pop/countDocs</pre>
</td>
<td>POST</td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">
{
MongoDBURI: string; 
collectionName: string;
}
        </pre>
</td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">
{
success: boolean;   
count: number;
error: string;
}
        </pre>
</td>
<td>Counts the number of documents in the collection.</td>
</tr>
<tr>
<td>
<pre style="border:0px; background-color:#fff">/pop/updateDocs</pre>
</td>
<td>POST</td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">
{
MongoDBURI: string;
collectionName: string;
matchPattern: Object;
dataChange: Object;
threads: number;
}
        </pre>
</td>
<td>
<pre style="border:0px; font-size:11px; background-color:#fff">
{
success: boolean;
count: number;
error: string;
}
        </pre>
</td>
<td>Apply an update to all documents in a collection<br />
    which match a given pattern</td>
</tr>
</tbody>
</table>
<p>This data access class uses the <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" title="Asynchronous-htttp-api">XMLHttpRequest API</a> to make asynchronous HTTP requests to the REST API running in the back-end (mostly to access MongoDB).</p>
<p>One of the simplest functions that <a href="https://github.com/am-MongoDB/MongoDB-Mongopop-ReactJS/blob/master/src/data.service.js" title="MongoDB MongoPope React daat service"><code>data.service.js</code></a> provides is <code>fetchConfig</code> which sends an HTTP <code>GET</code> request to the back-end to retrieve default the client configuration parameters:</p>
<p><script src="https://gist.github.com/am-MongoDB/b3e1a63771eda54d638c3bc632790fb1.js"></script></p>
<p>When using this API, the application registers handler functions against a number of possible events; in this case:</p>
<ul>
<li><code>onreadystatechange</code>: triggered if/when a successful HTTP response is received</li>
<li><code>onerror</code> &amp; <code>onabort</code>: triggered when there has been a problem</li>
</ul>
<p>The method returns a promise which subsequently – via the bound-in function (<code>processRequest</code> &amp; <code>processError</code>) – either:</p>
<ul>
<li>Provides an object representing the received response</li>
<li>Raises an error with an appropriate message</li>
</ul>
<p>The <code>baseURL</code> data member is set to <code>http://localhost:3000/pop</code> but that can be changed by editing the data service creation line in <a href="https://github.com/am-MongoDB/MongoDB-Mongopop-ReactJS/blob/master/src/App.js" title="MongoDB Mongopop React component"><code>App.js</code></a>:</p>
<pre><code class="js">this.dataService = new DataService("http://localhost:3000/pop");
</code></pre>
<p>Another of the methods sends a <code>POST</code> message to the REST API&#8217;s <code>pop/addDocs</code> route path to request the bulk addition of documents to a MongoDB collection:</p>
<p><script src="https://gist.github.com/am-MongoDB/adfb0970e14dcedc105965ba9a26f778.js"></script></p>
<p>The program flow is very similar to that of the previous function and, in the success case, it eventually resolves the returned promise with a count of the number of documents added.</p>
<p>A final method from the <code>DataService</code> class worth looking at is <code>calculateMongoDBURI()</code> which takes the MongoDB URI provided by <a href="https://cloud.mongodb.com/" title="Hosted MongoDB as a cloud service">MongoDB Atlas</a> and converts it into one that can actually be used to access the database – replacing the <code>&lt;DATABASE&gt;</code> and <code>&lt;PASSWORD&gt;</code> placeholders with the actual values:</p>
<p><script src="https://gist.github.com/am-MongoDB/94448e69217467113e6bd03ec0828fef.js"></script></p>
<p>The function stores the final URI in the data service class&#8217;s <code>MongoDBURI</code> data member – to sent to the back-end when accessing the database (see <code>sendAddDocs</code> above). It also returns a second value (<code>MongoDBURIRedacted</code>) with the password masked out – to be used when displaying the URI.</p>
<h2>A simple component that accepts data from its parent</h2>
<p>Recall that the application consists of eight components: the top-level application which contains each of the <code>ServerDetails</code>, <code>ConnectionInfo</code>, <code>CollectionName</code>, <code>AddDocuments</code>, <code>CountDocuments</code>, <code>UpdateDocuments</code>, and <code>SampleDocuments</code> components.</p>
<p>When building a new application, you would typically start by designing the the top-level component and then working downwards. As the top-level container is, perhaps, the most complex one to understand, we&#8217;ll start at the bottom and then work up.</p>
<p>A simple sub-component to start with is the <a href="https://github.com/am-MongoDB/MongoDB-Mongopop-ReactJS/blob/master/src/add.component.js" title="MongoDB Mongopo Add React component"><code>AddDocuments</code></a> component:</p>
<div id="attachment_4398" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2017/02/ReactJS_Components-1.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4398" src="./../../wp-content/uploads/2017/02/ReactJS_Components-1-744x1024.png" alt="ReactJS component" width="480" height="661" class="size-large wp-image-4398" srcset="./../../wp-content/uploads/2017/02/ReactJS_Components-1-744x1024.png 744w, ./../../wp-content/uploads/2017/02/ReactJS_Components-1-218x300.png 218w, ./../../wp-content/uploads/2017/02/ReactJS_Components-1-768x1057.png 768w, ./../../wp-content/uploads/2017/02/ReactJS_Components-1.png 872w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4398" class="wp-caption-text">ReactJS component</p></div>
<p>A central design decision for any component is what <em>state</em> is required (any variable data that is to be rendered by the component should either be part of the component&#8217;s state or of the <code>properties</code> passed by its parent component). The state is initialised in the class&#8217;s constructor:</p>
<p><script src="https://gist.github.com/am-MongoDB/efb47e5a6295df1344212ff8fe3955bc.js"></script></p>
<p>Recall that any state variable X can be read using <code>this.state.X</code> but only the constructor should write to it that way – anywhere else should use the <code>setState()</code> function so that ReactJS is made aware of the change – enabling it to refresh any affected elements. In this class, there are six state variables:</p>
<ul>
<li><code>MockarooURL</code>: The URL from a service such as <a href="https://www.mockaroo.com/">Mockaroo</a> which will return an array containing a set of example JSON documents</li>
<li><code>numDocsToAdd</code>: How many batches of documents should be added (with the default value of <code>MockarooURL</code>, each batch contains 1,000 documents)</li>
<li><code>uniqueDocs</code>: Whether each batch should be distinct from the other batches (this significantly slows things down)</li>
<li><code>numDocsAdded</code>: Updated with the number of added documents in the event that the operation succeeds</li>
<li><code>errorText</code>: Updated with an error message in the event that the operation fails</li>
<li><code>addedCollection</code>: Name of the collection that documents were last added to (initialized with the <code>collection</code> property passed by the parent component)</li>
</ul>
<div id="attachment_4399" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2017/02/state_variables_in_ReactJS_component.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4399" src="./../../wp-content/uploads/2017/02/state_variables_in_ReactJS_component-1024x806.png" alt="ReactJS state variables" width="480" height="378" class="size-large wp-image-4399" srcset="./../../wp-content/uploads/2017/02/state_variables_in_ReactJS_component-1024x806.png 1024w, ./../../wp-content/uploads/2017/02/state_variables_in_ReactJS_component-300x236.png 300w, ./../../wp-content/uploads/2017/02/state_variables_in_ReactJS_component-768x605.png 768w, ./../../wp-content/uploads/2017/02/state_variables_in_ReactJS_component.png 1318w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4399" class="wp-caption-text">ReactJS state variables</p></div>
<p>Note that the constructor receives the properties passed down from the parent component. The constructor from the <code>React.Component</code> class must always be invoked within the component&#8217;s constructor: <code>super(props)</code>.</p>
<p>The <code>bind</code>s at the end of the constructor make <code>this</code> available for use within the class&#8217;s methods.</p>
<p>Further down in the class is the <code>render()</code> method which returns the content that ReactJS converts to HTML and JavaScript for the browser to render:</p>
<p><script src="https://gist.github.com/am-MongoDB/8905927872d7e997af97e794cd0fc587.js"></script></p>
<p>Recall that when coding in JSX, JavaScript can be embedded in the HTML by surrounding it with braces. The function uses that almost immediately to include the collection name in the component&#8217;s header: <code>&lt;h2&gt;Add documents to {this.props.collection}&lt;/h2&gt;</code>.</p>
<p>The first <code>input</code> is initialized with <code>this.state.MockarooURL</code> and if the user changes the value then <code>this.handleURLChange</code> is invoked – which in turn updates the state value:</p>
<p><script src="https://gist.github.com/am-MongoDB/9edda5acf297e57cd93fc8044ef54914.js"></script></p>
<p>The same pattern holds for the <code>input</code>s for <code>numDocsToAdd</code> &amp; <code>uniqueDocs</code>.</p>
<p>When this component&#8217;s button is pressed, the <code>onClick</code> event calls <code>this.handleAddSubmit()</code>:</p>
<p><script src="https://gist.github.com/am-MongoDB/df3968f8e0f1c0f636688e0031e3f3de.js"></script></p>
<p>This function invokes the <code>sendAddDocs()</code> method of the data service that was passed down from the parent component (and so is part of <code>this.props</code>). <code>sendAddDocs()</code> returns a promise and the first function in the <code>then</code> clause is called if/when that promise is successfully resolved – setting the <code>numDocsAdded</code> state to the number of added documents; if the promise is instead rejected then the second function is called – setting the error message. In either case, the state change will cause the associated element to be rerendered:</p>
<p><script src="https://gist.github.com/am-MongoDB/a9d5003f7d238f4f4a576fe14007c0a3.js"></script></p>
<h2>Passing data down to a sub-component (and receiving changes back)</h2>
<p>The <code>AddDocs</code> component is embedded within the <code>render()</code>method of <code>MongoPopContainer</code> component class; implemented in <a href="https://github.com/am-MongoDB/MongoDB-Mongopop-ReactJS/blob/master/src/App.js" title="MongoDB Mongopo ReactJS component"><code>App.js</code></a>:</p>
<p><script src="https://gist.github.com/am-MongoDB/3f54f24d2e8933f85a57e941a07de136.js"></script></p>
<p>It passes down two items:</p>
<ul>
<li><code>dataService</code> is an instance of the <code>DataService</code> class and is used to access the back-end (in particular, to interact with MongoDB). Appears as part of <code>AddDocument</code>&#8216;s properties and can be accessed as <code>this.props.dataService</code>.</li>
<li><code>collection</code> is a string representing the collection name. Appears as part of <code>AddDocument</code>&#8216;s properties and can be accessed as <code>this.props.collection</code>.</li>
</ul>
<p><code>MongoDBCollectionName</code> is initialized, and <code>dataService</code> is instantiated as part of the <code>MongoPopContainer</code> constructor:</p>
<p><script src="https://gist.github.com/am-MongoDB/b9685e888b689a63fb5780581b625da2.js"></script></p>
<p>Note that for a real, deployed application, <code>http://localhost:3000/pop</code> would be replaced with the public URL for REST API. Additionally, you should consider adding authentication to the API .</p>
<p>But where did the collection name get set – the constructor initialized it to an empty string but that&#8217;s not we see when running the application? There&#8217;s a clue in the constructor:</p>
<pre><code class="js">this.handleCollectionChange=this.handleCollectionChange.bind(this);
</code></pre>
<p>Recall that a <code>bind</code> like this is to allow a function (<code>this.handleCollectionChange()</code>) to access the <code>this</code> object:</p>
<p><script src="https://gist.github.com/am-MongoDB/a6050d700e87b6a84667e6e39636aa54.js"></script></p>
<p>The <code>handleCollectionChange()</code> method is passed down to the <code>CollectionName</code> component:</p>
<p><script src="https://gist.github.com/am-MongoDB/b3dd9d388660f44f7fe0d0396463f29f.js"></script></p>
<p>This is the <a href="https://github.com/am-MongoDB/MongoDB-Mongopop-ReactJS/blob/master/src/collection.name.component.js" title="MongoDB Mongopop ReactJS collection component"><code>CollectionName</code> component class</a>:</p>
<p><script src="https://gist.github.com/am-MongoDB/2f5609c0a6c00cbcee0c3039af179117.js"></script></p>
<p><code>CollectionName</code> has a single state variable – <code>collection</code> – which is initially set in the <code>componentDidMount()</code> method by fetching the default client configuration information from the back-end by calling <code>this.props.dataService.fetchConfig()</code>. <a href="https://facebook.github.io/react/docs/react-component.html#componentdidmount"><code>componentDidMount</code></a> is one of the <a href="https://facebook.github.io/react/docs/react-component.html">component lifecycle methods</a> that are part of any <code>React.Component</code> class – it is invoked after the component has been loaded into the browser, it is where you would typically fetch any data from the back-end that&#8217;s needed for the component&#8217;s starting state. After setting the collection state, the change notification function passed down by the parent component is invoked to pass up the new value:</p>
<pre><code class="js">_this.props.onChange(_this.state.collection);
</code></pre>
<p>Of course, the user needs to be able to change the collection name and so an <code>input</code> element is included. The value of the element is initialized with the collection state variable and when the user changes that value, <code>this.handleCollectionNameChange</code> is invoked. In turn, that method updates the component state and passes the new collection name up to the parent component by calling the change notification method provided by the parent.</p>
<h2>Optionally empty components</h2>
<p>It&#8217;s common that a component should only display its contents if a particular condition is met. Mongopop includes a feature to allow the user to apply a bulk change to a set of documents – selected using a pattern specified by the user. If they don&#8217;t know the typical document structure for the collection then it&#8217;s unlikely that they&#8217;ll make a sensible change. Mongopop forces them to first retrieve a sample of the documents before they&#8217;re given the option to make any changes.</p>
<p>This optionality is implemented through the <code>SampleDocuments</code> &amp; <code>UpdateDocuments</code> components:</p>
<table class='table table-bordered' summary="ReactJS components for Mongopop ReactJS client application">
<caption><strong>Flow of data between ReactJS components</strong></caption>
<thead>
<tr>
<th>Child component</th>
<th>Data passed down</th>
<th>Data changes passed back up</th>
</tr>
</thead>
<tbody>
<tr>
<td rowspan="3">
<pre style="border:0px; background-color:#fff">UpdateDocuments</pre>
</td>
<td>Collection Name</td>
<td rowspan="3"></td>
</tr>
<tr>
<td>Data service</td>
</tr>
<tr>
<td>Sample data to play with</td>
</tr>
<tr>
<td rowspan="2">
<pre style="border:0px; background-color:#fff">SampleDocuments</pre>
</td>
<td>Collection Name</td>
<td rowspan="2">Sample data to play with</td>
</tr>
<tr>
<td>Data service</td>
</tr>
</tbody>
</table>
<p>Recall that the <code>MongoPopContainer</code> component class includes a state variable named <code>DataToPlayWith</code> which is initialized to <code>FALSE</code>:</p>
<p><script src="https://gist.github.com/am-MongoDB/e805cc84f22425ca69a3be3e5471f5f9.js"></script></p>
<p>That state is updated using the <code>handleDataAvailabiltyChange</code> method:</p>
<p><script src="https://gist.github.com/am-MongoDB/2643ae015b34cdd007d64c37723cabae.js"></script></p>
<p>That method is passed down to the <code>SampleDocuments</code> component:</p>
<p><script src="https://gist.github.com/am-MongoDB/e3045afa1ba4ef16ffd26eee8501b9ac.js"></script></p>
<p>When the user fetches a sample of the documents from a collection, the <a href="https://github.com/am-MongoDB/MongoDB-Mongopop-ReactJS/blob/master/src/sample.component.js" title="MongoDB Mongopo React JS sample documents component"><code>SampleDocuments</code> component</a> invokes the change notification method (<code>_this.props.onDataToWorkWith()</code>), passing back <code>TRUE</code> if the request was a success, <code>FALSE</code> otherwise:</p>
<p><script src="https://gist.github.com/am-MongoDB/935a2525c7c19a5fe4faafc1340a448a.js"></script></p>
<p><code>MongoPopContainer</code> passes its state variable <code>DataToPlayWith</code> down to the <code>UpdateDocuments</code> component:</p>
<p><script src="https://gist.github.com/am-MongoDB/29798f6f9ced02711723385352f87414.js"></script></p>
<p>The <a href="https://github.com/am-MongoDB/MongoDB-Mongopop-ReactJS/blob/master/src/update.component.js" title="MongoDB Mongopop Updated documents ReactJS component"><code>UpdateDocuments</code> component class</a> is then able to check the value using:</p>
<p><script src="https://gist.github.com/am-MongoDB/a504ca807afe4ea76e710d8ae7e14bd7.js"></script></p>
<p>Otherwise, the rest of this component is similar to those already seen:</p>
<p><script src="https://gist.github.com/am-MongoDB/584938c293791e488c360554f335af92.js"></script></p>
<h2>Periodic operations</h2>
<p>The <a href="https://github.com/am-MongoDB/MongoDB-Mongopop-ReactJS/blob/master/src/count.component.js" title="MongoDB Mongopop React count component"><code>CountDocuments</code> component</a> has an extra feature – if the repeat option is checked then it will fetch and display the document count every five seconds. The function that&#8217;s called when the count button is clicked, checks the value of the state variable associated with the checkbox and if it&#8217;s set, calls <code>setInterval()</code> to call the <code>countOnce()</code> method every five seconds:</p>
<p><script src="https://gist.github.com/am-MongoDB/c117558651ebca0c2806ecb92cf5ce71.js"></script></p>
<p>The timer is cleared (<code>clearInterval()</code>) if there is an error or just before the component is unmounted (in <code>componentWillUnmount</code>).</p>
<h2>Other components</h2>
<p>For completeness, this is the full top-level component, <a href="https://github.com/am-MongoDB/MongoDB-Mongopop-ReactJS/blob/master/src/App.js"><code>App.js</code></a>, which includes the rest of the sub-components:</p>
<p><script src="https://gist.github.com/am-MongoDB/c906c0585d164abd7e2b5228b5d1bd1c.js"></script></p>
<p>The <a href="https://github.com/am-MongoDB/MongoDB-Mongopop-ReactJS/blob/master/src/connection.info.component.js" title="MongoDB Mongopop ReactJS connection info component"><code>ConnectionInfo</code> component</a>:</p>
<p><script src="https://gist.github.com/am-MongoDB/2b3542d5e2999273851b766b99df0969.js"></script></p>
<p>The <a href="https://github.com/am-MongoDB/MongoDB-Mongopop-ReactJS/blob/master/src/server.details.component.js" title="MongoDB Mongopop server details React component"><code>ServerDetails</code> component</a>:</p>
<p><script src="https://gist.github.com/am-MongoDB/d663218f8610c98510c2d458316f8c41.js"></script></p>
<h2>Testing &amp; debugging the ReactJS application</h2>
<p>Now that the full MERN stack application has been implemented, you can test it from within your browser:</p>
<p><iframe loading="lazy" width="560" height="315" src="https://www.youtube.com/embed/eS8R7z_FaVo?rel=0" frameborder="0" allowfullscreen></iframe></p>
<p>Debugging the ReactJS client is straightforward using the <a href="https://developer.chrome.com/devtools">Google Chrome Developer Tools</a> which are built into the Chrome browser. Despite the browser executing the transpiled JavaScript the Dev Tools allows you to navigate and set breakpoints in your JSX code:</p>
<div id="attachment_4400" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2017/02/debug_JSX_in_Chrome.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4400" src="./../../wp-content/uploads/2017/02/debug_JSX_in_Chrome-1024x869.png" alt="Debug React JSX with Google Chrome Developer tools" width="480" height="407" class="size-large wp-image-4400" srcset="./../../wp-content/uploads/2017/02/debug_JSX_in_Chrome-1024x869.png 1024w, ./../../wp-content/uploads/2017/02/debug_JSX_in_Chrome-300x255.png 300w, ./../../wp-content/uploads/2017/02/debug_JSX_in_Chrome-768x652.png 768w, ./../../wp-content/uploads/2017/02/debug_JSX_in_Chrome.png 1432w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4400" class="wp-caption-text">Debug React JSX with Google Chrome Developer tools</p></div>
<p>If there is a compilation error then the error is sent to the browser:</p>
<div id="attachment_4401" style="width: 693px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2017/02/Compile_error.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4401" src="./../../wp-content/uploads/2017/02/Compile_error.png" alt="ReactJS Compile errors in Google Chrome Developer tools" width="683" height="429" class="size-full wp-image-4401" srcset="./../../wp-content/uploads/2017/02/Compile_error.png 683w, ./../../wp-content/uploads/2017/02/Compile_error-300x188.png 300w" sizes="auto, (max-width: 683px) 100vw, 683px" /></a><p id="caption-attachment-4401" class="wp-caption-text">ReactJS Compile errors in Google Chrome Developer tools</p></div>
<p>By installing the <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en"><em>React Developer Tools</em> from the Google Chrome Store</a>, you get an extra &#8220;React&#8221; tab that can be used to view or modify the state or properties for any of the components:</p>
<div id="attachment_4402" style="width: 1033px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2017/02/Chrome_React_dev_tool.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4402" src="./../../wp-content/uploads/2017/02/Chrome_React_dev_tool.png" alt="React in Google Chrome Developer tools" width="1023" height="576" class="size-full wp-image-4402" srcset="./../../wp-content/uploads/2017/02/Chrome_React_dev_tool.png 1023w, ./../../wp-content/uploads/2017/02/Chrome_React_dev_tool-300x169.png 300w, ./../../wp-content/uploads/2017/02/Chrome_React_dev_tool-768x432.png 768w" sizes="auto, (max-width: 1023px) 100vw, 1023px" /></a><p id="caption-attachment-4402" class="wp-caption-text">React in Google Chrome Developer tools</p></div>
<h2>ReactJS vs. Angular</h2>
<p>So should you use Angular 2 or React for your new web application? A quick Google search will find you some fairly deep comparisons of the two technologies but in summary, Angular 2 is a little more powerful while React is easier for developers to get up to speed with and use (note how many fewer files are needed). The <a href="./../../mongodb/the-modern-application-stack-part-4-building-a-client-ui-using-angular-2-formerly-angularjs-typescript/index.html" title="Angular2 with MongoDB">previous blog</a> in this series built the Mongopop client application using Angular 2, while this one built a near-identical app using ReactJS – hopefully these posts have helped you pick a favorite.</p>
<p>The following snapshot from Google Trends suggests that Angular has been much more common for a number of years but that React is gaining ground:</p>
<div id="attachment_4403" style="width: 837px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2017/02/ReactJS_vs_Angular.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4403" src="./../../wp-content/uploads/2017/02/ReactJS_vs_Angular.png" alt="ReactJS popularity vs. Angular and Angular 2" width="827" height="374" class="size-full wp-image-4403" srcset="./../../wp-content/uploads/2017/02/ReactJS_vs_Angular.png 827w, ./../../wp-content/uploads/2017/02/ReactJS_vs_Angular-300x136.png 300w, ./../../wp-content/uploads/2017/02/ReactJS_vs_Angular-768x347.png 768w" sizes="auto, (max-width: 827px) 100vw, 827px" /></a><p id="caption-attachment-4403" class="wp-caption-text">ReactJS popularity vs. Angular and Angular 2</p></div>
<h2>Summary &amp; what&#8217;s next in the series</h2>
<p>Previous posts stepped through building the Mongopop application back-end and then the creation of an Angular 2 client application. This post described how to build a front-end client using ReactJS. At this point, we have a complete, working, MERN stack application.</p>
<p>The coupling between the front and back-end is loose; the client simply makes remote, HTTP requests to the back-end service – using the interface created in <a href="h./../../mongodb/the-modern-application-stack-part-3-building-a-rest-api-using-express-js/index.html" title="Building REST API for MongoDB using Express JS">Part 3: Building a REST API with Express.js</a>.</p>
<p>This series will finish by demonstrating alternate methods to implement front-end client applications that aren&#8217;t browser-based.</p>
<p>Continue to the final post this blog series to discover some more unconventional ways to use the Mongopop REST API:<br />
* <a href="./../../mongodb/modern-application-stack-part-1-introducing-the-mean-stack/index.html" title="MEAN stack, MERN stack">Part 1: Introducing The MEAN Stack (and the young MERN upstart)</a><br />
* <a href="./../../mongodb/mean_stack_2_mongodb_node_js/index.html" title="Using MongoDB With Node.js">Part 2: Using MongoDB With Node.js</a><br />
* <a href="./../../mongodb/the-modern-application-stack-part-3-building-a-rest-api-using-express-js/index.html" title="Building REST API for MongoDB using Express JS">Part 3: Building a REST API with Express.js</a><br />
* <a href="./../../mongodb/the-modern-application-stack-part-4-building-a-client-ui-using-angular-2-formerly-angularjs-typescript/index.html" title="Completing the MEAN stack – Mongopop Angular2 client">Part 4: Building a Client UI Using Angular 2 (formerly AngularJS) &amp; TypeScript</a><br />
* <a href="./../../mongodb/the-modern-application-stack-part-5-using-reactjs-es6-jsx-to-build-a-ui-the-rise-of-mern/index.html" title="Building an application front-end with ReactJS and ES6">Part 5: Using ReactJS, ES6 &amp; JSX to Build a UI (the rise of MERN)</a><br />
* <a href="./../../mongodb/rest-mobile-app-amazon-alexa-cloud-services/index.html" title="Using REST APIs from mobile applications and Amazon Alexa">Part 6: Browsers Aren&#8217;t the Only UI – Mobile Apps, Amazon Alexa, Cloud Services&#8230;</a></p>
<h2>A simpler way to build your app – MongoDB Stitch, Backend as a Service</h2>
<p><a href="https://www.mongodb.com/cloud/stitch">MongoDB Stitch</a> is a backend as a service (BaaS), giving developers a REST-like API to MongoDB, and composability with other services, backed by a robust system for configuring fine-grained data access controls. Stitch provides native SDKs for JavaScript, iOS, and Android.</p>
<p>Built-in integrations give your application frontend access to your favorite third party services: Twilio, AWS S3, Slack, Mailgun, PubNub, Google, and more. For ultimate flexibility, you can add custom integrations using MongoDB Stitch&#8217;s HTTP service.</p>
<p>MongoDB Stitch allows you to compose multi-stage pipelines that orchestrate data across multiple services; where each stage acts on the data before passing its results on to the next.</p>
<p>Unlike other BaaS offerings, MongoDB Stitch works with your existing as well as new MongoDB clusters, giving you access to the full power and scalability of the database. By defining appropriate data access rules, you can selectively expose your existing MongoDB data to other applications through MongoDB Stitch&#8217;s API.</p>
<p>If you&#8217;d like to try it out, <a href="./../../mongodb/mongodb-stitch-the-latest-and-best-way-to-build-your-app/index.html" title="MongoDB Stitch - the latest, and best way to build your app">step through building an application with MongoDB Stitch</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mongodb/the-modern-application-stack-part-5-using-reactjs-es6-jsx-to-build-a-ui-the-rise-of-mern/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>The Modern Application Stack – Part 2: Using MongoDB With Node.js</title>
		<link>./../../mongodb/mean_stack_2_mongodb_node_js/index.html</link>
					<comments>./../../mongodb/mean_stack_2_mongodb_node_js/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Thu, 02 Feb 2017 07:51:00 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[angular]]></category>
		<category><![CDATA[angular.js]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[mean stack]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[typescript]]></category>
		<guid isPermaLink="false">./../../index.html?p=4355</guid>

					<description><![CDATA[Introduction This is the second in a series of blog posts examining the technologies that are driving the development of modern web and mobile applications. &#8220;Modern Application Stack – Part 1: Introducing The MEAN Stack&#8221; introduced the technologies making up the MEAN (MongoDB, Express, Angular, Node.js) and MERN (MongoDB, Express, React, Node.js) Stacks, why you]]></description>
										<content:encoded><![CDATA[<h2>Introduction</h2>
<p>This is the second in a series of blog posts examining the technologies that are driving the development of modern web and mobile applications.</p>
<p><a href="./../../mongodb/modern-application-stack-part-1-introducing-the-mean-stack/index.html" title="The Modern Application Stack – Introducing The MEAN Stack">&#8220;Modern Application Stack – Part 1: Introducing The MEAN Stack&#8221;</a> introduced the technologies making up the <strong>MEAN</strong> (<strong>M</strong>ongoDB, <strong>E</strong>xpress, <strong>A</strong>ngular, <strong>N</strong>ode.js) and <strong>MERN</strong> (<strong>M</strong>ongoDB, <strong>E</strong>xpress, <strong>R</strong>eact, <strong>N</strong>ode.js) Stacks, why you might want to use them, and how to combine them to build your web application (or your native mobile or desktop app).</p>
<p>The remainder of the series is focussed on working through the end to end steps of building a real (albeit simple) application – <em>MongoPop</em>.</p>
<p>This post demonstrates how to use MongoDB from Node.js.</p>
<h2>MongoDB (recap)</h2>
<p>MongoDB provides the persistence for your application data.</p>
<p>MongoDB is an open-source, document database designed with both scalability and developer agility in mind. MongoDB bridges the gap between key-value stores, which are fast and scalable, and relational databases, which have rich functionality. Instead of storing data in rows and columns as one would with a relational database, MongoDB stores JSON documents in collections with dynamic schemas.</p>
<p>MongoDB&#8217;s document data model makes it easy for you to store and combine data of any structure, without giving up sophisticated validation rules, flexible data access, and rich indexing functionality. You can dynamically modify the schema without downtime – vital for rapidly evolving applications.</p>
<p>It can be scaled within and across geographically distributed data centers, providing high levels of availability and scalability. As your deployments grow, the database scales easily with no downtime, and without changing your application.</p>
<p><a href="https://www.mongodb.com/cloud/atlas" title="MongoDB Atlas Cloud Database Service">MongoDB Atlas</a> is a database as a service for MongoDB, letting you focus on apps instead of ops. With MongoDB Atlas, you only pay for what you use with a convenient hourly billing model. With the click of a button, you can scale up and down when you need to, with no downtime, full security, and high performance.</p>
<p>Our application will access MongoDB via the <a href="https://mongodb.github.io/node-mongodb-native/" title="JavaScript Node.js driver for MongoDB">JavaScript/Node.js driver</a> which we install as a Node.js module.</p>
<h2>Node.js (recap)</h2>
<p><a href="https://nodejs.org/">Node.js</a> is a JavaScript runtime environment that runs your back-end application (via Express).</p>
<p>Node.js is based on Google&#8217;s V8 JavaScript engine which is used in the Chrome browser. It also includes a number of modules that provides features essential for implementing web applications – including networking protocols such as HTTP. Third party modules, including the MongoDB driver, can be installed, using the <code>npm</code> tool.</p>
<p>Node.js is an asynchronous, event-driven engine where the application makes a request and then continues working on other useful tasks rather than stalling while it waits for a response. On completion of the requested task, the application is informed of the results via a callback (or a <em>promise</em> or <em>Observable</em>. This enables large numbers of operations to be performed in parallel – essential when scaling applications. MongoDB was also designed to be used asynchronously and so it works well with Node.js applications.</p>
<h2>The application – Mongopop</h2>
<p>MongoPop is a web application that can be used to help you test out and exercise MongoDB. After supplying it with the database connection information (e.g., as displayed in the MongoDB Atlas GUI), MongoPop provides these features:</p>
<ul>
<li>Accept your username and password and create the full MongoDB connect string – using it to connect to your database</li>
<li>Populate your chosen MongoDB collection with bulk data (created with the help of the <a href="https://www.mockaroo.com/">Mockeroo service</a>)</li>
<li>Count the number of documents</li>
<li>Read sample documents</li>
<li>Apply bulk changes to selected documents</li>
</ul>
<p><center><img decoding="async" src="./../../wp-content/uploads/2017/02/Mongopop_demo.gif" alt="Mongopop Demo" title="Mongopop Demo" /> </center></p>
<h2>Downloading, running, and using the Mongopop application</h2>
<p>Rather than installing and running MongoDB ourselves, it&#8217;s simpler to spin one up in <a href="https://cloud.mongodb.com/" title="MongoDB Atlas Cloud Database Service">MongoDB Atlas</a>:</p>
<p><img decoding="async" src="./../../wp-content/uploads/2017/02/Create_MongoDB_Atlas_Cluster.gif" alt="Create MongoDB Atlas Cluster" title="Create MongoDB Atlas Cluster" /></p>
<p>To get the application code, either <a href="https://github.com/am-MongoDB/Mongopop/archive/master.zip" title="Mongopop - populating MongoDB databases">download and extract the zip file</a> or use <code>git</code> to clone the Mongopop repo:</p>
<pre><code>git clone git@github.com:am-MongoDB/MongoDB-Mongopop.git
cd MongoDB-Mongopop
</code></pre>
<p>If you don&#8217;t have Node.js installed then that needs to be done before building the application; it can be downloaded from <a href="https://nodejs.org/en/">nodejs.org</a> .</p>
<p>A file called <code>package.json</code> is used to control <a href="https://www.npmjs.com/"><code>npm</code></a> (the package manager for Node.js); here is the final version for the application:</p>
<p><script src="https://gist.github.com/am-MongoDB/aead8db6513beeb9c39e50cdb5efa95a.js"></script></p>
<p>The <code>scripts</code> section defines a set of shortcuts that can be executed using <code>npm run &lt;script-name&gt;</code>. For example <code>npm run debug</code> runs the Typescript transpiler (<code>tsc</code>) and then the Express framework in debug mode. <code>start</code> is a special case and can be executed with <code>npm start</code>.</p>
<p>Before running any of the software, the Node.js dependencies must be installed (into the <code>node_modules</code> directory):</p>
<pre><code>npm install
</code></pre>
<p>Note the list of dependencies in <code>package.json</code> – these are the Node.js packages that will be installed by <code>npm install</code>. After those modules have been installed, <code>npm</code> will invoke the <code>postinstall</code> script (that will be covered in Part 4 of this series). If you later realise that an extra package is needed then you can install it and add it to the dependency list with a single command. For example, if the MongoDB Node.js driver hadn&#8217;t already been included then it could be added with <code>npm install --save mongodb</code> – this would install the package as well as saving the dependency in <code>package.json</code>.</p>
<p>The application can then be run:</p>
<pre><code>npm start
</code></pre>
<p>Once running, browse to <code>http://localhost:3000/</code> to try out the application. When browsing to that location, you should be rewarded with the IP address of the server where Node.js is running (useful when running the client application remotely) – this IP address must be added to the <em>IP Whitelist</em> in the Security tab of the <a href="https://cloud.mongodb.com/">MongoDB Atlas GUI</a>. Fill in the password for the MongoDB user you created in MongoDB Atlas and you&#8217;re ready to go. Note that you should get your own URL, for your own data set using the <a href="https://www.mockaroo.com/">Mockaroo service</a> – allowing you to customise the format and contents of the sample data (and avoid exceeding the Mockaroo quota limit for the example URL).</p>
<h4>What are all of these files?</h4>
<ul>
<li><strong><code>package.json</code></strong>: Instructs the Node.js package manager (<code>npm</code>) what it needs to do; including which dependency packages should be installed</li>
<li><strong><code>node_modues</code></strong>: Directory where <code>npm</code> will install packages</li>
<li><strong><code>node_modues/mongodb</code></strong>: The MongoDB driver for Node.js</li>
<li><strong><code>node_modues/mongodb-core</code></strong>: Low-level MongoDB driver library; available for framework developers (application developers should avoid using it directly)</li>
<li><strong><code>javascripts/db.js</code></strong>: A JavaScript module we&#8217;ve created for use by our Node.js apps (in this series, it will be Express) to access MongoDB; this module in turn uses the MongoDB Node.js driver.</li>
</ul>
<p>The rest of the files and directories can be ignored for now – they will be covered in later posts in this series.</p>
<h2>Architecture</h2>
<p><img decoding="async" src="./../../wp-content/uploads/2017/02/MongoDB_NodeJS_Driver.png" alt="Using the JavaScript MongoDB Node.js Driver" title="Using the JavaScript MongoDB Node.js Driver" /></p>
<p>The MongoDB Node.js Driver provides a JavaScript API which implements the network protocol required to read and write from a local or remote MongoDB database. If using a <a href="https://docs.mongodb.com/manual/replication/" title="MongoDB Replica Sets">replica set</a> (and you should for production) then the driver also decides which MongoDB instance to send each request to. If using a sharded MongoDB cluster then the driver connects to the <a href="https://docs.mongodb.com/manual/reference/program/mongos/" title="mongos – the MongoDB query router"><code>mongos</code> query router</a>, which in turn picks the correct shard(s) to direct each request to.</p>
<p>We implement a shallow wrapper for the driver (<code>javascripts/db.js</code>) which simplifies the database interface that the application code (coming in the next post) is exposed to.</p>
<h4>Code highlights</h4>
<p><code>javascripts/db.js</code> defines an /object prototype/ (think <em>class</em> from other languages) named <code>DB</code> to provide access to MongoDB.</p>
<p>Its only dependency is the MongoDB Node.js driver:</p>
<pre><code class="js">var MongoClient = require('mongodb').MongoClient;
</code></pre>
<p>The prototype has a single property – <code>db</code> which stores the database connection; it&#8217;s initialised to <code>null</code> in the constructor:</p>
<pre><code class="js">function DB() {
    this.db = null;         // The MongoDB database connection
}
</code></pre>
<p>The MongoDB driver is asynchronous (the function returns without waiting for the requested operation to complete); there are two different patterns for handling this:</p>
<ol>
<li>The application passes a <em>callback</em> function as a parameter; the driver will invoke this callback function when the operation has run to completion (either on success or failure)</li>
<li>If the application does not pass a callback function then the driver function will return a <em>promise</em></li>
</ol>
<p>This application uses the promise-based approach. This is the general pattern when using promises:</p>
<p><script src="https://gist.github.com/am-MongoDB/c58ad7e6c409439dc4b4bab6a676d754.js"></script></p>
<p>The methods of the <code>DB</code> object prototype we create are also asynchronous and also return promises (rather than accepting callback functions). This is the general pattern for returning and then subsequently satisfying promises:</p>
<p><script src="https://gist.github.com/am-MongoDB/ca7d242150185a1cbdef6347ac01133c.js"></script></p>
<p><code>db.js</code> represents a thin wrapper on top of the MongoDB driver library and so (with the background on promises under our belt) the code should be intuitive. The basic interaction model from the application should be:</p>
<ol>
<li>Connect to the database</li>
<li>Perform all of the required database actions for the current request</li>
<li>Disconnect from the database</li>
</ol>
<p>Here is the method from <code>db.js</code> to open the database connection:</p>
<p><script src="https://gist.github.com/am-MongoDB/5d287c55f317dbd5bd1957541697be4a.js"></script></p>
<p>One of the simplest methods that can be called to use this new connection is to count the number of documents in a collection:</p>
<p><script src="https://gist.github.com/am-MongoDB/432f4c516bc6c69d73721969266e7c0f.js"></script></p>
<p>Note that the <code>collection</code> method on the database connection doesn&#8217;t support promises and so a callback function is provided instead.</p>
<p>And after counting the documents; the application should close the connection with this method:</p>
<p><script src="https://gist.github.com/am-MongoDB/f9a30f7ef9caa9c3227af637d78a8c89.js"></script></p>
<p>Note that <code>then</code> also returns a promise (which is, in turn, resolved or rejected). The returned promise could be created in one of 4 ways:</p>
<ol>
<li>The function explicitly creates and returns a new promise (which will eventually be resolved or rejected).</li>
<li>The function returns another function call which, in turn, returns a promise (which will eventually be resolved or rejected).</li>
<li>The function returns a value – which is automatically turned into a resolved promise.</li>
<li>The function throws an error – which is automatically turned into a rejected promise.</li>
</ol>
<p>In this way, promises can be chained to perform a sequence of events (where each step waits on the resolution of the promise from the previous one). Using those 3 methods from <code>db.js</code>, it&#8217;s now possible to implement a very simple application function:</p>
<p><script src="https://gist.github.com/am-MongoDB/ef0583ff78aaefa889ed4f664828dd80.js"></script></p>
<p>That function isn&#8217;t part of the final application – the actual code will be covered in the next post – but jump ahead and look at <a href="https://github.com/am-MongoDB/MongoDB-Mongopop/blob/master/routes/pop.js"><code>routes/pop.js</code></a> if your curious).</p>
<p>It&#8217;s worth looking at the <code>sampleCollection</code> prototype method as it uses a database <a href="http://mongodb.github.io/node-mongodb-native/2.0/api/Cursor.html" title="MongoDB Database cursor">/cursor/</a> . This method fetches a &#8220;random&#8221; selection of documents – useful when you want to understand the typical format of the collection&#8217;s documents:</p>
<p><script src="https://gist.github.com/am-MongoDB/00ec204efad24d558476f6e90887ceb3.js"></script></p>
<p>Note that [<code>collection.aggregate</code>](http://mongodb.github.io/ node-mongodb-native/2.0/api/Collection.html#aggregate &#8220;MongoDB aggregation from JavaScript Node.js driver&#8221;) doesn&#8217;t actually access the database – that&#8217;s why it&#8217;s a synchronous call (no need for a promise or a callback) – instead, it returns a <code>cursor</code>. The cursor is then used to read the data from MongoDB by invoking its <a href="http://mongodb.github.io/node-mongodb-native/2.0/api/Cursor.html#toArray" title="Get array from cursor using MongoDB JavaScript Node.js driver"><code>toArray</code></a> method. As <code>toArray</code> reads from the database, it can take some time and so it is an asynchronous call, and a callback function must be provided (<code>toArray</code> doesn&#8217;t support promises).</p>
<p>The rest of these database methods can be viewed in <a href="https://github.com/am-MongoDB/MongoDB-Mongopop/blob/master/javascripts/db.js"><code>db.js</code></a> but they follow a similar pattern. The <a href="http://mongodb.github.io/node-mongodb-native/2.0/api/index.html" title="JavaScript MongoDB Driver for Node.js – API">Node.js MongoDB Driver API documentation</a> explains each of the methods and their parameters.</p>
<h4>Summary &amp; what&#8217;s next in the series</h4>
<p>This post built upon the first, introductory, post by stepping through how to install and use Node.js and the MongoDB Node.js driver. This is our first step in building a modern, reactive application using the MEAN and MERN stacks.</p>
<p>The blog went on to describe the implementation of a thin layer that&#8217;s been created to sit between the application code and the MongoDB driver. The layer is there to provide a simpler, more limited API to make application development easier. In other applications, the layer could add extra value such as making semantic data checks.</p>
<p>The next part of this series adds the Express framework and uses it to implement a REST API to allow clients to make requests of the MongoDB database. That REST API will subsequently be used by the client application (using Angular in Part 4 or React in Part 5).</p>
<p>Continue following this blog series to step through building the remaining stages of the <a href="https://github.com/am-MongoDB/MongoDB-Mongopop">MongoPop</a> application:</p>
<ul>
<li><a href="./../../mongodb/modern-application-stack-part-1-introducing-the-mean-stack/index.html" title="MEAN stack, MERN stack">Part 1: Introducing The MEAN Stack (and the young MERN upstart)</a></li>
<li><a href="./../../mongodb/mean_stack_2_mongodb_node_js/index.html" title="Using MongoDB With Node.js">Part 2: Using MongoDB With Node.js</a></li>
<li><a href="./../../mongodb/the-modern-application-stack-part-3-building-a-rest-api-using-express-js/index.html" title="Building REST API for MongoDB using Express JS">Part 3: Building a REST API with Express.js</a></li>
<li><a href="./../../mongodb/the-modern-application-stack-part-4-building-a-client-ui-using-angular-2-formerly-angularjs-typescript/index.html" title="Completing the MEAN stack – Mongopop Angular2 client">Part 4: Building a Client UI Using Angular 2 (formerly AngularJS) &amp; TypeScript</a></li>
<li><a href="./../../mongodb/the-modern-application-stack-part-5-using-reactjs-es6-jsx-to-build-a-ui-the-rise-of-mern/index.html" title="Building an application front-end with ReactJS and ES6">Part 5: Using ReactJS, ES6 &amp; JSX to Build a UI (the rise of MERN)</a></li>
<li><a href="./../../mongodb/rest-mobile-app-amazon-alexa-cloud-services/index.html" title="Using REST APIs from mobile applications and Amazon Alexa">Part 6: Browsers Aren&#8217;t the Only UI – Mobile Apps, Amazon Alexa, Cloud Services&#8230;</a></li>
</ul>
<h4>A simpler way to build your app – MongoDB Stitch, Backend as a Service</h4>
<p><a href="https://www.mongodb.com/cloud/stitch">MongoDB Stitch</a> is a backend as a service (BaaS), giving developers a REST-like API to MongoDB, and composability with other services, backed by a robust system for configuring fine-grained data access controls. Stitch provides native SDKs for JavaScript, iOS, and Android.</p>
<p>Built-in integrations give your application frontend access to your favorite third party services: Twilio, AWS S3, Slack, Mailgun, PubNub, Google, and more. For ultimate flexibility, you can add custom integrations using MongoDB Stitch&#8217;s HTTP service.</p>
<p>MongoDB Stitch allows you to compose multi-stage pipelines that orchestrate data across multiple services; where each stage acts on the data before passing its results on to the next.</p>
<p>Unlike other BaaS offerings, MongoDB Stitch works with your existing as well as new MongoDB clusters, giving you access to the full power and scalability of the database. By defining appropriate data access rules, you can selectively expose your existing MongoDB data to other applications through MongoDB Stitch&#8217;s API.</p>
<p>If you&#8217;d like to try it out, <a href="./../../mongodb/mongodb-stitch-the-latest-and-best-way-to-build-your-app/index.html" title="MongoDB Stitch - the latest, and best way to build your app">step through building an application with MongoDB Stitch</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mongodb/mean_stack_2_mongodb_node_js/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>The Modern Application Stack – Part 1: Introducing The MEAN Stack</title>
		<link>./../../mongodb/modern-application-stack-part-1-introducing-the-mean-stack/index.html</link>
					<comments>./../../mongodb/modern-application-stack-part-1-introducing-the-mean-stack/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 27 Jan 2017 16:29:03 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[angular]]></category>
		<category><![CDATA[es6]]></category>
		<category><![CDATA[Express]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[MEAN]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[REACT]]></category>
		<guid isPermaLink="false">./../../index.html?p=4344</guid>

					<description><![CDATA[Introducing the MEAN and MERN stacks This is the first in a series of blog posts examining the technologies that are driving the development of modern web and mobile applications, notably the MERN and MEAN stacks. The series will go on to step through tutorials to build all layers of an application. Users increasingly demand]]></description>
										<content:encoded><![CDATA[<h4>Introducing the MEAN and MERN stacks</h4>
<p>This is the first in a series of blog posts examining the technologies that are driving the development of modern web and mobile applications, notably the <strong>MERN</strong> and <strong>MEAN</strong> stacks. The series will go on to step through tutorials to build all layers of an application.</p>
<p>Users increasingly demand a far richer experience from web sites – expecting the same level of performance and interactivity they get with native desktop and mobile apps. At the same time, there&#8217;s pressure on developers to deliver new applications faster and continually roll-out enhancements, while ensuring that the application is highly available and can be scaled appropriately when needed. Fortunately, there&#8217;s a (sometimes bewildering) set of enabling technologies that make all of this possible.</p>
<p>If there&#8217;s one thing that ties these technologies together, it&#8217;s JavaScript  and its successors (ES6, TypeScript, JSX, etc.) together with the JSON data format. The days when the role of JavaScript was limited to adding visual effects like flashing headers or pop-up windows are past. Developers now use JavaScript to implement the front-end experience as well as the application logic and even to access the database. There are two dominant JavaScript web app stacks – MEAN (<strong>M</strong>ongoDB, <strong>E</strong>xpress, <strong>A</strong>ngular, <strong>N</strong>ode.js) and MERN (<strong>M</strong>ongoDB, <strong>E</strong>xpress, <strong>R</strong>eact, <strong>N</strong>ode.js) and so we&#8217;ll use those as paths to guide us through the ever-expanding array of tools and frameworks.</p>
<p>This first post serves as a primer for many of these technologies. Subsequent posts in the series take a deep dive into specific topics – working through the end-to-end development of <em>Mongopop</em> &#8211; an application to populate a MongoDB database with realistic data and then perform other operations on that data.</p>
<h4>The MEAN Stack</h4>
<p>We&#8217;ll start with MEAN as it&#8217;s the more established stack but most of what&#8217;s covered here is applicable to <strong>MERN</strong> (swap Angular with React).</p>
<p>MEAN is a set of Open Source components that together, provide an end-to-end framework for building dynamic web applications; starting from top (code running in the browser) to the bottom (database). The stack is made up of:</p>
<ul>
<li><a href="https://angular.io/"><strong>A</strong>ngular</a> (formerly Angular.js, now also known as Angular 2): Front-end web app framework; runs your JavaScript code in the users browser, allowing your application UI to be dynamic</li>
<li><a href="http://expressjs.com/"><strong>E</strong>xpress</a> (sometimes referred to as Express.js): Back-end web application framework running on top of Node.js</li>
<li><a href="https://nodejs.org/en/"><strong>N</strong>ode.js</a> : JavaScript runtime environment – lets you implement your application back-end in JavaScript</li>
<li><a href="https://www.mongodb.com/"><strong>M</strong>ongoDB</a> : Document database – used by your back-end application to store its data as <a href="https://www.mongodb.com/json-and-bson" title="Format of JSON/BSON documents">JSON (JavaScript Object Notation)</a> documents</li>
</ul>
<p>A common theme in the MEAN stack is JavaScript – every line of code you write can be in the same language. You even access the database using MongoDB&#8217;s native, <em>Idiomatic</em> <a href="https://mongodb.github.io/node-mongodb-native/">JavaScript/Node.js driver</a>. What do we mean by idiomatic? Using the driver feels natural to a JavaScript developer as all interaction is performed using familiar concepts such as JavaScript objects and asynchronous execution using either callback functions or promises (explained later). Here&#8217;s an example of inserting an array of 3 JavaScript objects:</p>
<pre><code class="js">myCollection.insertMany([
    {name: {first: "Andrew", last: "Morgan"},
    {name: {first: "Elvis"}, died: 1977},
    {name: {last: "Mainwaring", title: "Captain"}, born: 1885}
])
.then(
    function(results) {
        resolve(results.insertedCount);
    },
    function(err) {
        console.log("Failed to insert Docs: " + err.message);
        reject(err);
    }
)
</code></pre>
<h4>Angular 2</h4>
<p><strong>Angular</strong>, originally created and maintained by Google, runs your JavaScript code within the user&#8217;s web browsers to implement a <em>reactive</em> user interface (UI).  A reactive UI gives the user immediate feedback as they give their input (in contrast to static web forms where you enter all of your data, hit &#8220;Submit&#8221; and wait.</p>
<p><center><img decoding="async" src="./../../wp-content/uploads/2017/01/Reactive_UI.gif" alt="Reactive web application" title="Reactive Angular web application" /></center></p>
<p>Version 1 of Angular was called AngularJS but it was shortened to Angular in  Angular 2 after it was completely rewritten in <a href="https://www.typescriptlang.org/">Typescript</a> (a superset of JavaScript) – Typescript is now also the recommended language for Angular apps to use.</p>
<p>You implement your application front-end as a set of <em>components</em> – each of which consists of your JavaScript (TypeScript) code and an HTML template that includes hooks to execute and use the results from your TypeScript functions. Complex application front-ends can be crafted from many simple (optionally nested) components.</p>
<p>Angular application code can also be executed on the back-end server rather than in a browser, or as a native desktop or mobile application.</p>
<p><img decoding="async" src="./../../wp-content/uploads/2017/01/MEAN_Stack.png" alt="MEAN Stack architecture" title="MEAN Stack architecture" /></p>
<h4>Express</h4>
<p><a href="http://expressjs.com/"><strong>Express</strong></a> is the web application framework that runs your back-end application (JavaScript) code.  Express runs as a module within the Node.js environment.</p>
<p>Express can handle the routing of requests to the right parts of your application (or to different apps running in the same environment).</p>
<p>You can run the app&#8217;s full business logic within Express and even generate the final HTML to be rendered by the user&#8217;s browser. At the other extreme, Express can be used to simply provide a <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">REST API</a> – giving the front-end app access to the resources it needs e.g., the database.</p>
<p>In this blog series, we will use Express to perform two functions:</p>
<ul>
<li>Send the front-end application code to the remote browser when the user browses to our app</li>
<li>Provide a REST API that the front-end can access using HTTP network calls, in order to access the database</li>
</ul>
<h4>Node.js</h4>
<p><a href="https://nodejs.org/">Node.js</a> is a JavaScript runtime environment that runs your back-end application (via Express).</p>
<p>Node.js is based on Google&#8217;s V8 JavaScript engine which is used in the Chrome browsers. It also includes a number of modules that provides features essential for implementing web applications – including networking protocols such as HTTP.  Third party modules, including the MongoDB driver, can be installed, using the <code>npm</code> tool.</p>
<p>Node.js is an asynchronous, event-driven engine where the application makes a request and then continues working on other useful tasks rather than stalling while it waits for a response. On completion of the requested task, the application is informed of the results via a callback. This enables large numbers of operations to be performed in parallel which is essential when scaling applications. MongoDB was also designed to be used asynchronously and so it works well with Node.js applications.</p>
<h4>MongoDB</h4>
<p>MongoDB is an open-source, document database that provides persistence for your application data and is designed with both scalability and developer agility in mind. MongoDB bridges the gap between key-value stores, which are fast and scalable, and relational databases, which have rich functionality. Instead of storing data in rows and columns as one would with a relational database, MongoDB stores JSON documents in collections with dynamic schemas.</p>
<p>MongoDB&#8217;s document data model makes it easy for you to store and combine data of any structure, without giving up sophisticated validation rules, flexible data access, and rich indexing functionality. You can dynamically modify the schema without downtime – vital for rapidly evolving applications.</p>
<p>It can be scaled within and across geographically distributed data centers, providing high levels of availability and scalability. As your deployments grow, the database scales easily with no downtime, and without changing your application.</p>
<p><a href="https://www.mongodb.com/cloud/atlas">MongoDB Atlas</a> is a database as a service for MongoDB, letting you focus on apps instead of ops. With MongoDB Atlas, you only pay for what you use with a convenient hourly billing model. With the click of a button, you can scale up and down when you need to, with no downtime, full security, and high performance.</p>
<p>Our application will access MongoDB via the <a href="https://mongodb.github.io/node-mongodb-native/">JavaScript/Node.js driver</a> which we install as a Node.js module.</p>
<h4>What&#8217;s Done Where?</h4>
<p><em>tl;dr – it&#8217;s flexible.</em></p>
<p>There is clear overlap between the features available in the technologies making up the MEAN stack and it&#8217;s important to decide &#8220;who does what&#8221;.</p>
<p>Perhaps the biggest decision is where the application&#8217;s &#8220;hard work&#8221; will be performed. Both Express and Angular include features to route to pages, run application code, etc. and either can be used to implement the business logic for sophisticated applications. The more traditional approach would be to do it in the back-end in Express. This has several advantages:</p>
<ul>
<li>Likely to be closer to the database and other resources and so can minimise latency if lots of database calls are made</li>
<li>Sensitive data can be kept within this more secure environment</li>
<li>Application code is hidden from the user, protecting your intellectual property</li>
<li>Powerful servers can be used – increasing performance</li>
</ul>
<p>However, there&#8217;s a growing trend to push more of the functionality to Angular running in the user&#8217;s browser. Reasons for this can include:</p>
<ul>
<li>Use the processing power of your users&#8217; machines; reducing the need for expensive resources to power your back-end. This provides a more scalable architecture, where every new user brings their own computing resources with them.</li>
<li>Better response times (assuming that there aren&#8217;t too many trips to the back-end to access the database or other resources)</li>
<li><em>Progressive Applications</em>. Continue to provide (probably degraded) service when the client application cannot contact the back-end (e.g. when the user has no internet connection). Modern browsers allow the application to store data locally and then sync with the back-end when connectivity is restored. </li>
</ul>
<p>Perhaps, a more surprising option for running part of the application logic is within the database. MongoDB has a sophisticated <a href="https://docs.mongodb.com/manual/aggregation/">aggregation framework</a> which can perform a lot of analytics – often more efficiently than in Express or Angular as all of the required data is local.</p>
<p>Another decision is where to validate any data that the user supplies. Ideally, this would be as close to the user as possible – using Angular to check that a provided password meets security rules allows for instantaneous feedback to the user. That doesn&#8217;t mean that there isn&#8217;t value in validating data in the back-end as well, and using <a href="./../../mongodb/adding-document-validation-rules-using-mongodb-compass-1-5/index.html" title="Adding MongoDB document validation rules using MongoDB Compass">MongoDB&#8217;s document validation</a> functionality can guard against buggy software writing erroneous data.</p>
<h4>ReactJS – Rise of the MERN Stack</h4>
<p><img decoding="async" src="./../../wp-content/uploads/2017/01/MERN_Stack.png" alt="MERN Stack architecture with React" title="MERN Stack architecture with React" /></p>
<p>An alternative to Angular is <a href="https://facebook.github.io/react/">React</a> (sometimes referred to as ReactJS), a JavaScript library developed by Facebook to build interactive/reactive user interfaces. Like Angular, React breaks the front-end application down into components. Each component can hold its own state and a parent can pass its state down to its child components and those components can pass changes back to the parent through the use of callback functions.</p>
<p>React components are typically implemented using <a href="https://facebook.github.io/jsx/">JSX</a> – an extension of JavaScript that allows HTML syntax to be embedded within the code:</p>
<pre><code>class HelloMessage extends React.Component {
  render() {
    return &lt;div&gt;Hello {this.props.name}&lt;/div&gt;;
  }
}
</code></pre>
<p>React is most commonly executed within the browser but it can also be run on the back-end server within Node.js, or as a mobile app using <em>React Native</em>.</p>
<p>So should you use Angular 2 or React for your new web application? A quick google search will find you some fairly deep comparisons of the two technologies but in summary, Angular 2 is a little more powerful while React is easier for developers to get up to speed with and use. This blog series will build a near-identical web app using first the MEAN and then the MERN stack – hopefully these posts will help you find a favorite.</p>
<p>The following snapshot from Google Trends suggests that Angular has been much more common for a number of years but that React is gaining ground:</p>
<p><img decoding="async" src="./../../wp-content/uploads/2017/01/ReactJS_vs_Angular.png" alt="Comparing React/ReactJS popularity vs. Angular and Angular 2" title="Comparing React/ReactJS popularity vs. Angular and Angular 2" /></p>
<h4>Why are these stacks important?</h4>
<p>Having a standard application stack makes it much easier and faster to bring in new developers and get them up to speed as there&#8217;s a good chance that they&#8217;ve used the technology elsewhere. For those new to these technologies, there exist some great resources to get you up and running.</p>
<p>From MongoDB upwards, these technologies share a common aim – look after the critical but repetitive stuff in order to free up developers to work where they can really add value: building your killer app in record time.</p>
<p>These are the technologies that are revolutionising the web, building web-based services that look, feel, and perform just as well as native desktop or mobile applications.</p>
<p>The separation of layers, and especially the REST APIs, has led to the breaking down of application silos. Rather than an application being an isolated entity, it can now interact with multiple services through public APIs:</p>
<ol>
<li>Register and log into the application using my Twitter account</li>
<li>Identify where I want to have dinner using Google Maps and Foursquare</li>
<li>Order an Uber to get me there</li>
<li>Have Hue turn my lights off and Nest turn my heating down</li>
<li>Check in on Facebook</li>
<li>&#8230;</li>
</ol>
<h4>Variety &amp; Constant Evolution</h4>
<p>Even when constraining yourself to the JavaScript ecosystem, the ever-expanding array of frameworks, libraries, tools, and languages is both impressive and intimidating at the same time. The great thing is that if you&#8217;re looking for some middleware to perform a particular role, then the chances are good that someone has already built it – the hardest part is often figuring out which of the 5 competing technologies is the best fit for you.</p>
<p>To further complicate matters, it&#8217;s rare for the introduction of one technology not to drag in others for you to get up to speed on: Node.js brings in <code>npm</code>; Angular 2 brings in Typescript, which brings in <code>tsc</code>; React brings in ES6, which brings in Babel; &#8230;.</p>
<p>And of course, none of these technologies are standing still and new versions can require a lot of up-skilling to use – Angular 2 even moved to a different programming language!</p>
<h4>The Evolution of JavaScript</h4>
<p>The JavaScript language itself hasn&#8217;t been immune to change.</p>
<p><a href="https://www.ecma-international.org/">Ecma International</a> was formed to standardise the language specification for JavaScript (and similar language forks) to increase portability – the ideal being that any &#8220;JavaScript&#8221; code can run in any browser or other JavaScript runtime environment.</p>
<p>The most recent, widely supported version is ECMAScript 6 – normally referred to as <a href="http://es6-features.org/#Constants"><em>ES6</em></a>. ES6 is supported by recent versions of Chrome, Opera, Safari, and Node.js). Some platforms (e.g. Firefox and Microsoft Edge) do not yet support all features of ES6. These are some of the key features added in ES6:</p>
<ul>
<li>Classes &amp; modules</li>
<li>Promises – a more convenient way to handle completion or failure of synchronous function calls (compared to callbacks)</li>
<li>Arrow functions –  a concise syntax for writing function expressions</li>
<li>Generators – functions that can yield to allow others to execute</li>
<li>Iterators</li>
<li>Typed arrays</li>
</ul>
<p><a href="https://www.typescriptlang.org/">Typescript</a> is a superset of ES6 (JavaScript); adding static type checking. Angular 2 is written in Typescript and Typescript is the primary language to be used when writing code to run in Angular 2.</p>
<p>Because ES6 and Typescript are not supported in all environments, it is common to transpile the code into an earlier version of JavaScript to make it more portable. In this series&#8217; Angular post, <code>tsc</code> is used to transpile Typescript into JavaScript while the React post uses Babel (via <code>react-script</code>) to transpile our ES6 code.</p>
<p>And of course, JavaScript is augmented by numerous libraries. The Angular 2 post in this series uses <em>Observables</em> from the <a href="https://github.com/Reactive-Extensions/RxJS">RxJS reactive libraries</a> which greatly simplify making asynchronous calls to the back-end (a pattern historically referred to as AJAX).</p>
<h4>Summary &amp; What&#8217;s Next in the Series</h4>
<p>This post has introduced some of the technologies used to build modern, reactive, web applications – most notably the MEAN and MERN stacks. If you want to learn exactly how to use these then please continue to follow this blog series which steps through building the <a href="https://github.com/am-MongoDB/MongoDB-Mongopop">MongoPop</a> application:</p>
<ul>
<li><a href="./../../mongodb/modern-application-stack-part-1-introducing-the-mean-stack/index.html" title="MEAN stack, MERN stack">Part 1: Introducing The MEAN Stack (and the young MERN upstart)</a></li>
<li><a href="./../../mongodb/mean_stack_2_mongodb_node_js/index.html" title="Using MongoDB With Node.js">Part 2: Using MongoDB With Node.js</a></li>
<li><a href="./../../mongodb/the-modern-application-stack-part-3-building-a-rest-api-using-express-js/index.html" title="Building REST API for MongoDB using Express JS">Part 3: Building a REST API with Express.js</a></li>
<li><a href="./../../mongodb/the-modern-application-stack-part-4-building-a-client-ui-using-angular-2-formerly-angularjs-typescript/index.html" title="Completing the MEAN stack – Mongopop Angular2 client">Part 4: Building a Client UI Using Angular 2 (formerly AngularJS) &amp; TypeScript</a></li>
<li><a href="./../../mongodb/the-modern-application-stack-part-5-using-reactjs-es6-jsx-to-build-a-ui-the-rise-of-mern/index.html" title="Building an application front-end with ReactJS and ES6">Part 5: Using ReactJS, ES6 &amp; JSX to Build a UI (the rise of MERN)</a></li>
<li><a href="./../../mongodb/rest-mobile-app-amazon-alexa-cloud-services/index.html" title="Using REST APIs from mobile applications and Amazon Alexa">Part 6: Browsers Aren&#8217;t the Only UI – Mobile Apps, Amazon Alexa, Cloud Services&#8230;</a></li>
</ul>
<p>As already covered in this post, the MERN and MEAN stacks are evolving rapidly and new JavaScript frameworks are being added all of the time. Inevitably, some of the details in this series will become dated but the concepts covered will remain relevant.</p>
<h4>A simpler way to build your app – MongoDB Stitch, Backend as a Service</h4>
<p><a href="https://www.mongodb.com/cloud/stitch">MongoDB Stitch</a> is a backend as a service (BaaS), giving developers a REST-like API to MongoDB, and composability with other services, backed by a robust system for configuring fine-grained data access controls. Stitch provides native SDKs for JavaScript, iOS, and Android.</p>
<p>Built-in integrations give your application frontend access to your favorite third party services: Twilio, AWS S3, Slack, Mailgun, PubNub, Google, and more. For ultimate flexibility, you can add custom integrations using MongoDB Stitch&#8217;s HTTP service.</p>
<p>MongoDB Stitch allows you to compose multi-stage pipelines that orchestrate data across multiple services; where each stage acts on the data before passing its results on to the next.</p>
<p>Unlike other BaaS offerings, MongoDB Stitch works with your existing as well as new MongoDB clusters, giving you access to the full power and scalability of the database. By defining appropriate data access rules, you can selectively expose your existing MongoDB data to other applications through MongoDB Stitch&#8217;s API.</p>
<p>If you&#8217;d like to try it out, <a href="./../../mongodb/mongodb-stitch-the-latest-and-best-way-to-build-your-app/index.html" title="MongoDB Stitch - the latest, and best way to build your app">step through building an application with MongoDB Stitch</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mongodb/modern-application-stack-part-1-introducing-the-mean-stack/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Configuring KeystoneJS to Use MongoDB Atlas</title>
		<link>./../../mongodb/configuring-keystonejs-to-use-mongodb-atlas/index.html</link>
					<comments>./../../mongodb/configuring-keystonejs-to-use-mongodb-atlas/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 16 Sep 2016 08:48:27 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[CMS]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[KeystoneJS]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Atlas]]></category>
		<category><![CDATA[node.js]]></category>
		<guid isPermaLink="false">./../../index.html?p=4239</guid>

					<description><![CDATA[KeystoneJS is an open source framework for building web applications and Content Management Systems. It&#8217;s built on top of MongoDB, Express, and Node.js &#8211; key components of the ubiquitous MEAN stack. This post explains why MongoDB Atlas is an ideal choice for KeystoneJS and then goes on to show how to configure KeystoneJS to use]]></description>
										<content:encoded><![CDATA[<p>KeystoneJS is an open source framework for building web applications and Content Management Systems. It&#8217;s built on top of MongoDB, Express, and Node.js &#8211; key components of the ubiquitous MEAN stack.</p>
<p>This post explains why MongoDB Atlas is an ideal choice for KeystoneJS and then goes on to show how to configure KeystoneJS to use it.</p>
<h1>Why are KeystoneJS and MongoDB Atlas a Good Match</h1>
<p>The MEAN stack is extremely popular and well supported and it&#8217;s the go to platform when developing modern applications. For its part, MongoDB brings flexible schemas, rich queries, an idiomatic Node.js driver, and simple to use high availability and scaling.</p>
<p><a href="https://www.mongodb.com/cloud">MongoDB Atlas</a> provides all of the features of MongoDB, without the operational heavy lifting required for any new application. MongoDB Atlas is available on demand through a pay-as-you-go model and billed on an hourly basis, letting you focus on what you do best.</p>
<p>It’s easy to get started – use a simple GUI to select the instance size, region, and features you need. MongoDB Atlas provides:</p>
<ul>
<li>Security features to protect access to your data</li>
<li>Built in replication for always-on availability, tolerating complete data center failure</li>
<li>Backups and point in time recovery to protect against data corruption</li>
<li>Fine-grained monitoring to let you know when to scale. Additional instances can be provisioned with the push of a button</li>
<li>Automated patching and one-click upgrades for new major versions of the database, enabling you to take advantage of the latest and greatest MongoDB features</li>
<li>A choice of cloud providers, regions, and billing options</li>
</ul>
<p>Like KeystoneJS, MongoDB Atlas is a natural fit for users looking to simplify their development and operations work, letting them focus on what makes their application unique rather than commodity (albeit essential) plumbing.</p>
<h1>Installing KeystoneJS and Configuring it to Use MongoDB Atlas</h1>
<p>Before starting with KeystoneJS, you should launch your MongoDB cluster using <a href="https://www.mongodb.com/cloud">MongoDB Atlas</a> and then (optionally) create a user with read and write privileges for just the database that will be used for this project, as shown in Figure 1. You must also add the IP address of your application server to the IP Whitelist in the MongoDB Atlas security tab.</p>
<div id="attachment_4240" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/Add_KeystoneJS_user.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4240" src="./../../wp-content/uploads/2016/09/Add_KeystoneJS_user-1024x891.png" alt="Creating KeystoneJS user in MongoDB Atlas" width="480" height="418" class="size-large wp-image-4240" srcset="./../../wp-content/uploads/2016/09/Add_KeystoneJS_user-1024x891.png 1024w, ./../../wp-content/uploads/2016/09/Add_KeystoneJS_user-300x261.png 300w, ./../../wp-content/uploads/2016/09/Add_KeystoneJS_user-768x668.png 768w, ./../../wp-content/uploads/2016/09/Add_KeystoneJS_user.png 2010w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4240" class="wp-caption-text">Figure 1: Creating KeystoneJS user in MongoDB Atlas</p></div>
<p>If it isn&#8217;t already installed on your system, download and install Node.js:</p>
<p><script src="https://gist.github.com/am-MongoDB/3bbb946bb35fd8054e95adf92b96f103.js"></script><br />
You should then add the <code>bin</code> sub-folder to your <code>.bash_profile</code> file and then install KeystoneJS:</p>
<p><script src="https://gist.github.com/am-MongoDB/ada983d4879a3439751da83044644790.js"></script></p>
<p>Before starting KeystoneJS you need to configure it with details on how to connect to your specific MongoDB Atlas cluster. This is done by updating the <code>MONGO_URI</code> value within the <code>.env</code> file:</p>
<p><script src="https://gist.github.com/am-MongoDB/2b40abeec5e34a9443a26012507417d6.js"></script></p>
<p>The URI contains these components:</p>
<ul>
<li><code>keystonejs_user</code> is the name of the user you created in the MongoDB Atlas UI</li>
<li><code>my_password</code> is the password you chose when creating the user in MongoDB Atlas</li>
<li><code>cluster0-shard-00-00-qfovx.mongodb.net</code>, <code>cluster0-shard-00-01-qfovx.mongodb.net</code>, &amp; <code>cluster0-shard-00-02-qfovx.mongodb.net</code> are the hostnames of the instances in your MongoDB Atlas replica set (click on the &#8220;CONNECT&#8221; button in the MongoDB Atlas UI if you don&#8217;t have these)</li>
<li><code>27017</code> is the standard MongoDB port number</li>
<li><code>clusterdb</code> is the name of the database (schema) that KeystoneJS will use (note that this must match the project name used when installing KeystoneJS as well as the database you granted the user access to)</li>
<li>To enforce security, MongoDB Atlas mandates that the <code>ssl</code> option is used</li>
<li><code>admin</code> is the database that&#8217;s being used to store the credentials for <code>keystonejs_user</code></li>
</ul>
<p>Clients connect to KeystoneJS through port 3000 and so you must open that port in your firewall.</p>
<p>You can then start KeystoneJS:</p>
<pre><code>$ node keystone
</code></pre>
<p><script src="https://gist.github.com/am-MongoDB/7e0305ec2a8acf6a9891a44da048987a.js"></script></p>
<h1>Testing the Configuration</h1>
<p>Browse to the application at <code>http://address-of-app-server:3000/</code> as shown in Figure 2.</p>
<div id="attachment_4241" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/KeystoneJS.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4241" src="./../../wp-content/uploads/2016/09/KeystoneJS-1024x648.png" alt="KeystoneJS Running on MongoDB Atlas" width="480" height="304" class="size-large wp-image-4241" srcset="./../../wp-content/uploads/2016/09/KeystoneJS-1024x648.png 1024w, ./../../wp-content/uploads/2016/09/KeystoneJS-300x190.png 300w, ./../../wp-content/uploads/2016/09/KeystoneJS-768x486.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4241" class="wp-caption-text">Figure 2: KeystoneJS Running on MongoDB Atlas</p></div>
<p>Sign in using the credentials shown and then confirm that you can upload some images to a gallery and create a new page as shown in Figure 3.</p>
<div id="attachment_4242" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/create_KeystoneJS_post_on_MongoDB_Atlas.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4242" src="./../../wp-content/uploads/2016/09/create_KeystoneJS_post_on_MongoDB_Atlas-1024x943.png" alt="Create a Page in KeystoneJS with Data Stored in MongoDB Atlas" width="480" height="442" class="size-large wp-image-4242" srcset="./../../wp-content/uploads/2016/09/create_KeystoneJS_post_on_MongoDB_Atlas-1024x943.png 1024w, ./../../wp-content/uploads/2016/09/create_KeystoneJS_post_on_MongoDB_Atlas-300x276.png 300w, ./../../wp-content/uploads/2016/09/create_KeystoneJS_post_on_MongoDB_Atlas-768x707.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4242" class="wp-caption-text">Figure 3: Create a Page in KeystoneJS with Data Stored in MongoDB Atlas</p></div>
<p>After saving the page, confirm that you can browse to the newly created post (Figure 4).</p>
<div id="attachment_4243" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/view_KeystoneJS_post_on_MongoDB_Atlas.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4243" src="./../../wp-content/uploads/2016/09/view_KeystoneJS_post_on_MongoDB_Atlas-1024x905.png" alt="View KeystoneJS Post with Data Read from MongoDB Atlas" width="480" height="424" class="size-large wp-image-4243" srcset="./../../wp-content/uploads/2016/09/view_KeystoneJS_post_on_MongoDB_Atlas-1024x905.png 1024w, ./../../wp-content/uploads/2016/09/view_KeystoneJS_post_on_MongoDB_Atlas-300x265.png 300w, ./../../wp-content/uploads/2016/09/view_KeystoneJS_post_on_MongoDB_Atlas-768x679.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4243" class="wp-caption-text">Figure 4: View KeystoneJS Post with Data Read from MongoDB Atlas</p></div>
<p>Optionally, confirm that, MongoDB Atlas really is being used by KeystoneJS, you can connect using the MongoDB shell:</p>
<p><script src="https://gist.github.com/am-MongoDB/ec422d08c7a5560f776b5638f06185d6.js"></script></p>
<p>To visually navigate through the schema and data created by KeystoneJS, <a href="https://www.mongodb.com/download-center?jmp=nav#compass">download and install MongoDB Compass</a>. The same credentials can be used to connect Compass to your MongoDB database – Figure 5.</p>
<div id="attachment_4244" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-1.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4244" src="./../../wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-1-1024x794.png" alt="Connect MongoDB Compass to MongoDB Atlas Database" width="480" height="372" class="size-large wp-image-4244" srcset="./../../wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-1-1024x794.png 1024w, ./../../wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-1-300x233.png 300w, ./../../wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-1-768x595.png 768w, ./../../wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-1.png 1798w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4244" class="wp-caption-text">Figure 5: Connect MongoDB Compass to MongoDB Atlas Database</p></div>
<p>Navigate through the structure of the data in the <code>clusterdb</code> database (Figure 6) and view the JSON documents (Figure 7).</p>
<div id="attachment_4245" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/Compass_KeystoneJS_Schema.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4245" src="./../../wp-content/uploads/2016/09/Compass_KeystoneJS_Schema-1024x712.png" alt="Explore KeystoneJS Schema Using MongoDB Compass" width="480" height="334" class="size-large wp-image-4245" srcset="./../../wp-content/uploads/2016/09/Compass_KeystoneJS_Schema-1024x712.png 1024w, ./../../wp-content/uploads/2016/09/Compass_KeystoneJS_Schema-300x209.png 300w, ./../../wp-content/uploads/2016/09/Compass_KeystoneJS_Schema-768x534.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4245" class="wp-caption-text">Figure 6: Explore KeystoneJS Schema Using MongoDB Compass</p></div>
<div id="attachment_4246" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/Compass_KeystoneJS_Data.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4246" src="./../../wp-content/uploads/2016/09/Compass_KeystoneJS_Data-1024x435.png" alt="View Documents Stored by KeystoneJS Using MongoDB Atlas" width="480" height="204" class="size-large wp-image-4246" srcset="./../../wp-content/uploads/2016/09/Compass_KeystoneJS_Data-1024x435.png 1024w, ./../../wp-content/uploads/2016/09/Compass_KeystoneJS_Data-300x128.png 300w, ./../../wp-content/uploads/2016/09/Compass_KeystoneJS_Data-768x327.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4246" class="wp-caption-text">Figure 7: View Documents Stored by KeystoneJS Using MongoDB Atlas</p></div>
<h1>Next Steps</h1>
<p>While MongoDB Atlas radically simplifies the operation of MongoDB there are still some decisions to take to ensure the best performance and reliability for your application. The <a href="https://www.mongodb.com/collateral/mongodb-atlas-best-practices">MongoDB Atlas Best Practices white paper</a> provides guidance on best practices for deploying, managing, and optimizing the performance of your database with MongoDB Atlas.</p>
<p>The guide outlines considerations for achieving performance at scale with MongoDB Atlas across a number of key dimensions, including instance size selection, application patterns, schema design and indexing, and disk I/O. While this guide is broad in scope, it is not exhaustive. Following the recommendations in the guide will provide a solid foundation for ensuring optimal application performance.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mongodb/configuring-keystonejs-to-use-mongodb-atlas/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Using PencilBlue with MongoDB Atlas</title>
		<link>./../../mongodb/using-pencilblue-with-mongodb-atlas/index.html</link>
					<comments>./../../mongodb/using-pencilblue-with-mongodb-atlas/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Thu, 15 Sep 2016 17:31:07 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Atlas]]></category>
		<category><![CDATA[MongoDB Compass]]></category>
		<category><![CDATA[node.js]]></category>
		<category><![CDATA[PencilBlue]]></category>
		<guid isPermaLink="false">./../../index.html?p=4215</guid>

					<description><![CDATA[PencilBlue is a Node.js based, open source blogging and Content Management System, targeted at enterprise grade websites. This post explains why MongoDB Atlas is an ideal choice for PencilBlue and then goes on to show how to configure PencilBlue to use it. Why MongoDB Atlas is the Ideal Database for PencilBlue MongoDB delivers flexible schemas,]]></description>
										<content:encoded><![CDATA[<p>PencilBlue is a Node.js based, open source blogging and Content Management System, targeted at enterprise grade websites.</p>
<p>This post explains why MongoDB Atlas is an ideal choice for PencilBlue and then goes on to show how to configure PencilBlue to use it.</p>
<h1>Why MongoDB Atlas is the Ideal Database for PencilBlue</h1>
<p>MongoDB delivers flexible schemas, rich queries, an idiomatic Node.js driver, and simple to use high availability and scaling. This makes it the go-to database for anyone looking to build applications on Node.js.</p>
<p><a href="https://www.mongodb.com/cloud">MongoDB Atlas</a> provides all of the features of MongoDB, without the operational heavy lifting required for any new application. MongoDB Atlas is available on demand through a pay-as-you-go model and billed on an hourly basis, letting you focus on what you do best.</p>
<p>It’s easy to get started – use a simple GUI to select the instance size, region, and features you need. MongoDB Atlas provides:</p>
<ul>
<li>Security features to protect access to your data</li>
<li>Built in replication for always-on availability, tolerating complete data center failure</li>
<li>Backups and point in time recovery to protect against data corruption</li>
<li>Fine-grained monitoring to let you know when to scale. Additional instances can be provisioned with the push of a button</li>
<li>Automated patching and one-click upgrades for new major versions of the database, enabling you to take advantage of the latest and greatest MongoDB features</li>
<li>A choice of cloud providers, regions, and billing options</li>
</ul>
<p>Like PencilBlue, MongoDB Atlas is a natural fit for users looking to simplify their development and operations work, letting them focus on what makes their application unique rather than commodity (albeit essential) plumbing.</p>
<h1>Installing PencilBlue and Connecting it to MongoDB Atlas</h1>
<p>Before starting with PencilBlue, you should launch your MongoDB cluster using <a href="https://www.mongodb.com/cloud">MongoDB Atlas</a> and then (optionally) create a user with read and write privileges for just the database that will be used for this project, as shown in Figure 1.</p>
<div id="attachment_4216" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/PencilBlue_user.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4216" src="./../../wp-content/uploads/2016/09/PencilBlue_user-910x1024.png" alt="Adding a PencilBlue User to MongoDB Atlas" width="480" height="540" class="size-large wp-image-4216" srcset="./../../wp-content/uploads/2016/09/PencilBlue_user-910x1024.png 910w, ./../../wp-content/uploads/2016/09/PencilBlue_user-267x300.png 267w, ./../../wp-content/uploads/2016/09/PencilBlue_user-768x864.png 768w, ./../../wp-content/uploads/2016/09/PencilBlue_user.png 1596w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4216" class="wp-caption-text">Figure 1: Adding a PencilBlue User to MongoDB Atlas</p></div>
<p>You must also add your IP address to the IP Whitelist in the MongoDB Atlas security tab (Figure 2).</p>
<div id="attachment_4217" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/PencilBlue_whitelist_IP.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4217" src="./../../wp-content/uploads/2016/09/PencilBlue_whitelist_IP-1024x701.png" alt="Add IP Address to MongoDB Atlas Whitelist" width="480" height="329" class="size-large wp-image-4217" srcset="./../../wp-content/uploads/2016/09/PencilBlue_whitelist_IP-1024x701.png 1024w, ./../../wp-content/uploads/2016/09/PencilBlue_whitelist_IP-300x205.png 300w, ./../../wp-content/uploads/2016/09/PencilBlue_whitelist_IP-768x526.png 768w, ./../../wp-content/uploads/2016/09/PencilBlue_whitelist_IP.png 1502w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4217" class="wp-caption-text">Figure 2: Add IP Address to MongoDB Atlas Whitelist</p></div>
<p>If it isn&#8217;t already installed on your system, download and install Node.js:</p>
<pre><code>$ curl https://nodejs.org/dist/v4.4.7/node-v4.4.7-linux-x64.tar.xz -o node.tar.xz
$ tar xf node.tar.xz
</code></pre>
<p>You should then add the <code>bin</code> sub-folder to your <code>.bash_profile</code> before installing the PencilBlue command line interface (CLI):</p>
<pre><code>$ sudo npm install -g pencilblue-cli
Password:
npm WARN engine pencilblue-cli@0.3.1: wanted: {"node":"&gt;= 4.4.7"} (current: {"node":"0.12.5","npm":"2.11.2"})
/usr/local/bin/pencilblue -&gt; /usr/local/lib/node_modules/pencilblue-cli/lib/pencilblue-cli.js
/usr/local/bin/pbctrl -&gt; /usr/local/lib/node_modules/pencilblue-cli/lib/pencilblue-cli.js
pencilblue-cli@0.3.1 /usr/local/lib/node_modules/pencilblue-cli
├── process@0.11.8
├── colors@1.1.2
├── q@1.4.1
├── shelljs@0.7.3 (interpret@1.0.1, rechoir@0.6.2, glob@7.0.5)
└── prompt@1.0.0 (revalidator@0.1.8, pkginfo@0.4.0, read@1.0.7, winston@2.1.1, utile@0.3.0)
</code></pre>
<p>The CLI can then be used to install and configure PencilBlue itself:</p>
<pre><code>$ pbctrl install PencilBlue
Site Name:  (My PencilBlue Site) PokeSite
Site Root:  (http://localhost:8080)/ 
Address to bind to:  (0.0.0.0) 
Site Port:  (8080) 
MongoDB URL:  (mongodb://127.0.0.1:27017/) mongodb://pencilblue_user:my_password@cluster0-shard-00-00-qfovx.mongodb.net:27017,cluster0-shard-00-01-qfovx.mongodb.net:27017,cluster0-shard-00-02-qfovx.mongodb.net:27017/?ssl=true&amp;authSource=admin
Database Name:  (pencilblue) clusterdb
Do you want to install Bower components?:  (y/N) 
Cloning PencilBlue from github...
Cloning into 'PencilBlue'...
Installing npm modules...
...
Creating config.js...
Installation completed.
</code></pre>
<p>Note that if you need to change the configuration (e.g., to specify a new URL to connect to MongoDB) then edit the <code>config.js</code> file that was created during this step.</p>
<p>The MongoDB URL you provided contains these components:</p>
<ul>
<li><code>pencilblue_user</code> is the name of the user you created in the MongoDB Atlas UI</li>
<li><code>my_password</code> is the password you chose when creating the user in MongoDB Atlas</li>
<li><code>cluster0-shard-00-00-qfovx.mongodb.net</code>, <code>cluster0-shard-00-01-qfovx.mongodb.net</code>, &amp; <code>cluster0-shard-00-02-qfovx.mongodb.net</code> are the hostnames of the instances in your MongoDB Atlas replica set (click on the &#8220;CONNECT&#8221; button in the MongoDB Atlas UI if you don&#8217;t have these – Figure 3)</li>
<li><code>27017</code> is the standard MongoDB port number</li>
<li>To enforce security, MongoDB Atlas mandates that the <code>ssl</code> option is used</li>
<li><code>admin</code> is the database that&#8217;s being used to store the credentials for <code>pencilblue_user</code></li>
</ul>
<div id="attachment_4218" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/PencilBlue_Find_Connect_String.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4218" src="./../../wp-content/uploads/2016/09/PencilBlue_Find_Connect_String-1024x414.png" alt="Find the Hostnames From the MongoDB Atlas UI" width="480" height="194" class="size-large wp-image-4218" srcset="./../../wp-content/uploads/2016/09/PencilBlue_Find_Connect_String-1024x414.png 1024w, ./../../wp-content/uploads/2016/09/PencilBlue_Find_Connect_String-300x121.png 300w, ./../../wp-content/uploads/2016/09/PencilBlue_Find_Connect_String-768x310.png 768w, ./../../wp-content/uploads/2016/09/PencilBlue_Find_Connect_String.png 1520w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4218" class="wp-caption-text">Figure 3: Find the Hostnames From the MongoDB Atlas UI</p></div>
<p><code>clusterdb</code> is the name of the database (schema) that PencilBlue will use (note that unlike some frameworks, the database name is specified separately rather than being embedded in the MongoDB URL).</p>
<p>The PencilBlue process can now be started:</p>
<pre><code>$ cd PencilBlue/
$ pbctrl start
</code></pre>
<h1>Confirm that MongoDB Atlas is Being Used</h1>
<p>At this point, it is possible to connect to MongoDB Atlas using the MongoDB shell (we&#8217;ll look at an easier way to navigate the data later) to confirm that the schema has been created:</p>
<pre><code>$ mongo mongodb://cluster0-shard-00-00-qfovx.mongodb.net:27017,cluster0-shard-00-01-qfovx.mongodb.net:27017,cluster0-shard-00-02-qfovx.mongodb.net:27017/admin?replicaSet=Cluster0-shard-0 --ssl --username billy --password my_password

Cluster0-shard-0:PRIMARY&gt; show dbs
admin      0.000GB
clusterdb  0.008GB
local      0.007GB

Cluster0-shard-0:PRIMARY&gt; use clusterdb
switched to db clusterdb

Cluster0-shard-0:PRIMARY&gt; show collections
article
auth_token
comment
custom_object
custom_object_type
fs.chunks
fs.files
job_log
lock
media
page
password_reset
plugin
plugin_settings
section
server_registry
session
setting
theme_settings
topic
unverified_user
user
</code></pre>
<h1>Create Your First Page in PencilBlue</h1>
<p>Browse to the application at <a href="http://localhost:8080/">http://localhost:8080/</a> as shown in Figure 4 and create a user account.</p>
<div id="attachment_4219" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/PencilBlue_Browser.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4219" src="./../../wp-content/uploads/2016/09/PencilBlue_Browser-1016x1024.png" alt="Register User in PencilBlue" width="480" height="484" class="size-large wp-image-4219" srcset="./../../wp-content/uploads/2016/09/PencilBlue_Browser-1016x1024.png 1016w, ./../../wp-content/uploads/2016/09/PencilBlue_Browser-150x150.png 150w, ./../../wp-content/uploads/2016/09/PencilBlue_Browser-298x300.png 298w, ./../../wp-content/uploads/2016/09/PencilBlue_Browser-768x774.png 768w, ./../../wp-content/uploads/2016/09/PencilBlue_Browser-144x144.png 144w, ./../../wp-content/uploads/2016/09/PencilBlue_Browser.png 1750w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4219" class="wp-caption-text">Figure 4: Register User in PencilBlue</p></div>
<p>You&#8217;re then able to login and create your first page (Figure 5).</p>
<div id="attachment_4220" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/PencilBlue_Create_content.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4220" src="./../../wp-content/uploads/2016/09/PencilBlue_Create_content-1024x973.png" alt="Create a New Page Using PencilBlue" width="480" height="456" class="size-large wp-image-4220" srcset="./../../wp-content/uploads/2016/09/PencilBlue_Create_content-1024x973.png 1024w, ./../../wp-content/uploads/2016/09/PencilBlue_Create_content-300x285.png 300w, ./../../wp-content/uploads/2016/09/PencilBlue_Create_content-768x730.png 768w, ./../../wp-content/uploads/2016/09/PencilBlue_Create_content.png 1902w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4220" class="wp-caption-text">Figure 5: Create a New Page Using PencilBlue</p></div>
<p>After saving, the new page can be viewed (Figure 6).</p>
<div id="attachment_4221" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/PencilBlue_Page.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4221" src="./../../wp-content/uploads/2016/09/PencilBlue_Page-776x1024.png" alt="View Pokémon Page in PencilBlue" width="480" height="633" class="size-large wp-image-4221" srcset="./../../wp-content/uploads/2016/09/PencilBlue_Page-776x1024.png 776w, ./../../wp-content/uploads/2016/09/PencilBlue_Page-227x300.png 227w, ./../../wp-content/uploads/2016/09/PencilBlue_Page-768x1014.png 768w, ./../../wp-content/uploads/2016/09/PencilBlue_Page.png 1620w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4221" class="wp-caption-text">Figure 6: View Pokémon Page in PencilBlue</p></div>
<p>To visually navigate through the PencilBlue schema and data, <a href="https://www.mongodb.com/download-center?jmp=nav#compass">download and install MongoDB Compass</a>. Use your MongoDB Atlas credentials to connect Compass to your MongoDB database – Figure 7.</p>
<div id="attachment_4222" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/PencilBlue_Connect_Compass_to_MongoDB_Atlas.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4222" src="./../../wp-content/uploads/2016/09/PencilBlue_Connect_Compass_to_MongoDB_Atlas-1024x839.png" alt="Connect MongoDB Compass to MongoDB Atlas" width="480" height="393" class="size-large wp-image-4222" srcset="./../../wp-content/uploads/2016/09/PencilBlue_Connect_Compass_to_MongoDB_Atlas-1024x839.png 1024w, ./../../wp-content/uploads/2016/09/PencilBlue_Connect_Compass_to_MongoDB_Atlas-300x246.png 300w, ./../../wp-content/uploads/2016/09/PencilBlue_Connect_Compass_to_MongoDB_Atlas-768x629.png 768w, ./../../wp-content/uploads/2016/09/PencilBlue_Connect_Compass_to_MongoDB_Atlas.png 1802w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4222" class="wp-caption-text">Figure 7: Connect MongoDB Compass to MongoDB Atlas</p></div>
<p>Navigate through the structure of the data in the <code>clusterdb</code> database (Figure 8); view the JSON documents (Figure 9) and check the indexes (Figure 10).</p>
<div id="attachment_4223" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/PencilBlue_Compass_Schema.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4223" src="./../../wp-content/uploads/2016/09/PencilBlue_Compass_Schema-1024x594.png" alt="Explore PencilBlue Schema Using MongoDB Compass" width="480" height="278" class="size-large wp-image-4223" srcset="./../../wp-content/uploads/2016/09/PencilBlue_Compass_Schema-1024x594.png 1024w, ./../../wp-content/uploads/2016/09/PencilBlue_Compass_Schema-300x174.png 300w, ./../../wp-content/uploads/2016/09/PencilBlue_Compass_Schema-768x445.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4223" class="wp-caption-text">Figure 8: Explore PencilBlue Schema Using MongoDB Compass</p></div>
<div id="attachment_4224" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/PencilBlue_Compass_Document.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4224" src="./../../wp-content/uploads/2016/09/PencilBlue_Compass_Document-1024x595.png" alt="View PencilBlue Documents in MongoDB Compass" width="480" height="279" class="size-large wp-image-4224" srcset="./../../wp-content/uploads/2016/09/PencilBlue_Compass_Document-1024x595.png 1024w, ./../../wp-content/uploads/2016/09/PencilBlue_Compass_Document-300x174.png 300w, ./../../wp-content/uploads/2016/09/PencilBlue_Compass_Document-768x446.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4224" class="wp-caption-text">Figure 9: View PencilBlue Documents in MongoDB Compass</p></div>
<div id="attachment_4225" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/PencilBlue_Compass_Indexes.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4225" src="./../../wp-content/uploads/2016/09/PencilBlue_Compass_Indexes-1024x594.png" alt="View PencilBlue Indexes Using MongoDB Compass" width="480" height="278" class="size-large wp-image-4225" srcset="./../../wp-content/uploads/2016/09/PencilBlue_Compass_Indexes-1024x594.png 1024w, ./../../wp-content/uploads/2016/09/PencilBlue_Compass_Indexes-300x174.png 300w, ./../../wp-content/uploads/2016/09/PencilBlue_Compass_Indexes-768x446.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4225" class="wp-caption-text">Figure 10: View PencilBlue Indexes Using MongoDB Compass</p></div>
<h1>Next Steps</h1>
<p>While MongoDB Atlas radically simplifies the operation of MongoDB there are still some decisions to take to ensure the best performance and reliability for your application. The <a href="https://www.mongodb.com/collateral/mongodb-atlas-best-practices">MongoDB Atlas Best Practices white paper</a> provides guidance on best practices for deploying, managing, and optimizing the performance of your database with MongoDB Atlas.</p>
<p>The guide outlines considerations for achieving performance at scale with MongoDB Atlas across a number of key dimensions, including instance size selection, application patterns, schema design and indexing, and disk I/O. While this guide is broad in scope, it is not exhaustive. Following the recommendations in the guide will provide a solid foundation for ensuring optimal application performance.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mongodb/using-pencilblue-with-mongodb-atlas/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MongoDB Atlas as The Data Store for Apostrophe</title>
		<link>./../../mongodb/atlas_apostrophe/index.html</link>
					<comments>./../../mongodb/atlas_apostrophe/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Thu, 15 Sep 2016 16:45:04 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[apostrophe]]></category>
		<category><![CDATA[Express]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Atlas]]></category>
		<category><![CDATA[node.js]]></category>
		<guid isPermaLink="false">./../../index.html?p=4190</guid>

					<description><![CDATA[Apostrophe is a Content Management Systems that&#8217;s designed to build content-driven web sites. Because of their ease of use, Apostrophe is built upon MongoDB and Node.js. This post explains why MongoDB Atlas is an ideal choice for Apostrophe and then goes on to show how to configure Apostrophe to use it. Why MongoDB Atlas is]]></description>
										<content:encoded><![CDATA[<p>Apostrophe is a Content Management Systems that&#8217;s designed to build content-driven web sites. Because of their ease of use, Apostrophe is built upon MongoDB and Node.js.</p>
<p>This post explains why MongoDB Atlas is an ideal choice for Apostrophe and then goes on to show how to configure Apostrophe to use it.</p>
<h4>Why MongoDB Atlas is the Ideal Database for Apostrophe</h4>
<p>MongoDB delivers flexible schemas, rich queries, an idiomatic Node.js driver, and simple to use high availability and scaling. This makes it the go-to database for anyone looking to build applications on Node.js.</p>
<p><a href="https://www.mongodb.com/cloud">MongoDB Atlas</a> provides all of the features of MongoDB, without the operational heavy lifting required for any new application. MongoDB Atlas is available on demand through a pay-as-you-go model and billed on an hourly basis, letting you focus on what you do best.</p>
<p>It’s easy to get started – use a simple GUI to select the instance size, region, and features you need. MongoDB Atlas provides:</p>
<ul>
<li>Security features to protect access to your data</li>
<li>Built in replication for always-on availability, tolerating complete data center failure</li>
<li>Backups and point in time recovery to protect against data corruption</li>
<li>Fine-grained monitoring to let you know when to scale. Additional instances can be provisioned with the push of a button</li>
<li>Automated patching and one-click upgrades for new major versions of the database, enabling you to take advantage of the latest and greatest MongoDB features</li>
<li>A choice of cloud providers, regions, and billing options</li>
</ul>
<p>Like Apostrophe, MongoDB Atlas is a natural fit for users looking to simplify their development and operations work, letting them focus on what makes their application unique rather than commodity (albeit essential) plumbing.</p>
<h4>Installing Apostrophe and Setting it up to Use MongoDB Atlas</h4>
<p>Before starting with Apostrophe, you should launch your MongoDB cluster using <a href="https://www.mongodb.com/cloud">MongoDB Atlas</a> and then (optionally) create a user with read and write privileges for just the database that will be used for this project, as shown in Figure 1. You must also add the IP address of your application server to the IP Whitelist in the MongoDB Atlas security tab.</p>
<div id="attachment_4192" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/Apostrophe_Create_DB_user.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4192" class="size-large wp-image-4192" src="./../../wp-content/uploads/2016/09/Apostrophe_Create_DB_user-983x1024.png" alt="Creating an Apostrophe user in MongoDB Atlas" width="480" height="500" srcset="./../../wp-content/uploads/2016/09/Apostrophe_Create_DB_user-983x1024.png 983w, ./../../wp-content/uploads/2016/09/Apostrophe_Create_DB_user-288x300.png 288w, ./../../wp-content/uploads/2016/09/Apostrophe_Create_DB_user-768x800.png 768w, ./../../wp-content/uploads/2016/09/Apostrophe_Create_DB_user.png 1672w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4192" class="wp-caption-text">Figure 1:Creating an Apostrophe user in MongoDB Atlas</p></div>
<p>If it isn&#8217;t already installed on your system, download and install Node.js:</p>
<p><script src="https://gist.github.com/am-MongoDB/3bbb946bb35fd8054e95adf92b96f103.js"></script></p>
<p>You should then add the <code>bin</code> sub-folder to your <code>.bash_profile</code> file and then install ImageMagick (used by Apostrophe to handle image files); clone the Apostrophe Sandbox project; and then install its dependencies:</p>
<p><script src="https://gist.github.com/am-MongoDB/676b16c5fdeaa650a448378c1a0bbdac.js"></script></p>
<p>Before starting Apostrophe you need to configure it with details on how to connect to your specific MongoDB Atlas cluster. This is done by cloning the configuration file to <code>data/local.js</code>:</p>
<p><script src="https://gist.github.com/am-MongoDB/14d6019b0333b351685f3b077a93864d.js"></script></p>
<p>You should then edit the <code>data/local.js</code> file and set the <code>uri</code> parameter using the specific connection information provided for your MongoDB Atlas group:</p>
<p><script src="https://gist.github.com/am-MongoDB/2fdcb8c954ac831e8970543afbf5a1e4.js"></script></p>
<p>The URI contains these components:</p>
<ul>
<li><code>apostrophe_user</code> is the name of the user you created in the MongoDB Atlas UI</li>
<li><code>my_password</code> is the password you chose when creating the user in MongoDB Atlas</li>
<li><code>cluster0-shard-00-00-qfovx.mongodb.net</code>, <code>cluster0-shard-00-01-qfovx.mongodb.net</code>, &amp; <code>cluster0-shard-00-02-qfovx.mongodb.net</code> are the hostnames of the instances in your MongoDB Atlas replica set (click on the &#8220;CONNECT&#8221; button in the MongoDB Atlas UI if you don&#8217;t have these)</li>
<li><code>27017</code> is the standard MongoDB port number</li>
<li><code>clusterdb</code> is the name of the database (schema) that Apostrophe will use (note that this must match the project name used when installing Apostrophe as well as the database you granted the user access to</li>
<li>To enforce security, MongoDB Atlas mandates that the <code>ssl</code> option is used</li>
<li><code>admin</code> is the database that&#8217;s being used to store the credentials for <code>apostrophe_user</code></li>
</ul>
<p>Clients connect to Apostrophe through port 3000 and so you must open that port in your firewall.</p>
<p>You can then create the database and start Apostrophe:</p>
<p><script src="https://gist.github.com/am-MongoDB/000e19868892d5865a90a0e339286609.js"></script></p>
<h2>Testing the Application</h2>
<p>Browse to the application at <code>http://address-of-app-server:3000/</code> as shown in Figure 2 and then login using the username <code>admin</code> and the password <code>demo</code>.</p>
<div id="attachment_4194" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/Apostrophe.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4194" src="./../../wp-content/uploads/2016/09/Apostrophe-1024x498.png" alt="Apostrophe Running on MongoDB Atlas" width="480" height="233" class="size-large wp-image-4194" srcset="./../../wp-content/uploads/2016/09/Apostrophe-1024x498.png 1024w, ./../../wp-content/uploads/2016/09/Apostrophe-300x146.png 300w, ./../../wp-content/uploads/2016/09/Apostrophe-768x373.png 768w, ./../../wp-content/uploads/2016/09/Apostrophe.png 1138w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4194" class="wp-caption-text">Figure 2: Apostrophe Running on MongoDB Atlas</p></div>
<p>Now, go ahead and add some content (Figure 3).</p>
<div id="attachment_4195" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/create_Apostrophe_post_on_MongoDB_Atlas.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4195" src="./../../wp-content/uploads/2016/09/create_Apostrophe_post_on_MongoDB_Atlas-1024x668.png" alt="Edit Apostrophe Home Page with Data Stored in MongoDB Atlas" width="480" height="313" class="size-large wp-image-4195" srcset="./../../wp-content/uploads/2016/09/create_Apostrophe_post_on_MongoDB_Atlas-1024x668.png 1024w, ./../../wp-content/uploads/2016/09/create_Apostrophe_post_on_MongoDB_Atlas-300x196.png 300w, ./../../wp-content/uploads/2016/09/create_Apostrophe_post_on_MongoDB_Atlas-768x501.png 768w, ./../../wp-content/uploads/2016/09/create_Apostrophe_post_on_MongoDB_Atlas.png 1136w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4195" class="wp-caption-text">Figure 3: Edit Apostrophe Home Page with Data Stored in MongoDB Atlas</p></div>
<p>Upload some images as shown in Figure 4.</p>
<div id="attachment_4196" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/Apostrophe_add_images.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4196" src="./../../wp-content/uploads/2016/09/Apostrophe_add_images-1024x673.png" alt="Upload Images to Apostrophe on MongoDB Atlas" width="480" height="315" class="size-large wp-image-4196" srcset="./../../wp-content/uploads/2016/09/Apostrophe_add_images-1024x673.png 1024w, ./../../wp-content/uploads/2016/09/Apostrophe_add_images-300x197.png 300w, ./../../wp-content/uploads/2016/09/Apostrophe_add_images-768x505.png 768w, ./../../wp-content/uploads/2016/09/Apostrophe_add_images.png 1142w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4196" class="wp-caption-text">Figure 4: Upload Images to Apostrophe on MongoDB Atlas</p></div>
<p>Optionally, to confirm that, MongoDB Atlas really is being used by Apostrophe, you can connect using the MongoDB shell:</p>
<p><script src="https://gist.github.com/am-MongoDB/6c3f3ff8df99ee12e1b963f6851f9441.js"></script></p>
<p>To visually navigate through the schema and data created by Apostrophe, <a href="https://www.mongodb.com/download-center?jmp=nav#compass">download and install MongoDB Compass</a>. Use your MongoDB Atlas credentials to connect Compass to your MongoDB database – Figure 5.</p>
<div id="attachment_4197" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/Connect_Compass_to_MongoDB_Atlas.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4197" src="./../../wp-content/uploads/2016/09/Connect_Compass_to_MongoDB_Atlas-1024x839.png" alt="Connect MongoDB Compass to MongoDB Atlas" width="480" height="393" class="size-large wp-image-4197" srcset="./../../wp-content/uploads/2016/09/Connect_Compass_to_MongoDB_Atlas-1024x839.png 1024w, ./../../wp-content/uploads/2016/09/Connect_Compass_to_MongoDB_Atlas-300x246.png 300w, ./../../wp-content/uploads/2016/09/Connect_Compass_to_MongoDB_Atlas-768x629.png 768w, ./../../wp-content/uploads/2016/09/Connect_Compass_to_MongoDB_Atlas.png 1802w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4197" class="wp-caption-text">Figure 5: Connect MongoDB Compass to MongoDB Atlas</p></div>
<p>Navigate through the structure of the data in the <code>clusterdb</code> database (Figure 6) and view the JSON documents (Figure 7).</p>
<div id="attachment_4198" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/Compass_Apostrophe_Schema.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4198" src="./../../wp-content/uploads/2016/09/Compass_Apostrophe_Schema-1024x631.png" alt="Explore Apostrophe Schema Using MongoDB Compass" width="480" height="296" class="size-large wp-image-4198" srcset="./../../wp-content/uploads/2016/09/Compass_Apostrophe_Schema-1024x631.png 1024w, ./../../wp-content/uploads/2016/09/Compass_Apostrophe_Schema-300x185.png 300w, ./../../wp-content/uploads/2016/09/Compass_Apostrophe_Schema-768x473.png 768w, ./../../wp-content/uploads/2016/09/Compass_Apostrophe_Schema.png 1282w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4198" class="wp-caption-text">Figure 6: Explore Apostrophe Schema Using MongoDB Compass</p></div>
<div id="attachment_4199" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2016/09/Compass_Apostrophe_Data.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4199" src="./../../wp-content/uploads/2016/09/Compass_Apostrophe_Data-1024x630.png" alt="View Apostrophe Documents in MongoDB Compass" width="480" height="295" class="size-large wp-image-4199" srcset="./../../wp-content/uploads/2016/09/Compass_Apostrophe_Data-1024x630.png 1024w, ./../../wp-content/uploads/2016/09/Compass_Apostrophe_Data-300x185.png 300w, ./../../wp-content/uploads/2016/09/Compass_Apostrophe_Data-768x473.png 768w, ./../../wp-content/uploads/2016/09/Compass_Apostrophe_Data.png 1279w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4199" class="wp-caption-text">Figure 7: View Apostrophe Documents in MongoDB Compass</p></div>
<h4>What Next?</h4>
<p>While MongoDB Atlas radically simplifies the operation of MongoDB there are still some decisions to take to ensure the best performance and reliability for your application. The <a href="https://www.mongodb.com/collateral/mongodb-atlas-best-practices">MongoDB Atlas Best Practices white paper</a> provides guidance on best practices for deploying, managing, and optimizing the performance of your database with MongoDB Atlas.</p>
<p>The guide outlines considerations for achieving performance at scale with MongoDB Atlas across a number of key dimensions, including instance size selection, application patterns, schema design and indexing, and disk I/O. While this guide is broad in scope, it is not exhaustive. Following the recommendations in the guide will provide a solid foundation for ensuring optimal application performance.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mongodb/atlas_apostrophe/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Webinar Replay + Q&#038;A – Developing JavaScript Applications for Node.js with MySQL and NoSQL</title>
		<link>./../../mysql-cluster/webinar-replay-qa-developing-javascript-applications-for-node-js-with-mysql-and-nosql/index.html</link>
					<comments>./../../mysql-cluster/webinar-replay-qa-developing-javascript-applications-for-node-js-with-mysql-and-nosql/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Tue, 17 Sep 2013 13:37:14 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster 7.3]]></category>
		<category><![CDATA[node.js]]></category>
		<category><![CDATA[NoSQL]]></category>
		<guid isPermaLink="false">./../../index.html?p=2962</guid>

					<description><![CDATA[On Thursday 12th September I co-presented a webinar on how MySQL Cluster delivers the key benefits of NoSQL Data Stores without having to give up the features that people rely on from relational databases (consistency, SQL etc.). There was a particular focus on how to use the new node.js JavaScript API which was recently released]]></description>
										<content:encoded><![CDATA[<p><a href="./../../wp-content/uploads/2013/05/Node_Cluster_logo.png"><img loading="lazy" decoding="async" class="alignright size-medium wp-image-2791" alt="MySQL Cluster driver for JavaScript/Node.js" src="./../../wp-content/uploads/2013/05/Node_Cluster_logo-300x224.png" width="300" height="224" /></a>On Thursday 12th September I co-presented a webinar on how MySQL Cluster delivers the key benefits of NoSQL Data Stores without having to give up the features that people rely on from relational databases (consistency, SQL etc.). There was a particular focus on how to use the new node.js JavaScript API which was recently released as part of MySQL Cluster 7.3. If you weren&#8217;t able to attend the live event then the <a href="http://www.mysql.com/news-and-events/on-demand-webinars/#en-20-28" title="Developing JavaScript Applications for Node.js with MySQL and NoSQL Webcast replay" alt="http://www.mysql.com/news-and-events/on-demand-webinars/#en-20-28" title="Developing JavaScript Applications for Node.js with MySQL and NoSQL Webcast replay" target="_blank">webinar replay is available here</a>. If you scroll down to the bottom of this post you&#8217;ll see a summary of the Questions and Answers from the session.</p>
<p>The new MySQL JavaScript Connector for Node.js is designed to deliver simplicity and high performance for JavaScript users.</p>
<p>Enables end-to-end JavaScript development, from the browser to the server and now to the world&#8217;s most popular open source database.</p>
<p>Provides native NoSQL access to the MySQL Cluster storage engine without first going through SQL transformations and parsing</p>
<p>This session gives you everything you need in order to get started on building highly scalable, event-driven Web, mobile, and social applications.</p>
<p>It discusses:</p>
<ul>
<li> Implementation of the connector</li>
<li>Database connection and metadata management</li>
<li>Creating and executing queries</li>
<li>Use with InnoDB (via an internal SQL conversion) and MySQL Cluster (direct)</li>
</ul>
<p>WHO:</p>
<ul>
<li>Andrew Morgan, Principal Product Manager</li>
<li>John Duncan, Senior Software Developer</li>
<li>Craig Russell, Principal Software Developer</li>
</ul>
<h3>Q &amp; A</h3>
<ul>
<li><strong>What is the benefit of using an asynchrous run-time model?</strong> The <em>async everywhere</em> idea in Node.JS means the one execution thread is always doing work for a user. Never waiting on I/O. It allows you to minimize the cost of waiting on the network for i/o, and that&#8217;s a big part of how it can handle so many simultaneous requests.</li>
<li><strong>Can you please ellaborate more about multi-threading in node.js?</strong> Node.js has a just one thread that runs JavaScript. Then there is also a small thread pool that handles some background i/o tasks.</li>
<li><strong>Why can&#8217;t you use a synchrous model? Would there be any drawbacks?</strong> The async programming style can be hard to get used to &#8230; but in JavaScript, async is really &#8220;how things are done&#8221;. Just like browser-side JavaScript responding to a mouse event, this is server-side JS responding to a database event or a network event.</li>
<li><strong>Is there also a synchronous Session function?</strong> There is a synchronous version of <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">connect()</span>. There are some &#8220;immediate&#8221; calls on session (which don&#8217;t have to do any waiting), but there are no synchronous calls on session that wait for anything</li>
<li><strong>Most applications run as responses to requests and so most of the logic needs to be executed sequentially. How are asynchronous calls handled? Is there any mechanism to wait and join multiple asynch call for a particular section of logic?</strong> If you have multiple database operations to execute, you can use the batch feature which will wait for all operations to complete and then call back. If you have other operations you need to have your own synchronization mechanism.</li>
<li><strong>It was mentioned that you can use this APi to access the MySQL Cluster data nodes directly or MyISAM/InnoDB data via SQL and a MySQL server &#8211; how do I configure that?</strong> In the connection properties for your database connection, you use <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">adapter=ndb</span> for a native NDB connection, or <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">adapter=mysql</span> for a MySQL connection.</li>
<li><strong>Are results mapped into objects?</strong> Yes. When the inner layer reads a row from the database, it creates a JavaScript object (according to the mapping) and it calls your Constructor with no arguments and with <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">this</span> set to the newly created object.</li>
<li><strong>So there is seperate mapping for tables and for results?</strong>    No, a single mapping.</li>
<li><strong>Does the object mapping support the entity relationships like in JPA implementations? Can it be referenced with JSON ojects with one-to-one, one-to-many, etc relationships?</strong> The current release does not support relationships/JOINs.</li>
<li><strong>JavaScript is weakly typed. How are different data types handled with the same reffrence?</strong> Dynamic typing means that values (objects, exspanssions) have types (i.e. a set of available operations and properties) but not variables, so a variable can, over time, refer to values of different types.</li>
<li><strong>Are there sql like transaction through the Node.js NoSQL API?</strong> Yes, the API looks something like this: <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">session.currentTransaction().begin() &#8230; define operations &#8230; session.currentTransaction.commit()</span></li>
<li><strong>So, we can use session to track any transaction?</strong> Right, a session owns its single transaction. If you don&#8217;t call <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">begin()</span> on the transaction, then your operation will run &#8220;auto-commit&#8221;.</li>
<li><strong>Does <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">adapter=mysql</span> option use <a href="https://github.com/felixge/node-mysql">https://github.com/felixge/node-mysql‎ adapter</a> adapter?</strong> Yes.</li>
<li><strong>Is this library similar to what mongoose is to mongodb?</strong> I&#8217;m not very familiar with mongoose &#8212; but it is broadly similar to many object-to-database mapping layers.</li>
<li><strong>Is there a working &#8220;Hello World&#8221; example showing all of these technologies as a big happy family?</strong> You could start with this&#8230; <a href="./../../mysql/mysql-cluster-with-node-js/index.html" title="Using JavaScript and Node.js with MySQL Cluster – First steps">Using JavaScript and Node.js with MySQL Cluster – First steps</a></li>
<li><strong>So, just for clarification, the chief advantage of this is it&#8217;s moving the heavy lifting from the server side (like with PHP) to the client side?</strong> Not quite, node.js is server-side javascript. The main advantage is an asynchronous processing of requests that never block. In contrast, a large number of server-threads need to be provided with requests that can block.</li>
<li><strong>Node.js runs on V8 which developed by google, its run fast any browser or only in Chrome?</strong> Node.js actually runs in the app server rather than in your browser and so it will play nicely when accessed via any browser (or other client)</li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql-cluster/webinar-replay-qa-developing-javascript-applications-for-node-js-with-mysql-and-nosql/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Webinar &#8211; Developing JavaScript Applications for Node.js with MySQL and NoSQL</title>
		<link>./../../mysql-cluster/webinar-developing-javascript-applications-for-node-js-with-mysql-and-nosql/index.html</link>
					<comments>./../../mysql-cluster/webinar-developing-javascript-applications-for-node-js-with-mysql-and-nosql/index.html#comments</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Wed, 04 Sep 2013 13:29:30 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster 7.3]]></category>
		<category><![CDATA[node.js]]></category>
		<category><![CDATA[NoSQL]]></category>
		<guid isPermaLink="false">./../../index.html?p=2946</guid>

					<description><![CDATA[Note that the webinar replay + transcript of the Questions and Answers is now available from here. On Thursday 12th September I&#8217;ll be co-presenting a free webinar on how MySQL Cluster delivers the key benefits of NoSQL Data Stores without having to give up the features that people rely on from relational databases (consistency, SQL]]></description>
										<content:encoded><![CDATA[<p><strong>Note that the <a href="./../../mysql-cluster/webinar-replay-qa-developing-javascript-applications-for-node-js-with-mysql-and-nosql/index.html" title="Webinar replay for using JavaScript/Node.js with MySQL Cluster">webinar replay + transcript of the Questions and Answers is now available from here</a></strong>.</p>
<p><a href="./../../wp-content/uploads/2013/05/Node_Cluster_logo.png"><img loading="lazy" decoding="async" class="alignright size-medium wp-image-2791" alt="MySQL Cluster driver for JavaScript/Node.js" src="./../../wp-content/uploads/2013/05/Node_Cluster_logo-300x224.png" width="300" height="224" /></a>On Thursday 12th September I&#8217;ll be co-presenting a free webinar on how MySQL Cluster delivers the key benefits of NoSQL Data Stores without having to give up the features that people rely on from relational databases (consistency, SQL etc.). There will be particular focus on how to use the new node.js JavaScript API which was recently released as part of MySQL Cluster 7.3.  As usual the webinar is free but you should <a title="Developing JavaScript Applications for Node.js with MySQL and NoSQL - register for the webinar" href="http://www.mysql.com/news-and-events/web-seminars/developing-javascript-applications-for-node-js-with-mysql-and-nosql/" target="_blank">register in advance here</a>.</p>
<p>The new MySQL JavaScript Connector for Node.js is designed to deliver simplicity and high performance for JavaScript users.</p>
<p>Enables end-to-end JavaScript development, from the browser to the server and now to the world&#8217;s most popular open source database.</p>
<p>Provides native NoSQL access to the MySQL Cluster storage engine without first going through SQL transformations and parsing</p>
<p>This session gives you everything you need in order to get started on building highly scalable, event-driven Web, mobile, and social applications.</p>
<p>It discusses:</p>
<ul>
<li> Implementation of the connector</li>
<li>Database connection and metadata management</li>
<li>Creating and executing queries</li>
<li>Use with InnoDB (via an internal SQL conversion) and MySQL Cluster (direct)</li>
</ul>
<p>WHO:</p>
<ul>
<li>Andrew Morgan, Principal Product Manager</li>
<li>John Duncan, Senior Software Developer</li>
<li>Craig Russell, Principal Software Developer</li>
</ul>
<p>WHEN:</p>
<ul>
<li>Thu, Sep 12: 09:00 Pacific time (America)</li>
<li>Thu, Sep 12: 10:00 Mountain time (America)</li>
<li>Thu, Sep 12: 11:00 Central time (America)</li>
<li>Thu, Sep 12: 12:00 Eastern time (America)</li>
<li>Thu, Sep 12: 16:00 UTC</li>
<li>Thu, Sep 12: 17:00 Western European time</li>
<li>Thu, Sep 12: 18:00 Central European time</li>
<li>Thu, Sep 12: 19:00 Eastern European time</li>
<li>Thu, Sep 12: 21:30 India, Sri Lanka</li>
<li>Fri, Sep 13: 00:00 Singapore/Malaysia/Philippines time</li>
<li>Fri, Sep 13: 00:00 China time</li>
<li>Fri, Sep 13: 01:00 日本</li>
<li>Fri, Sep 13: 02:00 NSW, ACT, Victoria, Tasmania (Australia)</li>
</ul>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql-cluster/webinar-developing-javascript-applications-for-node-js-with-mysql-and-nosql/feed/index.html</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>Using JavaScript and Node.js with MySQL Cluster &#8211; First steps</title>
		<link>./../../mysql/mysql-cluster-with-node-js/index.html</link>
					<comments>./../../mysql/mysql-cluster-with-node-js/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Tue, 18 Jun 2013 12:01:25 +0000</pubDate>
				<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[MySQL Cluster 7.3]]></category>
		<category><![CDATA[node.js]]></category>
		<category><![CDATA[NoSQL]]></category>
		<guid isPermaLink="false">./../../index.html?p=2751</guid>

					<description><![CDATA[We&#8217;re very pleased to announce that MySQL Cluster 7.3 has gone GA; for a full run-down of the new features and enhancements, take a look at the &#34;MySQL Cluster 7.3 New Features for Internet-Scale Performance with Carrier-Grade Availability&#34; white paper but this post will focus on just one of the features &#8211; the MySQL Cluster]]></description>
										<content:encoded><![CDATA[<p><a href="./../../wp-content/uploads/2013/05/Node_Cluster_logo.png"><img loading="lazy" decoding="async" src="./../../wp-content/uploads/2013/05/Node_Cluster_logo-300x224.png" alt="MySQL Cluster driver for JavaScript/Node.js" width="300" height="224" class="alignright size-medium wp-image-2791" /></a></p>
<p>We&#8217;re very pleased to announce that MySQL Cluster 7.3 has gone GA; for a full run-down of the new features and enhancements, take a look at the <a href="http://www.mysql.com/why-mysql/white-papers/mysql-cluster-7-2-new-features-whitepaper/">&quot;MySQL Cluster 7.3 New Features for Internet-Scale Performance with Carrier-Grade Availability&quot; white paper</a> but this post will focus on just one of the features &#8211; the MySQL Cluster JavaScript Driver for Node.js. The post will step you through setting <strong>everything</strong> up so that you can get your first Node.js code reading and writing from MySQL Cluster.</p>
<h3>Background</h3>
<p><strong>MySQL Cluster</strong> is a distributed, shared nothing database that provides linear scalability, 99.999% availability and high read/write throughput with low latency. SQL is just one way of accessing data stored in MySQL Cluster &#8211; there are also a number of native NoSQL APIs that go straight to the data without any interim conversion to SQL. These APIs include C++, Memcached, Java, JPA and REST &#8211; in MySQL Cluster 7.3 JavaScript/Node.js is added to the list.</p>
<p><a href="http://nodejs.org/"><strong>Node.js</strong></a> (typically referred to simply as &quot;Node&quot;) is a platform for running fast, scalable applications using JavaScript. For maximum performance, Node.js is built around a non-blocking, event-driven architecture &#8211; just like MySQL Cluster and so they fit together very well.</p>
<p>The MySQL Cluster JavaScript Driver for Node.js is just what it sounds like it is &#8211; it&#8217;s a connector that can be called directly from your JavaScript code to read and write your data. As it accesses the data nodes directly, there is no extra latency from passing through a MySQL Server and need to convert from JavaScript code//objects into SQL operations. If for some reason, you&#8217;d prefer it to pass through a MySQL Server (for example if you&#8217;re storing tables in InnoDB) then that can be configured.</p>
<p>As with all of the other APIs that we offer, you&#8217;re able to mix &amp; match access methods; while you access the database using JavaScript objects, these will be mapped to rows in database tables and this same data can simultaneously be accessed by other NoSQL API or through SQL.</p>
<div id="attachment_2734" style="width: 310px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2013/04/Capture6.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-2734" src="./../../wp-content/uploads/2013/04/Capture6-300x243.png" alt="MySQL Cluster Auto-Installer" width="300" height="243" class="size-medium wp-image-2734" /></a><p id="caption-attachment-2734" class="wp-caption-text">MySQL Cluster Auto-Installer</p></div>
<h3>Installing MySQL Cluster</h3>
<p>Obviously, to try out our JavaScript code we&#8217;ll need a database to access. The simplest way to do this is to use the new auto-installer that&#8217;s part of MySQL Cluster 7.3; this provides a browser-based GUI that configures and runs a MySQL Cluster database that&#8217;s been configured for your application and environment. Using this installer is described in the <a href="./../../mysql-cluster/mysql-cluster-7-3-auto-installer/index.html">&quot;MySQL Cluster Auto-Installer&quot; post</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Setting up the Database</h3>
<div id="attachment_2304" style="width: 310px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2012/05/FK_Relationship.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-2304" src="./../../wp-content/uploads/2012/05/FK_Relationship-300x103.png" alt="Foreign Key constraints between tables" width="300" height="103" class="size-medium wp-image-2304" /></a><p id="caption-attachment-2304" class="wp-caption-text">Tables with Foreign Key constraint</p></div>
<p>A simple database schema is being used &#8211; a single table would really be enough but we&#8217;ll actually create two in order to demonstrate that Foreign Key constraints (<a href="./../../mysql-cluster/foreign-keys-in-mysql-cluster/index.html">Foreign Keys are another new feature in MySQL Cluster 7,3</a>) are still enforced when using the NoSQL APIs.</p>
<p>These two tables are set up as follows:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
[billy@bob]$ mysql --protocol=tcp -u root
Welcome to the MySQL monitor.  Commands end with ; or g.
Your MySQL connection id is 2
Server version: 5.6.10-ndb-7.3.1-cluster-gpl MySQL Cluster Community Server (GPL)

Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or 'h' for help. Type 'c' to clear the current input statement.

mysql> CREATE TABLE test.counties (county VARCHAR(30) NOT NULL PRIMARY KEY,
country VARCHAR(30)) ENGINE=ndb;
Query OK, 0 rows affected (1.17 sec)

mysql> CREATE TABLE test.towns (town VARCHAR(30) NOT NULL PRIMARY KEY, county VARCHAR(30),
INDEX county_county_index (county), CONSTRAINT county_town FOREIGN KEY (county) REFERENCES counties(county) 
ON DELETE RESTRICT ON UPDATE RESTRICT) ENGINE=ndb;
Query OK, 0 rows affected (1.00 sec)
</pre>
<h3>Installing Node.js</h3>
<p>Node.js can be downloaded from <a href="http://nodejs.org/">Node.js.org</a>.</p>
<p>
If you&#8217;re using Windows then the MSI will guide you through the process &#8211; though when you&#8217;ve finished you&#8217;ll need to manually run the following from the cmd prompt:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
npm install -g node-gyp
</pre>
<p>On Linux, you&#8217;ll need to manually build and install Node.js after you&#8217;ve downloaded it:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
[root@bob node-v0.10.7]# ./configure
[root@bob node-v0.10.7]# make
[root@bob node-v0.10.7]# make install
</pre>
<h3>Building mysql-js (the JavaScript driver for MySQL Cluster)</h3>
<p>Regardless of what operating system is being used, the driver must be built before it can be used. Furthermore, to build the driver you need to have a local MySQL Cluster package (so that it can access the NDB API client library).</p>
<p>Depending on the exact Linux distro and version being used, some dependencies may need to be installed first:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
[root@bob]$ yum install gcc
[root@bob]$ yum install gcc-c++
[root@bob]$ npm install mysql
[root@bob]$ npm install -g node-gyp
</pre>
<p>Once that has been done, the driver can be built &#8211; the following should be run from within the <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">share/nodejs</span> directory within the MySQL Cluster package:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
[billy@bob nodejs]$ node configure.js 
[billy@bob nodejs]$ node-gyp configure build -d
</pre>
<h3>Example Code</h3>
<p>To begin with, the complete code is provided and then each component is explained.</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
var nosql = require('..'); 

var Town = function(name, county) {
    if (name) this.town = name;
    if (county) this.county = county;
};

// create basic object<->table mapping
var annotations = new nosql.TableMapping('towns').applyToClass(Town);

//check results of find
var onFind = function(err, result) {
    console.log('onFind.');
    if (err) {
        console.log(err);
    } else {
        console.log('Found: ' + JSON.stringify(result));
    }
    process.exit(0);
};

//check results of insert
var onInsert = function(err, object, session) {
    console.log('onInsert.');
    if (err) {
        console.log(err);
    } else {
        console.log('Inserted: ' + JSON.stringify(object));

        // Now read the data back out from the database
        session.find(Town, 'Maidenhead', onFind);
    }
};

// insert an object
var onSession = function(err, session) {
    console.log('onSession.');
    if (err) {
    console.log('Error onSession.');
        console.log(err);
        process.exit(0);
    } else {
        var data = new Town('Maidenhead', 'Berkshire');
        session.persist(data, onInsert, data, session);
    }
};

var dbProperties = nosql.ConnectionProperties('ndb');

console.log('Openning session');

// connect to the database
nosql.openSession(dbProperties, Town, onSession);

console.log('Openned session');
</pre>
<p><strong>Step 1</strong> Import API software</p>
<p>The first step is for your JavaScript application to specify that it will use the new API (mysql-js); this will work if this file is stored in a directory under <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">cluster-install/share/nodejs</span>:</p>
<pre  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
var nosql = require('mysql-js');
</pre>
<p><strong>Step 2</strong> Define JavaScript class</p>
<p>A class should be defined that will be used by the application and will also be mapped to the towns table that has already been created. The class is defined through the specification of its constructor:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
var Town = function(name, county) {
    if (name) this.town = name;
    if (county) this.county = county;
};
</pre>
<p><strong>Step 3</strong> Define schema mappings</p>
<p>MySQL Cluster is a relational database while JavaScript works with objects. To get the best of both worlds, mappings can be set up between MySQL tables (or individual columns) and JavaScript objects – in this case it’s kept very simple and the <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">Town</span> class is mapped to the <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">towns</span> table:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
var annotations = new nosql.TableMapping('towns').applyToClass(Town);
</pre>
<p>Note that you can also define mappings at a finer level &#8211; <a href="http://dev.mysql.com/doc/ndbapi/en/ndb-nodejs-api-tablemapping.html">only mapping to specific columns within a table and allowing the class members to have different names to the table columns</a>.</p>
<p><strong>Step 4</strong> Connect to the database</p>
<p>In this step, the application connects to the database to indicate that it wants to access the data nodes directly rather than via the MySQL Server (and hidden conversion to SQL),  the <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">ConnectionProperties</span> is set to <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">ndb</span> (rather than <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">mysql</span>). Additionally, a callback function (<span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">onSession</span>) is passed as an argument. Recall that this is an event-driven, non-blocking, asynchronous API and so after calling <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">openSession</span>, control will be immediately returned to the application – without waiting for the session to actually be established – the application can then go away and perform other useful work. Once the session has been created, the callback function (<span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">onSession</span>) will be invoked, allowing the application to take the next steps.</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
var dbProperties = nosql.ConnectionProperties('ndb');
nosql.openSession(dbProperties, annotations, onSession);
</pre>
<p><strong>Step 5</strong> Store some data</p>
<p>Note that the code in this step is the implementation of the call back function (<span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">onSession</span>) that we passed in as a parameter to <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">openSession</span> in the previous step. This function simply instantiates a Town JavaScript object and then writes it to MySQL Cluster through the persist method. Once more, a callback function is passed in (<span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">onInsert</span>) which will be invoked once the data has been stored in the database. Note that any objects specified after the callback function in the parameter list (in this case, the <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">Town</span> object data) will be provided as parameters to the callback function when it’s executed – note that the session parameter is also included and the framework will pass that as a parameter to the <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">onInsert</span> callback function.</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
var onSession = function(err, session) {
    if (err) {...} else {
        var data = new Town('Maidenhead', 'Berkshire');
        session.persist(data, onInsert, data, session);
    }
};
</pre>
<p><strong>Step 6</strong> Verify insert succeeded &amp; initiate reading of data from the database</p>
<p>Next, our callback function (<span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">onInsert</span>) is called and the object parameter contains the Town that had been passed into the persist method in the previous step, together with the session variable. This function simply checks that there wasn’t an error and then displays the <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">Town</span> that has been stored in the database. Again, a callback function is provided – <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">onFind</span> – that will be called once the data has been found.</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
var onInsert = function(err, object, session) {
    if (err) { ... } else {
        console.log('Inserted: ' + JSON.stringify(object));
        session.find(Town, 'Maidenhead', onFind);
    }
};
</pre>
<p><strong>Step 7</strong> Process the data read back from the database</p>
<p>Finally, <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">onFind</span> is called-back and it handles the processing of the results (whether it is an error or the <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">Town</span> object in the form of the <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">result</span> parameter).</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
var onFind = function(err, result) {
    console.log('onFind.');
    if (err) { ... } else {
        console.log('Found: ' + JSON.stringify(result));
    }
    process.exit(0);
};
</pre>
<p>The <a href="http://dev.mysql.com/doc/ndbapi/en/ndb-nodejs.html">on-line documentation</a> for mysql-js describes the API in full and includes some further examples.</p>
<h3>Running the application</h3>
<p>Before running the application, the location of the NDB API client library must be provided (this is with the MySQL Cluster package):</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
[billy@bob my_samples]$ export LD_LIBRARY_PATH=/home/billy/cluster_7_3/lib
</pre>
<p>The example code should be stored in a file called <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">my-test.js</span> in a directory under <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">cluster-install/share/nodejs/my_samples</span>. To run the application, just run the following (spoiler &#8211; there will be a database error!):</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
[billy@bob my_samples]$ node my-test.js 
Openning session
Openned session
Connected to cluster as node id: 50
onSession.
onInsert.
{ message: 'Error',
  sqlstate: '23000',
  ndb_error: null,
  cause: 
   { message: 'Foreign key constraint violated: No parent row found [255]',
     sqlstate: '23000',
     ndb_error: 
      { message: 'Foreign key constraint violated: No parent row found',
        handler_error_code: 151,
        code: 255,
        classification: 'ConstraintViolation',
        status: 'PermanentError' },
     cause: null } }
</pre>
<p>This error is seen because the code is attempting to add an object/row to the <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">towns</span> table where the county doesn&#8217;t already have an entry in the <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">counties</span> table &#8211; this breaks the Foreign Key constraint that was included when the tables were created.</p>
<p>To get around this, the required row should be added to the <span  style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">counties</span> table:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
[billy@bob my_samples]$ mysql --protocol=tcp -u root
Welcome to the MySQL monitor.  Commands end with ; or g.
Your MySQL connection id is 3
Server version: 5.6.10-ndb-7.3.1-cluster-gpl MySQL Cluster Community Server (GPL)

Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or 'h' for help. Type 'c' to clear the current input statement.

mysql> REPLACE INTO test.counties VALUES ('Berkshire', 'England');
Query OK, 1 row affected (0.25 sec)
</pre>
<p>The code can then be executed again &#8211; this time successfully:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
[billy@drbd1 my_samples]$ node my-test.js 
Openning session
Openned session
Connected to cluster as node id: 50
onSession.
onInsert.
Inserted: {"town":"Maidenhead","county":"Berkshire"}
onFind.
Found: {"county":"Berkshire","town":"Maidenhead"}
</pre>
<h3>What next?</h3>
<p>Please give this a try &#8211; especially with your own code &#8211; and let us know how you get on. We&#8217;re especially interested in what features you&#8217;d like to see added &#8211; embedded objects, lists, joins&#8230;.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql/mysql-cluster-with-node-js/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
