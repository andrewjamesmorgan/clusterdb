<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>MongoDB Atlas &#8211; Andrew Morgan on Databases</title>
	<atom:link href="/tag/mongodb-atlas/feed" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Database technologies - especially around scalability and High Availability</description>
	<lastBuildDate>Tue, 08 Nov 2016 18:09:24 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>Processing Data Streams with Amazon Kinesis and MongoDB Atlas</title>
		<link>/mongodb/mongodb_amazon_kinesis</link>
					<comments>/mongodb/mongodb_amazon_kinesis#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Tue, 08 Nov 2016 18:09:24 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[Amazon]]></category>
		<category><![CDATA[Amazon Kinesis]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Atlas]]></category>
		<category><![CDATA[MongoDB Compass]]></category>
		<guid isPermaLink="false">/?p=4276</guid>

					<description><![CDATA[This post provides an introduction to Amazon Kinesis: its architecture, what it provides, and how it&#8217;s typically used. It goes on to step through how to implement an application where data is ingested by Amazon Kinesis before being processed and then stored in MongoDB Atlas. This is part of a series of posts which examine]]></description>
										<content:encoded><![CDATA[<p>This post provides an introduction to Amazon Kinesis: its architecture, what it provides, and how it&#8217;s typically used. It goes on to step through how to implement an application where data is ingested by Amazon Kinesis before being processed and then stored in MongoDB Atlas.</p>
<p>This is part of a <a href="/mongodb/using-mongodb-atlas-from-your-favorite-language-or-framework">series of posts which examine how to use MongoDB Atlas with a number of complementary technologies and frameworks</a>.</p>
<h2>Introduction to Amazon Kinesis</h2>
<p>The role of Amazon Kinesis is to get large volumes of streaming data into AWS where it can then be processed, analyzed, and moved between AWS services. The service is designed to ingest and store terabytes of data every hour, from multiple sources. Kinesis provides high availability, including synchronous replication within an AWS region. It also transparently handles scalability, adding and removing resources as needed.</p>
<p>Once the data is inside AWS, it can be processed or analyzed immediately, as well as being stored using other AWS services (such as S3) for later use. By storing the data in MongoDB, it can be used both to drive real-time, operational decisions as well as for deeper analysis.</p>
<p>As the number, variety, and velocity of data sources grow, new architectures and technologies are needed. Technologies like Amazon Kinesis and <a href="https://www.mongodb.com/blog/post/mongodb-and-data-streaming-implementing-a-mongodb-kafka-consumer" title="Data Streaming with Apache Kafka &amp; MongoDB">Apache Kafka</a> are focused on ingesting the massive flow of data from multiple fire hoses and then routing it to the systems that need it – optionally filtering, aggregating, and analyzing en-route.</p>
<div id="attachment_4277" style="width: 1201px" class="wp-caption alignright"><a href="/wp-content/uploads/2016/11/kinesis-architecture.png"><img fetchpriority="high" decoding="async" aria-describedby="caption-attachment-4277" class="wp-image-4277 size-full" src="/wp-content/uploads/2016/11/kinesis-architecture.png" alt="AWS Kinesis Architecture" width="1191" height="636" srcset="/wp-content/uploads/2016/11/kinesis-architecture.png 1191w, /wp-content/uploads/2016/11/kinesis-architecture-300x160.png 300w, /wp-content/uploads/2016/11/kinesis-architecture-768x410.png 768w, /wp-content/uploads/2016/11/kinesis-architecture-1024x547.png 1024w" sizes="(max-width: 1191px) 100vw, 1191px" /></a><p id="caption-attachment-4277" class="wp-caption-text">Figure 1: AWS Kinesis Architecture</p></div>
<p>Typical data sources include:</p>
<ul>
<li>IoT assets and devices(e.g., sensor readings)</li>
<li>On-line purchases from an ecommerce store</li>
<li>Log files</li>
<li>Video game activity</li>
<li>Social media posts</li>
<li>Financial market data feeds</li>
</ul>
<p>Rather than leave this data to fester in text files, Kinesis can ingest the data, allowing it to be processed to find patterns, detect exceptions, drive operational actions, and provide aggregations to be displayed through dashboards.</p>
<p>There are actually 3 services which make up Amazon Kinesis:</p>
<ul>
<li><strong>Amazon Kinesis Firehose</strong> is the simplest way to load massive volumes of streaming data into AWS. The capacity of your Firehose is adjusted automatically to keep pace with the stream throughput. It can optionally compress and encrypt the data before it&#8217;s stored.</li>
<li><strong>Amazon Kinesis Streams</strong> are similar to the Firehose service but give you more control, allowing for:
<ul>
<li>Multi-stage processing</li>
<li>Custom stream partitioning rules</li>
<li>Reliable storage of the stream data until it has been processed.</li>
</ul>
</li>
<li><strong>Amazon Kinesis Analytics</strong> is the simplest way to process the data once it has been ingested by either Kinesis Firehose or Streams. The user provides SQL queries which are then applied to analyze the data; the results can then be displayed, stored, or sent to another Kinesis stream for further processing.</li>
</ul>
<p>This post focuses on Amazon Kinesis Streams, in particular, implementing a <em>consumer</em> that ingests the data, enriches it, and then stores it in MongoDB.</p>
<h3>Accessing Kinesis Streams – the Libraries</h3>
<p>There are multiple ways to read (consume) and write (produce) data with Kinesis Streams:</p>
<ul>
<li><a href="https://www.mongodb.com/blog/post/Amazon%20Kinesis%20Streams%20API">Amazon Kinesis Streams API</a>
<ul>
<li>Provides two APIs for putting data into an Amazon Kinesis stream: <a href="http://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecord.html">PutRecord</a> and <a href="http://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecords.html">PutRecords</a></li>
</ul>
</li>
<li><a href="http://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-kpl.html">Amazon Kinesis Producer Library (KPL)</a>
<ul>
<li>Easy to use and highly configurable Java library that helps you put data into an Amazon Kinesis stream. Amazon Kinesis Producer Library (KPL) presents a simple, asynchronous, high throughput, and reliable interface.</li>
</ul>
</li>
<li><a href="http://docs.aws.amazon.com/streams/latest/dev/writing-with-agents.html">Amazon Kinesis Agent</a>
<ul>
<li>The agent continuously monitors a set of files and sends new entries to your Stream or Firehose.</li>
</ul>
</li>
<li><a href="http://docs.aws.amazon.com/kinesis/latest/dev/developing-consumer-apps-with-kcl.html">Amazon Kinesis Client Library (KCL)</a>
<ul>
<li>A Java library that helps you easily build Amazon Kinesis Applications for reading and processing data from an Amazon Kinesis stream. KCL handles issues such as adapting to changes in stream volume, load-balancing streaming data, coordinating distributed services, providing fault-tolerance, and processing data.</li>
</ul>
</li>
<li><a href="https://github.com/awslabs/amazon-kinesis-client/tree/master/src/main/java/com/amazonaws/services/kinesis/multilang">Amazon Kinesis Client Library MultiLangDemon</a>
<ul>
<li>The MultiLangDemon is used as a proxy by non-Java applications to use the Kinesis Client Library.</li>
</ul>
</li>
<li><a href="https://github.com/awslabs/amazon-kinesis-connectors">Amazon Kinesis Connector Library</a>
<ul>
<li>A library that helps you easily integrate Amazon Kinesis with other AWS services and third-party tools.</li>
</ul>
</li>
<li><a href="https://github.com/awslabs/kinesis-storm-spout">Amazon Kinesis Storm Spout</a>
<ul>
<li>A library that helps you easily integrate Amazon Kinesis Streams with Apache Storm.</li>
</ul>
</li>
</ul>
<p>The example application in this post use the Kinesis Agent and the Kinesis Client Library MultiLangDemon (with Node.js).</p>
<h2>Role of MongoDB Atlas</h2>
<p>MongoDB is a distributed database delivering a flexible schema for rapid application development, rich queries, idiomatic drivers, and built in redundancy and scale-out. This makes it the go-to database for anyone looking to build modern applications.</p>
<p><a href="https://www.mongodb.com/cloud">MongoDB Atlas</a> is a hosted database service for MongoDB. It provides all of the features of MongoDB, without the operational heavy lifting required for any new application. MongoDB Atlas is available on demand through a pay-as-you-go model and billed on an hourly basis, letting you focus on what you do best.</p>
<p>It’s easy to get started – use a simple GUI to select the instance size, region, and features you need. MongoDB Atlas provides:</p>
<ul>
<li>Security features to protect access to your data</li>
<li>Built in replication for always-on availability, tolerating complete data center failure</li>
<li>Backups and point in time recovery to protect against data corruption</li>
<li>Fine-grained monitoring to let you know when to scale. Additional instances can be provisioned with the push of a button</li>
<li>Automated patching and one-click upgrades for new major versions of the database, enabling you to take advantage of the latest and greatest MongoDB features</li>
<li>A choice of regions and billing options</li>
</ul>
<p>Like Amazon Kinesis, MongoDB Atlas is a natural fit for users looking to simplify their development and operations work, letting them focus on what makes their application unique rather than commodity (albeit essential) plumbing. Also like Kinesis, you only pay for MongoDB Atlas when you&#8217;re using it with no upfront costs and no charges after you terminate your cluster.</p>
<h2>Example Application</h2>
<p>The rest of this post focuses on building a system to process log data. There are 2 sources of log data:</p>
<ol>
<li>A simple client that acts as a Kinesis Streams <em>producer</em>, generating sensor readings and writing them to a stream</li>
<li><em>Amazon Kinesis Agent</em> monitoring a SYSLOG file and sending each log event to a stream</li>
</ol>
<p>In both cases, the data is consumed from the stream using the same <em>consumer</em>, which adds some metadata to each entry and then stores it in MongoDB Atlas.</p>
<h3>Create Kinesis IAM Policy in AWS</h3>
<p>From the <a href="https://console.aws.amazon.com/iam">IAM section of the AWS console</a> use the wizard to create a new policy. The policy should grant permission to perform specific actions on a particular stream (in this case &#8220;ClusterDBStream&#8221;) and the results should look similar to this:</p>
<p><script src="https://gist.github.com/am-MongoDB/aab01421f66be44ae5d53fd2e4d031ee.js"></script></p>
<p>Next, create a new user and associate it with the new policy. <strong>Important</strong>: Take a note of the <em>AWS_ACCESS_KEY_ID</em> and <em>AWS_SECRET_ACCESS_KEY</em>.</p>
<h3>Create MongoDB Atlas Cluster</h3>
<p>Register with <a href="https://www.mongodb.com/cloud" title="MongoDB Atlas cloud-hosted database service">MongoDB Atlas</a> and use the simple GUI to select the instance size, region, and features you need (Figure 2).</p>
<p><a href="/wp-content/uploads/2016/11/Create_MongoDB_Atlas_Cluster.gif"><img decoding="async" class="alignright size-full wp-image-4278" src="/wp-content/uploads/2016/11/Create_MongoDB_Atlas_Cluster.gif" alt="create mongodb atlas cluster" width="960" height="540" /></a></p>
<p>Create a user with read and write privileges for just the database that will be used for your application, as shown in Figure 3.</p>
<div id="attachment_4279" style="width: 833px" class="wp-caption alignright"><a href="/wp-content/uploads/2016/11/Create_Application_User_in_MongoDB_Atlas.png"><img decoding="async" aria-describedby="caption-attachment-4279" class="size-full wp-image-4279" src="/wp-content/uploads/2016/11/Create_Application_User_in_MongoDB_Atlas.png" alt="Creating an Application user in MongoDB Atlas" width="823" height="922" srcset="/wp-content/uploads/2016/11/Create_Application_User_in_MongoDB_Atlas.png 823w, /wp-content/uploads/2016/11/Create_Application_User_in_MongoDB_Atlas-268x300.png 268w, /wp-content/uploads/2016/11/Create_Application_User_in_MongoDB_Atlas-768x860.png 768w" sizes="(max-width: 823px) 100vw, 823px" /></a><p id="caption-attachment-4279" class="wp-caption-text">Figure 3: Creating an Application user in MongoDB Atlas</p></div>
<p>You must also add the IP address of your application server to the IP Whitelist in the MongoDB Atlas security tab (Figure 4). Note that if multiple application servers will be accessing MongoDB Atlas then an IP address range can be specified in CIDR format (IP Address/number of significant bits).</p>
<div id="attachment_4280" style="width: 1770px" class="wp-caption alignright"><a href="/wp-content/uploads/2016/11/Add_IP_Address_Range_to_MongoDB_Atlas.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4280" class="wp-image-4280 size-full" src="/wp-content/uploads/2016/11/Add_IP_Address_Range_to_MongoDB_Atlas.png" alt="Add App Server IP Address(es) to MongoDB Atlas" width="1760" height="876" srcset="/wp-content/uploads/2016/11/Add_IP_Address_Range_to_MongoDB_Atlas.png 1760w, /wp-content/uploads/2016/11/Add_IP_Address_Range_to_MongoDB_Atlas-300x149.png 300w, /wp-content/uploads/2016/11/Add_IP_Address_Range_to_MongoDB_Atlas-768x382.png 768w, /wp-content/uploads/2016/11/Add_IP_Address_Range_to_MongoDB_Atlas-1024x510.png 1024w" sizes="auto, (max-width: 1760px) 100vw, 1760px" /></a><p id="caption-attachment-4280" class="wp-caption-text">Figure 4: Add App Server IP Address(es) to MongoDB Atlas</p></div>
<p>If your application server(s) are running in AWS, then an alternative to IP Whitelisting is to <a href="https://docs.atlas.mongodb.com/setup-cluster-security/" title="configure a VPC (Virtual Private Cloud) Peering relationship between your MongoDB Atlas group and AWS">configure a VPC (Virtual Private Cloud) Peering relationship between your MongoDB Atlas group and the VPC containing your AWS resources</a>. This removes the requirement to add and remove IP addresses as AWS reschedules functions, and is especially useful when using highly dynamic services such as AWS Lambda.</p>
<p>Click the &#8220;Connect&#8221; button and make a note of the URI that should be used when connecting to the database (note that you will substitute the user name and password with ones that you&#8217;ve just created).</p>
<h3>App Part 1 – Kinesis/Atlas Consumer</h3>
<p>The code and configuration files in Parts 1 &amp; 2 are based on the sample consumer and producer included with the <a href="https://github.com/awslabs/amazon-kinesis-client-nodejs" title="Amazon Kinesis Client Library for Node.js">client library for Node.js (MultiLangDaemon)</a>.</p>
<p>Install the <a href="https://github.com/awslabs/amazon-kinesis-client-nodejs">Node.js client library</a>:</p>
<pre><code>git clone https://github.com/awslabs/amazon-kinesis-client-nodejs.git
cd amazon-kinesis-client-nodejs
npm install
</code></pre>
<p>Install the <a href="https://mongodb.github.io/node-mongodb-native/" title="The next generation Node.JS driver for MongoDB">MongoDB Node.js Driver</a>:</p>
<pre><code>npm install --save mongodb
</code></pre>
<p>Move to the consumer sample folder:</p>
<pre><code>cd samples/basic_sample/consumer/
</code></pre>
<p>Create a configuration file (&#8220;logging_consumer.properties&#8221;), taking care to set the correct stream and application names and AWS region:</p>
<p><script src="https://gist.github.com/am-MongoDB/5edcbe58788cbf40c1776a8f2cb01e1d.js"></script></p>
<p>The code for working with MongoDB can be abstracted to a helper file (&#8220;db.js&#8221;):</p>
<p><script src="https://gist.github.com/am-MongoDB/a04cc764301e0911f59a7b0df2bf5abe.js"></script></p>
<p>Create the application Node.js file (&#8220;logging_consumer_app.js&#8221;), making sure to replace the database user and host details in &#8220;mongodbConnectString&#8221; with your own:</p>
<p><script src="https://gist.github.com/am-MongoDB/3941d20f2f530ae52bb7bd62a3532b69.js"></script></p>
<p>Note that this code adds some metadata to the received object before writing it to MongoDB. At this point, it is also possible to filter objects based on any of their fields.</p>
<p>Note also that this Node.js code logs a lot of information to the &#8220;application log&#8221; file (including the database password!); this is for debugging and would be removed from a real application.</p>
<p>The simplest way to have the application use the user credentials (noted when creating the user in AWS IAM) is to export them from the shell where the application will be launched:</p>
<pre><code>export AWS_ACCESS_KEY_ID=????????????????????
export AWS_SECRET_ACCESS_KEY=????????????????????????????????????????
</code></pre>
<p>Finally, launch the consumer application:</p>
<pre><code>../../../bin/kcl-bootstrap --java /usr/bin/java -e -p ./logging_consumer.properties
</code></pre>
<p>Check the &#8220;application.log&#8221; file for any errors.</p>
<h3>App Part 2 – Kinesis Producer</h3>
<p>As for the consumer, export the credentials for the user created in AWS IAM:</p>
<pre><code>cd amazon-kinesis-client-nodejs/samples/basic_sample/producer

export AWS_ACCESS_KEY_ID=????????????????????
export AWS_SECRET_ACCESS_KEY=????????????????????????????????????????
</code></pre>
<p>Create the configuration file (&#8220;config.js&#8221;) and ensure that the correct AWS region and stream are specified:</p>
<p><script src="https://gist.github.com/am-MongoDB/0ab029c1071a6a715a553b00d2396f40.js"></script></p>
<p>Create the producer code (&#8220;logging_producer.js&#8221;):</p>
<p><script src="https://gist.github.com/am-MongoDB/0ee9d95fc1abcaf0949245811dcf7d6e.js"></script></p>
<p>The producer is launched from &#8220;logging_producer_app.js&#8221;:</p>
<p><script src="https://gist.github.com/am-MongoDB/a598575392fa0f29742fa0952f90ecd8.js"></script></p>
<p>Run the producer:</p>
<pre><code>node logging_producer_app.js
</code></pre>
<p>Check the consumer and producer &#8220;application.log&#8221; files for errors.</p>
<p>At this point, data should have been written to MongoDB Atlas. Using the connection string provided after clicking the &#8220;Connect&#8221; button in MongoDB Atlas, connect to the database and confirm that the documents have been added:</p>
<p><script src="https://gist.github.com/am-MongoDB/66ae718bb72659e179a1073bfd1fbeca.js"></script></p>
<h3>App Part 3 – Capturing Live Logs Using Amazon Kinesis Agent</h3>
<p>Using the same consumer, the next step is to stream real log data. Fortunately, this doesn&#8217;t require any additional code as the Kinesis Agent can be used to monitor files and add every new entry to a Kinesis Stream (or Firehose).</p>
<p>Install the Kinesis Agent:</p>
<pre><code>sudo yum install –y aws-kinesis-agent
</code></pre>
<p>and edit the configuration file to use the correct AWS region, user credentials, and stream in &#8220;/etc/aws-kinesis/agent.json&#8221;:</p>
<p><script src="https://gist.github.com/am-MongoDB/41f45486b4ba170a4b7474cb3d63b45b.js"></script></p>
<p>&#8220;/var/log/messages&#8221; is a SYSLOG file and so a &#8220;dataProcessingOptions&#8221; field is included in the configuration to automatically convert each log into a JSON document before writing it to the Kinesis Stream.</p>
<p>The agent will not run as root and so the permissions for &#8220;/var/log/messages&#8221; need to be made more permissive:</p>
<pre><code>sudo chmod og+r /var/log/messages
</code></pre>
<p>The agent can now be started:</p>
<pre><code>sudo service aws-kinesis-agent start
</code></pre>
<p>Monitor the agent&#8217;s log file to see what it&#8217;s doing:</p>
<pre><code>sudo tail -f /var/log/aws-kinesis-agent/aws-kinesis-agent.log
</code></pre>
<p>If there aren&#8217;t enough logs being generated on the machine then extra ones can be injected manually for testing:</p>
<pre><code>logger -i This is a test log
</code></pre>
<p>This will create a log with the &#8220;program&#8221; field set to your username (in this case, &#8220;ec2-user&#8221;). Check that the logs get added to MongoDB Atlas:</p>
<p><script src="https://gist.github.com/am-MongoDB/777754041547d2a5bb7f1017a34a9c2e.js"></script></p>
<h3>Checking the Data with MongoDB Compass</h3>
<p>To visually navigate through the MongoDB schema and data, <a href="https://www.mongodb.com/download-center?jmp=nav#compass">download and install MongoDB Compass</a>. Use your MongoDB Atlas credentials to connect Compass to your MongoDB database (the hostname should refer to the primary node in your replica set or a &#8220;mongos&#8221; process if your MongoDB cluster is sharded).</p>
<p>Navigate through the structure of the data in the &#8220;clusterdb&#8221; database (Figure 5) and view the JSON documents.</p>
<div id="attachment_4281" style="width: 969px" class="wp-caption alignright"><a href="/wp-content/uploads/2016/11/Compass_schema.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4281" class="size-full wp-image-4281" src="/wp-content/uploads/2016/11/Compass_schema.png" alt="Explore Schema Using MongoDB Compass" width="959" height="958" srcset="/wp-content/uploads/2016/11/Compass_schema.png 959w, /wp-content/uploads/2016/11/Compass_schema-150x150.png 150w, /wp-content/uploads/2016/11/Compass_schema-300x300.png 300w, /wp-content/uploads/2016/11/Compass_schema-768x767.png 768w, /wp-content/uploads/2016/11/Compass_schema-144x144.png 144w" sizes="auto, (max-width: 959px) 100vw, 959px" /></a><p id="caption-attachment-4281" class="wp-caption-text">Figure 5: Explore Schema Using MongoDB Compass</p></div>
<p>Clicking on a value builds a query and then clicking &#8220;Apply&#8221; filters the results (Figure 6).</p>
<div id="attachment_4282" style="width: 721px" class="wp-caption alignright"><a href="/wp-content/uploads/2016/11/Filter_MongoDB_Compass_Results.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4282" class="size-full wp-image-4282" src="/wp-content/uploads/2016/11/Filter_MongoDB_Compass_Results.png" alt="View Filtered Documents in MongoDB Compass" width="711" height="907" srcset="/wp-content/uploads/2016/11/Filter_MongoDB_Compass_Results.png 711w, /wp-content/uploads/2016/11/Filter_MongoDB_Compass_Results-235x300.png 235w" sizes="auto, (max-width: 711px) 100vw, 711px" /></a><p id="caption-attachment-4282" class="wp-caption-text">Figure 6: View Filtered Documents in MongoDB Compass</p></div>
<h3>Add Document Validation Rules</h3>
<p>One of MongoDB’s primary attractions for developers is that it gives them the ability to start application development without first needing to define a formal schema. Operations teams appreciate the fact that they don’t need to perform a time-consuming schema upgrade operation every time the developers need to store a different attribute.</p>
<p>This is well suited to the application built in this post as logs from different sources are likely to include different attributes. There are however some attributes that we always expect to be there (e.g., the metadata that the application is adding). For applications reading the documents from this collection to be able to rely on those fields being present, the documents should be validated before they are written to the database. Prior to MongoDB 3.2, those checks had to be implemented in the application but they can now be performed by the database itself.</p>
<p>Executing a single command from the &#8220;mongo&#8221; shell adds the document checks:</p>
<p><script src="https://gist.github.com/am-MongoDB/0d9c7cb0df7c7bcb3961a43c9d99e607.js"></script></p>
<p>The above command adds multiple checks:</p>
<ul>
<li>The &#8220;program&#8221; field exists and contains a string</li>
<li>There&#8217;s a sub-document called &#8220;metadata&#8221; containing at least 2 fields:</li>
<li>&#8220;mongoLabel&#8221; which must be a string</li>
<li>&#8220;timeAdded&#8221; which must be a date</li>
</ul>
<p>Test that the rules are correctly applied when attempting to write to the database:</p>
<p><script src="https://gist.github.com/am-MongoDB/21d1ef80caf7a69e9d6962cca0667f55.js"></script></p>
<h3>Cleaning Up (IMPORTANT!)</h3>
<p>Remember that you will continue to be charged for the services even when you&#8217;re no longer actively using them. If you no longer need to use the services then clean up:</p>
<ul>
<li>From the MongoDB Atlas GUI, select your Cluster, click on the ellipses and select &#8220;Terminate&#8221;.</li>
<li>From the AWS management console select the Kinesis service, then Kinesis Streams, and then delete your stream.</li>
<li>From the AWS management console select the DynamoDB service, then tables, and then delete your table.</li>
</ul>
<h2>Using MongoDB Atlas with Other Frameworks and Services</h2>
<p>We have detailed walkthroughs for using MongoDB Atlas with several programming languages and frameworks, as well as generic instructions that can be used with others. They can all be found in <a href="/mongodb/using-mongodb-atlas-from-your-favorite-language-or-framework">Using MongoDB Atlas From Your Favorite Language or Framework</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/mongodb_amazon_kinesis/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Using MongoDB Atlas From Your Favorite Language or Framework</title>
		<link>/mongodb/using-mongodb-atlas-from-your-favorite-language-or-framework</link>
					<comments>/mongodb/using-mongodb-atlas-from-your-favorite-language-or-framework#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 16 Sep 2016 09:06:56 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[Frameworks]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Atlas]]></category>
		<guid isPermaLink="false">/?p=4248</guid>

					<description><![CDATA[Developers love working with MongoDB. One reason is the flexible data model, another is that there&#8217;s an idiomatic driver for just about every programming language and someone&#8217;s probably already built a framework on top of MongoDB that takes care of a lot of the grunt work. With high availability and scaling built in, they can]]></description>
										<content:encoded><![CDATA[<p>Developers love working with MongoDB. One reason is the flexible data model, another is that there&#8217;s an idiomatic driver for just about every programming language and someone&#8217;s probably already built a framework on top of MongoDB that takes care of a lot of the grunt work. With high availability and scaling built in, they can also be confident that MongoDB will continue to meet their needs as their business grows.</p>
<p><a href="https://www.mongodb.com/cloud">MongoDB Atlas</a> provides all of the features of MongoDB, without the operational heavy lifting required for any new application. MongoDB Atlas is available on demand through a pay-as-you-go model and billed on an hourly basis, letting you focus on what you do best.</p>
<p>It’s easy to get started – use a simple GUI to select the instance size, region, and features you need (Figure 1).</p>
<div id="attachment_4249" style="width: 970px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Create_MongoDB_Atlas_Cluster.gif"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4249" src="/wp-content/uploads/2016/09/Create_MongoDB_Atlas_Cluster.gif" alt="Create MongoDB Atlas Cluster" width="960" height="540" class="size-full wp-image-4249" /></a><p id="caption-attachment-4249" class="wp-caption-text">Figure 1: Create MongoDB Atlas Cluster</p></div>
<p>MongoDB Atlas provides:</p>
<ul>
<li>Security features to protect access to your data</li>
<li>Built in replication for always-on availability, tolerating complete data center failure</li>
<li>Backups and point in time recovery to protect against data corruption</li>
<li>Fine-grained monitoring to let you know when to scale. Additional instances can be provisioned with the push of a button</li>
<li>Automated patching and one-click upgrades for new major versions of the database, enabling you to take advantage of the latest and greatest MongoDB features</li>
<li>A choice of cloud providers, regions, and billing options</li>
</ul>
<p>This post provides instructions on how to use MongoDB Atlas directly from your application or how to configure your favorite framework to use it. It goes on to provide links to some worked examples for specific frameworks.</p>
<h1>Worked Examples for Specific Frameworks</h1>
<p>Detailed walkthroughs are available for specific programming languages and frameworks:</p>
<ul>
<li><a href="https://www.mongodb.com/blog/post/using-pencilblue-with-mongodb-atlas">Using PencilBlue with MongoDB Atlas</a> (JavaScript, Node.js)</li>
<li><a href="https://www.mongodb.com/blog/post/develop-and-deploy-a-nodejs-app-to-aws-elastic-beanstalk-and-mongodb-atlas">Develop &amp; Deploy a Node.js App to AWS Elastic Beanstalk &amp; MongoDB Atlas</a> (JavaScript, Node.js, Express, AWS Elastic Beanstalk)</li>
<li><a href="https://www.mongodb.com/blog/post/processing-data-streams-with-amazon-kinesis-and-mongodb-atlas">Processing Data Streams with Amazon Kinesis and MongoDB Atlas</a> (Amazon Kinesis, JavaScript, Node.js)</li>
<li><a href="https://www.mongodb.com/blog/post/mongodb-atlas-as-the-data-store-for-apostrophe">MongoDB Atlas as The Data Store for Apostrophe</a> (JavaScript, Node.js)</li>
<li><a href="https://www.mongodb.com/blog/post/configuring-keystonejs-to-use-mongodb-atlas">Configuring KeystoneJS to Use MongoDB Atlas</a> (JavaSript, Express, Node.js)</li>
<li><a href="https://www.mongodb.com/blog/post/getting-started-with-python-pymodm-and-mongodb-atlas">Getting Started with Python, PyMODM, and MongoDB Atlas</a> (Python, PyMODM)</li>
<li><a href="https://www.okgrow.com/posts/mongodb-atlas-setup">MongoDB Atlas with Meteor: A Step-By-Step Guide</a> <strong>External site</strong> (Meteor, JavaScript, Angular, React</li>
</ul>
<p>This list will be extended as new blog posts are produced. If your preferred language or framework isn&#8217;t listed above then read on as the following, generic instructions cover most other cases.</p>
<h1>Preparing MongoDB Atlas For Your Application</h1>
<p>Launch your MongoDB cluster using <a href="https://www.mongodb.com/cloud">MongoDB Atlas</a> and then (optionally) create a user with read and write privileges for just the database that will be used for your application, as shown in Figure 2.</p>
<div id="attachment_4250" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Create_Application_User_in_MongoDB_Atlas.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4250" src="/wp-content/uploads/2016/09/Create_Application_User_in_MongoDB_Atlas-1024x979.png" alt="Creating an Application user in MongoDB Atlas" width="480" height="459" class="size-large wp-image-4250" srcset="/wp-content/uploads/2016/09/Create_Application_User_in_MongoDB_Atlas-1024x979.png 1024w, /wp-content/uploads/2016/09/Create_Application_User_in_MongoDB_Atlas-300x287.png 300w, /wp-content/uploads/2016/09/Create_Application_User_in_MongoDB_Atlas-768x734.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4250" class="wp-caption-text">Figure 2: Creating an Application user in MongoDB Atlas</p></div>
<p>You must also add the IP address of your application server to the IP Whitelist in the MongoDB Atlas security tab (Figure 3). Note that if multiple application servers will be accessing MongoDB Atlas then an IP address range can be specified in CIDR format (IP Address/number of significant bits).</p>
<div id="attachment_4252" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Add_IP_Address_Range_to_MongoDB_Atlas.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4252" src="/wp-content/uploads/2016/09/Add_IP_Address_Range_to_MongoDB_Atlas-1024x510.png" alt="Add App Server IP Address(es) to MongoDB Atlas" width="480" height="239" class="size-large wp-image-4252" srcset="/wp-content/uploads/2016/09/Add_IP_Address_Range_to_MongoDB_Atlas-1024x510.png 1024w, /wp-content/uploads/2016/09/Add_IP_Address_Range_to_MongoDB_Atlas-300x149.png 300w, /wp-content/uploads/2016/09/Add_IP_Address_Range_to_MongoDB_Atlas-768x382.png 768w, /wp-content/uploads/2016/09/Add_IP_Address_Range_to_MongoDB_Atlas.png 1760w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4252" class="wp-caption-text">Figure 3: Add App Server IP Address(es) to MongoDB Atlas</p></div>
<h1>Connecting Your Application (Framework) to MongoDB Atlas</h1>
<p>The exact way that you specify how to connect to MongoDB Atlas will vary depending on your programming language and (optionally) the framework you&#8217;re using. However it&#8217;s pretty universal that you&#8217;ll need to provide a connection string/URI. The core of this URI can be retrieved by clicking on the <em>CONNECT</em> button for your cluster in the MongoDB Atlas GUI, selecting the <em>MongoDB Drivers</em> tab and then copying the string (Figure 4).</p>
<div id="attachment_4253" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/MongoDB_Atlas_URI.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4253" src="/wp-content/uploads/2016/09/MongoDB_Atlas_URI-1024x399.png" alt="Copy MongoDB Atlas Connection String/URI" width="480" height="187" class="size-large wp-image-4253" srcset="/wp-content/uploads/2016/09/MongoDB_Atlas_URI-1024x399.png 1024w, /wp-content/uploads/2016/09/MongoDB_Atlas_URI-300x117.png 300w, /wp-content/uploads/2016/09/MongoDB_Atlas_URI-768x299.png 768w, /wp-content/uploads/2016/09/MongoDB_Atlas_URI.png 1380w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4253" class="wp-caption-text">Figure 4: Copy MongoDB Atlas Connection String/URI</p></div>
<p>Note that this URI contains the administrator username for your MongoDB Atlas group and will connect to the <em>admin</em> database – you&#8217;ll probably want to change that.</p>
<p>Your final URI should look something like this:</p>
<pre><code>mongodb://appuser:my_password@cluster0-shard-00-00-qfovx.mongodb.net:27017,cluster0-shard-00-01-qfovx.mongodb.net:27017,cluster0-shard-00-02-qfovx.mongodb.net:27017/appdatabase?ssl=true&amp;authSource=admin'
</code></pre>
<p>The URI contains these components:</p>
<ul>
<li><strong>appuser</strong> is the name of the user you created in the MongoDB Atlas UI.</li>
<li><strong>my_password</strong> is the password you chose when creating the user in MongoDB Atlas.</li>
<li><strong>cluster0-shard-00-00-qfovx.mongodb.net</strong>, <strong>cluster0-shard-00-01-qfovx.mongodb.net</strong>, &amp; <strong>cluster0-shard-00-02-qfovx.mongodb.net</strong> are the hostnames of the instances in your MongoDB Atlas replica set (click on the &#8220;CONNECT&#8221; button in the MongoDB Atlas UI if you don&#8217;t have these).</li>
<li><strong>27017</strong> is the standard MongoDB port number.</li>
<li><strong>appdatabase</strong> is the name of the database (schema) that your application or framework will use. Note that for some frameworks, this should be omitted and the database name configured separately – check the default configuration file or documentation for your framework to see if it&#8217;s possible to provide the database name outside of the URI.</li>
<li>To enforce security, MongoDB Atlas mandates that the <strong>ssl</strong> option is used.</li>
<li><strong>admin</strong> is the database that&#8217;s being used to store the credentials for <strong>appuser</strong>.</li>
</ul>
<h1>Check Your Application Data</h1>
<p>At this point, you should add some test data through your application and then confirm that it&#8217;s being correctly stored in MongoDB Atlas.</p>
<p><a href="https://www.mongodb.com/products/compass">MongoDB Compass</a> is the GUI for MongoDB, allowing you to visually explore your data and interact with your data with full CRUD functionality. The same credentials can be used to connect Compass to your MongoDB database (Figure 5).</p>
<div id="attachment_4254" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-2.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4254" src="/wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-2-1024x794.png" alt="Connect MongoDB Compass to MongoDB Atlas" width="480" height="372" class="size-large wp-image-4254" srcset="/wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-2-1024x794.png 1024w, /wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-2-300x233.png 300w, /wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-2-768x595.png 768w, /wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-2.png 1798w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4254" class="wp-caption-text">Figure 5: Connect MongoDB Compass to MongoDB Atlas</p></div>
<p>Once connected, explore the data added to your collections (Figure 6).</p>
<div id="attachment_4255" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Explore_MongoDB_Atlas_data_with_MongoDB_Compass-1.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4255" src="/wp-content/uploads/2016/09/Explore_MongoDB_Atlas_data_with_MongoDB_Compass-1-1024x734.png" alt="Explore MongoDB Atlas Data Using MongoDB Compass" width="480" height="344" class="size-large wp-image-4255" srcset="/wp-content/uploads/2016/09/Explore_MongoDB_Atlas_data_with_MongoDB_Compass-1-1024x734.png 1024w, /wp-content/uploads/2016/09/Explore_MongoDB_Atlas_data_with_MongoDB_Compass-1-300x215.png 300w, /wp-content/uploads/2016/09/Explore_MongoDB_Atlas_data_with_MongoDB_Compass-1-768x550.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4255" class="wp-caption-text">Figure 6: Explore MongoDB Atlas Data Using MongoDB Compass</p></div>
<p>It is also possible to add, delete, and modify documents (Figure 7).</p>
<div id="attachment_4256" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Modify_MongoDB_Atlas_document_in_MongoDB_Compass-1.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4256" src="/wp-content/uploads/2016/09/Modify_MongoDB_Atlas_document_in_MongoDB_Compass-1-1024x340.png" alt="Modify a Document in MongoDB Compass" width="480" height="159" class="size-large wp-image-4256" srcset="/wp-content/uploads/2016/09/Modify_MongoDB_Atlas_document_in_MongoDB_Compass-1-1024x340.png 1024w, /wp-content/uploads/2016/09/Modify_MongoDB_Atlas_document_in_MongoDB_Compass-1-300x100.png 300w, /wp-content/uploads/2016/09/Modify_MongoDB_Atlas_document_in_MongoDB_Compass-1-768x255.png 768w, /wp-content/uploads/2016/09/Modify_MongoDB_Atlas_document_in_MongoDB_Compass-1.png 2002w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4256" class="wp-caption-text">Figure 7: Modify a Document in MongoDB Compass</p></div>
<p>You can verify that the document has really been updated from the MongoDB shell:</p>
<pre><code class="js">Cluster0-shard-0:PRIMARY&gt; use appdatabase
Cluster0-shard-0:PRIMARY&gt; db.simples.find({
    first_name: "Stephanie", 
    last_name: "Green"}).pretty()
{
    "_id" : ObjectId("57a206be0e8ecb0d5b5549f9"),
    "first_name" : "Stephanie",
    "last_name" : "Green",
    "email" : "sgreen1b@tiny.cc",
    "gender" : "Female",
    "ip_address" : "129.173.45.61",
    "children" : [
        {
            "first_name" : "Eugene",
            "birthday" : "8/25/1985"
        },
        {
            "first_name" : "Nicole",
            "birthday" : "12/29/1963",
            "favoriteColor" : "Yellow"
        }
    ]
}
</code></pre>
<h1>Migrating Your Data to MongoDB Atlas</h1>
<p>This post has assumed that you&#8217;re building a new application but what if you already have one, with data stored in a MongoDB cluster that you&#8217;re managing yourself? Fortunately, the process to migrate your data to MongoDB Atlas (and back out again if desired) is straightforward and is described in <a href="https://www.mongodb.com/blog/post/migrating-data-to-mongodb-atlas">Migrating Data to MongoDB Atlas</a>.</p>
<p>We offer a <a href="https://www.mongodb.com/products/consulting#mongodb_atlas_migration">MongoDB Atlas Migration service</a> to help you properly configure MongoDB Atlas and develop a migration plan. This is especially helpful if you need to minimize downtime for your application, if you have a complex sharded deployment, or if you want to revise your deployment architecture as part of the migration. <a href="https://www.mongodb.com/contact/consulting/mongodb-atlas-migration">Contact us</a> to learn more about the MongoDB Atlas Migration service.</p>
<h1>Next Steps</h1>
<p>While MongoDB Atlas radically simplifies the operation of MongoDB there are still some decisions to take to ensure the best performance and reliability for your application. The <a href="https://www.mongodb.com/collateral/mongodb-atlas-best-practices">MongoDB Atlas Best Practices white paper</a> provides guidance on best practices for deploying, managing, and optimizing the performance of your database with MongoDB Atlas.</p>
<p>The guide outlines considerations for achieving performance at scale with MongoDB Atlas across a number of key dimensions, including instance size selection, application patterns, schema design and indexing, and disk I/O. While this guide is broad in scope, it is not exhaustive. Following the recommendations in the guide will provide a solid foundation for ensuring optimal application performance.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/using-mongodb-atlas-from-your-favorite-language-or-framework/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Configuring KeystoneJS to Use MongoDB Atlas</title>
		<link>/mongodb/configuring-keystonejs-to-use-mongodb-atlas</link>
					<comments>/mongodb/configuring-keystonejs-to-use-mongodb-atlas#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 16 Sep 2016 08:48:27 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[CMS]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[KeystoneJS]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Atlas]]></category>
		<category><![CDATA[node.js]]></category>
		<guid isPermaLink="false">/?p=4239</guid>

					<description><![CDATA[KeystoneJS is an open source framework for building web applications and Content Management Systems. It&#8217;s built on top of MongoDB, Express, and Node.js &#8211; key components of the ubiquitous MEAN stack. This post explains why MongoDB Atlas is an ideal choice for KeystoneJS and then goes on to show how to configure KeystoneJS to use]]></description>
										<content:encoded><![CDATA[<p>KeystoneJS is an open source framework for building web applications and Content Management Systems. It&#8217;s built on top of MongoDB, Express, and Node.js &#8211; key components of the ubiquitous MEAN stack.</p>
<p>This post explains why MongoDB Atlas is an ideal choice for KeystoneJS and then goes on to show how to configure KeystoneJS to use it.</p>
<h1>Why are KeystoneJS and MongoDB Atlas a Good Match</h1>
<p>The MEAN stack is extremely popular and well supported and it&#8217;s the go to platform when developing modern applications. For its part, MongoDB brings flexible schemas, rich queries, an idiomatic Node.js driver, and simple to use high availability and scaling.</p>
<p><a href="https://www.mongodb.com/cloud">MongoDB Atlas</a> provides all of the features of MongoDB, without the operational heavy lifting required for any new application. MongoDB Atlas is available on demand through a pay-as-you-go model and billed on an hourly basis, letting you focus on what you do best.</p>
<p>It’s easy to get started – use a simple GUI to select the instance size, region, and features you need. MongoDB Atlas provides:</p>
<ul>
<li>Security features to protect access to your data</li>
<li>Built in replication for always-on availability, tolerating complete data center failure</li>
<li>Backups and point in time recovery to protect against data corruption</li>
<li>Fine-grained monitoring to let you know when to scale. Additional instances can be provisioned with the push of a button</li>
<li>Automated patching and one-click upgrades for new major versions of the database, enabling you to take advantage of the latest and greatest MongoDB features</li>
<li>A choice of cloud providers, regions, and billing options</li>
</ul>
<p>Like KeystoneJS, MongoDB Atlas is a natural fit for users looking to simplify their development and operations work, letting them focus on what makes their application unique rather than commodity (albeit essential) plumbing.</p>
<h1>Installing KeystoneJS and Configuring it to Use MongoDB Atlas</h1>
<p>Before starting with KeystoneJS, you should launch your MongoDB cluster using <a href="https://www.mongodb.com/cloud">MongoDB Atlas</a> and then (optionally) create a user with read and write privileges for just the database that will be used for this project, as shown in Figure 1. You must also add the IP address of your application server to the IP Whitelist in the MongoDB Atlas security tab.</p>
<div id="attachment_4240" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Add_KeystoneJS_user.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4240" src="/wp-content/uploads/2016/09/Add_KeystoneJS_user-1024x891.png" alt="Creating KeystoneJS user in MongoDB Atlas" width="480" height="418" class="size-large wp-image-4240" srcset="/wp-content/uploads/2016/09/Add_KeystoneJS_user-1024x891.png 1024w, /wp-content/uploads/2016/09/Add_KeystoneJS_user-300x261.png 300w, /wp-content/uploads/2016/09/Add_KeystoneJS_user-768x668.png 768w, /wp-content/uploads/2016/09/Add_KeystoneJS_user.png 2010w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4240" class="wp-caption-text">Figure 1: Creating KeystoneJS user in MongoDB Atlas</p></div>
<p>If it isn&#8217;t already installed on your system, download and install Node.js:</p>
<p><script src="https://gist.github.com/am-MongoDB/3bbb946bb35fd8054e95adf92b96f103.js"></script><br />
You should then add the <code>bin</code> sub-folder to your <code>.bash_profile</code> file and then install KeystoneJS:</p>
<p><script src="https://gist.github.com/am-MongoDB/ada983d4879a3439751da83044644790.js"></script></p>
<p>Before starting KeystoneJS you need to configure it with details on how to connect to your specific MongoDB Atlas cluster. This is done by updating the <code>MONGO_URI</code> value within the <code>.env</code> file:</p>
<p><script src="https://gist.github.com/am-MongoDB/2b40abeec5e34a9443a26012507417d6.js"></script></p>
<p>The URI contains these components:</p>
<ul>
<li><code>keystonejs_user</code> is the name of the user you created in the MongoDB Atlas UI</li>
<li><code>my_password</code> is the password you chose when creating the user in MongoDB Atlas</li>
<li><code>cluster0-shard-00-00-qfovx.mongodb.net</code>, <code>cluster0-shard-00-01-qfovx.mongodb.net</code>, &amp; <code>cluster0-shard-00-02-qfovx.mongodb.net</code> are the hostnames of the instances in your MongoDB Atlas replica set (click on the &#8220;CONNECT&#8221; button in the MongoDB Atlas UI if you don&#8217;t have these)</li>
<li><code>27017</code> is the standard MongoDB port number</li>
<li><code>clusterdb</code> is the name of the database (schema) that KeystoneJS will use (note that this must match the project name used when installing KeystoneJS as well as the database you granted the user access to)</li>
<li>To enforce security, MongoDB Atlas mandates that the <code>ssl</code> option is used</li>
<li><code>admin</code> is the database that&#8217;s being used to store the credentials for <code>keystonejs_user</code></li>
</ul>
<p>Clients connect to KeystoneJS through port 3000 and so you must open that port in your firewall.</p>
<p>You can then start KeystoneJS:</p>
<pre><code>$ node keystone
</code></pre>
<p><script src="https://gist.github.com/am-MongoDB/7e0305ec2a8acf6a9891a44da048987a.js"></script></p>
<h1>Testing the Configuration</h1>
<p>Browse to the application at <code>http://address-of-app-server:3000/</code> as shown in Figure 2.</p>
<div id="attachment_4241" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/KeystoneJS.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4241" src="/wp-content/uploads/2016/09/KeystoneJS-1024x648.png" alt="KeystoneJS Running on MongoDB Atlas" width="480" height="304" class="size-large wp-image-4241" srcset="/wp-content/uploads/2016/09/KeystoneJS-1024x648.png 1024w, /wp-content/uploads/2016/09/KeystoneJS-300x190.png 300w, /wp-content/uploads/2016/09/KeystoneJS-768x486.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4241" class="wp-caption-text">Figure 2: KeystoneJS Running on MongoDB Atlas</p></div>
<p>Sign in using the credentials shown and then confirm that you can upload some images to a gallery and create a new page as shown in Figure 3.</p>
<div id="attachment_4242" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/create_KeystoneJS_post_on_MongoDB_Atlas.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4242" src="/wp-content/uploads/2016/09/create_KeystoneJS_post_on_MongoDB_Atlas-1024x943.png" alt="Create a Page in KeystoneJS with Data Stored in MongoDB Atlas" width="480" height="442" class="size-large wp-image-4242" srcset="/wp-content/uploads/2016/09/create_KeystoneJS_post_on_MongoDB_Atlas-1024x943.png 1024w, /wp-content/uploads/2016/09/create_KeystoneJS_post_on_MongoDB_Atlas-300x276.png 300w, /wp-content/uploads/2016/09/create_KeystoneJS_post_on_MongoDB_Atlas-768x707.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4242" class="wp-caption-text">Figure 3: Create a Page in KeystoneJS with Data Stored in MongoDB Atlas</p></div>
<p>After saving the page, confirm that you can browse to the newly created post (Figure 4).</p>
<div id="attachment_4243" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/view_KeystoneJS_post_on_MongoDB_Atlas.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4243" src="/wp-content/uploads/2016/09/view_KeystoneJS_post_on_MongoDB_Atlas-1024x905.png" alt="View KeystoneJS Post with Data Read from MongoDB Atlas" width="480" height="424" class="size-large wp-image-4243" srcset="/wp-content/uploads/2016/09/view_KeystoneJS_post_on_MongoDB_Atlas-1024x905.png 1024w, /wp-content/uploads/2016/09/view_KeystoneJS_post_on_MongoDB_Atlas-300x265.png 300w, /wp-content/uploads/2016/09/view_KeystoneJS_post_on_MongoDB_Atlas-768x679.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4243" class="wp-caption-text">Figure 4: View KeystoneJS Post with Data Read from MongoDB Atlas</p></div>
<p>Optionally, confirm that, MongoDB Atlas really is being used by KeystoneJS, you can connect using the MongoDB shell:</p>
<p><script src="https://gist.github.com/am-MongoDB/ec422d08c7a5560f776b5638f06185d6.js"></script></p>
<p>To visually navigate through the schema and data created by KeystoneJS, <a href="https://www.mongodb.com/download-center?jmp=nav#compass">download and install MongoDB Compass</a>. The same credentials can be used to connect Compass to your MongoDB database – Figure 5.</p>
<div id="attachment_4244" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-1.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4244" src="/wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-1-1024x794.png" alt="Connect MongoDB Compass to MongoDB Atlas Database" width="480" height="372" class="size-large wp-image-4244" srcset="/wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-1-1024x794.png 1024w, /wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-1-300x233.png 300w, /wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-1-768x595.png 768w, /wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-1.png 1798w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4244" class="wp-caption-text">Figure 5: Connect MongoDB Compass to MongoDB Atlas Database</p></div>
<p>Navigate through the structure of the data in the <code>clusterdb</code> database (Figure 6) and view the JSON documents (Figure 7).</p>
<div id="attachment_4245" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Compass_KeystoneJS_Schema.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4245" src="/wp-content/uploads/2016/09/Compass_KeystoneJS_Schema-1024x712.png" alt="Explore KeystoneJS Schema Using MongoDB Compass" width="480" height="334" class="size-large wp-image-4245" srcset="/wp-content/uploads/2016/09/Compass_KeystoneJS_Schema-1024x712.png 1024w, /wp-content/uploads/2016/09/Compass_KeystoneJS_Schema-300x209.png 300w, /wp-content/uploads/2016/09/Compass_KeystoneJS_Schema-768x534.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4245" class="wp-caption-text">Figure 6: Explore KeystoneJS Schema Using MongoDB Compass</p></div>
<div id="attachment_4246" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Compass_KeystoneJS_Data.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4246" src="/wp-content/uploads/2016/09/Compass_KeystoneJS_Data-1024x435.png" alt="View Documents Stored by KeystoneJS Using MongoDB Atlas" width="480" height="204" class="size-large wp-image-4246" srcset="/wp-content/uploads/2016/09/Compass_KeystoneJS_Data-1024x435.png 1024w, /wp-content/uploads/2016/09/Compass_KeystoneJS_Data-300x128.png 300w, /wp-content/uploads/2016/09/Compass_KeystoneJS_Data-768x327.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4246" class="wp-caption-text">Figure 7: View Documents Stored by KeystoneJS Using MongoDB Atlas</p></div>
<h1>Next Steps</h1>
<p>While MongoDB Atlas radically simplifies the operation of MongoDB there are still some decisions to take to ensure the best performance and reliability for your application. The <a href="https://www.mongodb.com/collateral/mongodb-atlas-best-practices">MongoDB Atlas Best Practices white paper</a> provides guidance on best practices for deploying, managing, and optimizing the performance of your database with MongoDB Atlas.</p>
<p>The guide outlines considerations for achieving performance at scale with MongoDB Atlas across a number of key dimensions, including instance size selection, application patterns, schema design and indexing, and disk I/O. While this guide is broad in scope, it is not exhaustive. Following the recommendations in the guide will provide a solid foundation for ensuring optimal application performance.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/configuring-keystonejs-to-use-mongodb-atlas/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Migrating Data to MongoDB Atlas</title>
		<link>/mongodb/migrating-data-to-mongodb-atlas</link>
					<comments>/mongodb/migrating-data-to-mongodb-atlas#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 16 Sep 2016 08:34:35 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[DBaaS]]></category>
		<category><![CDATA[Migration]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Atlas]]></category>
		<guid isPermaLink="false">/?p=4235</guid>

					<description><![CDATA[MongoDB Atlas was announced at this year&#8217;s MongoDB World. It&#8217;s great not just for new applications, but also your existing MongoDB databases running on other platforms. This post will focus on how you migrate your data and applications over to MongoDB Atlas. What is MongoDB Atlas? MongoDB Atlas provides all of the features of MongoDB,]]></description>
										<content:encoded><![CDATA[<p><a href="https://www.mongodb.com/atlas">MongoDB Atlas</a> was announced at this year&#8217;s MongoDB World. It&#8217;s great not just for new applications, but also your existing MongoDB databases running on other platforms. This post will focus on how you migrate your data and applications over to MongoDB Atlas.</p>
<h1>What is MongoDB Atlas?</h1>
<p>MongoDB Atlas provides all of the features of MongoDB, without the operational heavy lifting required for any new application. MongoDB Atlas is available on demand through a pay-as-you-go model and billed on an hourly basis, letting you focus on what you do best.</p>
<p>It’s easy to get started – use a simple GUI to select the instance size, region, and features you need. MongoDB Atlas provides:</p>
<ul>
<li>Security features to protect access to your data</li>
<li>Built in replication for always-on availability, tolerating complete data center failure</li>
<li>Backups and point in time recovery to protect against data corruption</li>
<li>Fine-grained monitoring to let you know when to scale. Additional instances can be provisioned with the push of a button</li>
<li>Automated patching and one-click upgrades for new major versions of the database, enabling you to take advantage of the latest and greatest MongoDB features</li>
<li>A choice of cloud providers, regions, and billing options</li>
</ul>
<p>But what if you already have application data held in your own on-prem or cloud-based MongoDB database – is it possible to safely migrate that data to MongoDB Atlas? What if your data is held in a 3rd party hosted MongoDB service such as Compose or mLab? Conversely, is it possible to build your application against MongoDB Atlas and then move the data to a MongoDB database running on another platform in the future?</p>
<p>The answer to all of those questions is &#8220;yes&#8221;. In the future you should expect this to be a highly automated process but right now it involves some manual steps – the purpose of this blog post is to describe the process.</p>
<h1>Moving Your Application Data to MongoDB Atlas</h1>
<p>The procedure is very straightforward, but if you can&#8217;t tolerate losing any of your updates then it does involve stopping application writes for a period. That means it&#8217;s vital that you prepare in advance in order to minimize the impact.</p>
<h2>Pre-Migration Checklist</h2>
<ul>
<li>How long will writes need to be stopped? Perform a dry-run of the <code>mongodump</code> &amp; <code>mongorestore</code> steps but without stopping application writes to answer this.</li>
<li>When will the stopping of writes have the smallest impact?</li>
<li>What can you change in the application to minimize the impact, e.g. provide a read-only version of the service when it isn&#8217;t possible to write to the database?</li>
<li>Will you warn users of planned maintenance ahead of time?</li>
<li>Do you have sufficient storage space to store the dumped data on the machine where you plan to run <code>mongodump</code>?</li>
<li>Once the data has been migrated to MongoDB Atlas, the application will need to switch its database connections to the new address; identify how this will be done.</li>
<li>List the IP Addresses of all the machines that will need to connect to MongoDB Atlas – this includes your application nodes as well as the machine where <code>mongorestore</code> will be run. These will need to be added to your MongoDB Atlas group&#8217;s whitelist.</li>
<li>Decide on what MongoDB Atlas instance size to use and, if necessary how many shards will be needed.</li>
<li>Decide on which region to use, e.g. co locating the MongoDB Atlas instances with your cloud-based application servers.</li>
</ul>
<h2>Execute the Migration</h2>
<ul>
<li>Create the <a href="https://www.mongodb.com/cloud">MongoDB Atlas cluster</a>.</li>
<li>Add the required IP Addresses to the whitelist in your group&#8217;s security tab.</li>
<li>Stop database writes to your existing database; either in your application logic or by blocking them for each of your databases (schemas) in the original MongoDB deployment:</li>
</ul>
<pre><code>laptop&gt; mongo --host=ec2-52-208-185-213.eu-west-1.compute.amazonaws.com \
    --eval "db.fsyncLock()"
</code></pre>
<ul>
<li>Back up the data from the existing database (writes the data to a directory named <code>dump</code>):</li>
</ul>
<pre><code>laptop&gt; mongodump --host=ec2-52-208-185-213.eu-west-1.compute.amazonaws.com \
    --port=27017
</code></pre>
<ul>
<li>Write the data to MongoDB Atlas (using the connection information provided in the Web UI):</li>
</ul>
<pre><code>mongorestore --ssl --host cluster0-shard-00-00-qfovx.mongodb.net \
    --port 27017 -u billy -p XXX dump
</code></pre>
<ul>
<li>Switch the application&#8217;s database connections over to your MongoDB Atlas instance.</li>
</ul>
<p>Want more help?  We offer a <a href="https://www.mongodb.com/products/consulting#mongodb_atlas_migration">MongoDB Atlas Migration service</a> to help you properly configure MongoDB Atlas and develop a migration plan. This is especially helpful if you need to minimize downtime for your application, if you have a complex sharded deployment, or if you want to revise your deployment architecture as part of the migration. <a href="https://www.mongodb.com/contact/consulting/mongodb-atlas-migration">Contact us</a> to learn more about the MongoDB Atlas Migration service.</p>
<h1>Moving Your Application Data Out of MongoDB Atlas</h1>
<p>To migrate data out, you can download a MongoDB Atlas backup and then copy the contents to the receiving MongoDB cluster; the <a href="https://docs.cloudmanager.mongodb.com/tutorial/restore-replica-set/#restore-the-primary">documentation describes how to load the data into the receiving replica set</a>. The backup can be either a periodic snapshot or a point-in-time view of the MongoDB Atlas database. If you can&#8217;t tolerate lost writes, they must be stopped by the application (<code>fsyncLock</code> is not available in MongoDB Atlas).</p>
<h1>Getting the Best Out of MongoDB Atlas</h1>
<p>While MongoDB Atlas radically simplifies the operation of MongoDB there are still some decisions to take to ensure the best performance and reliability for your application. The <a href="https://www.mongodb.com/collateral/mongodb-atlas-best-practices">MongoDB Atlas Best Practices white paper</a> provides guidance on best practices for deploying, managing, and optimizing the performance of your database with MongoDB Atlas.</p>
<p>The guide outlines considerations for achieving performance at scale with MongoDB Atlas across a number of key dimensions, including instance size selection, application patterns, schema design and indexing, and disk I/O. While this guide is broad in scope, it is not exhaustive. Following the recommendations in the guide will provide a solid foundation for ensuring optimal application performance.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/migrating-data-to-mongodb-atlas/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Using PencilBlue with MongoDB Atlas</title>
		<link>/mongodb/using-pencilblue-with-mongodb-atlas</link>
					<comments>/mongodb/using-pencilblue-with-mongodb-atlas#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Thu, 15 Sep 2016 17:31:07 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Atlas]]></category>
		<category><![CDATA[MongoDB Compass]]></category>
		<category><![CDATA[node.js]]></category>
		<category><![CDATA[PencilBlue]]></category>
		<guid isPermaLink="false">/?p=4215</guid>

					<description><![CDATA[PencilBlue is a Node.js based, open source blogging and Content Management System, targeted at enterprise grade websites. This post explains why MongoDB Atlas is an ideal choice for PencilBlue and then goes on to show how to configure PencilBlue to use it. Why MongoDB Atlas is the Ideal Database for PencilBlue MongoDB delivers flexible schemas,]]></description>
										<content:encoded><![CDATA[<p>PencilBlue is a Node.js based, open source blogging and Content Management System, targeted at enterprise grade websites.</p>
<p>This post explains why MongoDB Atlas is an ideal choice for PencilBlue and then goes on to show how to configure PencilBlue to use it.</p>
<h1>Why MongoDB Atlas is the Ideal Database for PencilBlue</h1>
<p>MongoDB delivers flexible schemas, rich queries, an idiomatic Node.js driver, and simple to use high availability and scaling. This makes it the go-to database for anyone looking to build applications on Node.js.</p>
<p><a href="https://www.mongodb.com/cloud">MongoDB Atlas</a> provides all of the features of MongoDB, without the operational heavy lifting required for any new application. MongoDB Atlas is available on demand through a pay-as-you-go model and billed on an hourly basis, letting you focus on what you do best.</p>
<p>It’s easy to get started – use a simple GUI to select the instance size, region, and features you need. MongoDB Atlas provides:</p>
<ul>
<li>Security features to protect access to your data</li>
<li>Built in replication for always-on availability, tolerating complete data center failure</li>
<li>Backups and point in time recovery to protect against data corruption</li>
<li>Fine-grained monitoring to let you know when to scale. Additional instances can be provisioned with the push of a button</li>
<li>Automated patching and one-click upgrades for new major versions of the database, enabling you to take advantage of the latest and greatest MongoDB features</li>
<li>A choice of cloud providers, regions, and billing options</li>
</ul>
<p>Like PencilBlue, MongoDB Atlas is a natural fit for users looking to simplify their development and operations work, letting them focus on what makes their application unique rather than commodity (albeit essential) plumbing.</p>
<h1>Installing PencilBlue and Connecting it to MongoDB Atlas</h1>
<p>Before starting with PencilBlue, you should launch your MongoDB cluster using <a href="https://www.mongodb.com/cloud">MongoDB Atlas</a> and then (optionally) create a user with read and write privileges for just the database that will be used for this project, as shown in Figure 1.</p>
<div id="attachment_4216" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/PencilBlue_user.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4216" src="/wp-content/uploads/2016/09/PencilBlue_user-910x1024.png" alt="Adding a PencilBlue User to MongoDB Atlas" width="480" height="540" class="size-large wp-image-4216" srcset="/wp-content/uploads/2016/09/PencilBlue_user-910x1024.png 910w, /wp-content/uploads/2016/09/PencilBlue_user-267x300.png 267w, /wp-content/uploads/2016/09/PencilBlue_user-768x864.png 768w, /wp-content/uploads/2016/09/PencilBlue_user.png 1596w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4216" class="wp-caption-text">Figure 1: Adding a PencilBlue User to MongoDB Atlas</p></div>
<p>You must also add your IP address to the IP Whitelist in the MongoDB Atlas security tab (Figure 2).</p>
<div id="attachment_4217" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/PencilBlue_whitelist_IP.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4217" src="/wp-content/uploads/2016/09/PencilBlue_whitelist_IP-1024x701.png" alt="Add IP Address to MongoDB Atlas Whitelist" width="480" height="329" class="size-large wp-image-4217" srcset="/wp-content/uploads/2016/09/PencilBlue_whitelist_IP-1024x701.png 1024w, /wp-content/uploads/2016/09/PencilBlue_whitelist_IP-300x205.png 300w, /wp-content/uploads/2016/09/PencilBlue_whitelist_IP-768x526.png 768w, /wp-content/uploads/2016/09/PencilBlue_whitelist_IP.png 1502w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4217" class="wp-caption-text">Figure 2: Add IP Address to MongoDB Atlas Whitelist</p></div>
<p>If it isn&#8217;t already installed on your system, download and install Node.js:</p>
<pre><code>$ curl https://nodejs.org/dist/v4.4.7/node-v4.4.7-linux-x64.tar.xz -o node.tar.xz
$ tar xf node.tar.xz
</code></pre>
<p>You should then add the <code>bin</code> sub-folder to your <code>.bash_profile</code> before installing the PencilBlue command line interface (CLI):</p>
<pre><code>$ sudo npm install -g pencilblue-cli
Password:
npm WARN engine pencilblue-cli@0.3.1: wanted: {"node":"&gt;= 4.4.7"} (current: {"node":"0.12.5","npm":"2.11.2"})
/usr/local/bin/pencilblue -&gt; /usr/local/lib/node_modules/pencilblue-cli/lib/pencilblue-cli.js
/usr/local/bin/pbctrl -&gt; /usr/local/lib/node_modules/pencilblue-cli/lib/pencilblue-cli.js
pencilblue-cli@0.3.1 /usr/local/lib/node_modules/pencilblue-cli
├── process@0.11.8
├── colors@1.1.2
├── q@1.4.1
├── shelljs@0.7.3 (interpret@1.0.1, rechoir@0.6.2, glob@7.0.5)
└── prompt@1.0.0 (revalidator@0.1.8, pkginfo@0.4.0, read@1.0.7, winston@2.1.1, utile@0.3.0)
</code></pre>
<p>The CLI can then be used to install and configure PencilBlue itself:</p>
<pre><code>$ pbctrl install PencilBlue
Site Name:  (My PencilBlue Site) PokeSite
Site Root:  (http://localhost:8080)/ 
Address to bind to:  (0.0.0.0) 
Site Port:  (8080) 
MongoDB URL:  (mongodb://127.0.0.1:27017/) mongodb://pencilblue_user:my_password@cluster0-shard-00-00-qfovx.mongodb.net:27017,cluster0-shard-00-01-qfovx.mongodb.net:27017,cluster0-shard-00-02-qfovx.mongodb.net:27017/?ssl=true&amp;authSource=admin
Database Name:  (pencilblue) clusterdb
Do you want to install Bower components?:  (y/N) 
Cloning PencilBlue from github...
Cloning into 'PencilBlue'...
Installing npm modules...
...
Creating config.js...
Installation completed.
</code></pre>
<p>Note that if you need to change the configuration (e.g., to specify a new URL to connect to MongoDB) then edit the <code>config.js</code> file that was created during this step.</p>
<p>The MongoDB URL you provided contains these components:</p>
<ul>
<li><code>pencilblue_user</code> is the name of the user you created in the MongoDB Atlas UI</li>
<li><code>my_password</code> is the password you chose when creating the user in MongoDB Atlas</li>
<li><code>cluster0-shard-00-00-qfovx.mongodb.net</code>, <code>cluster0-shard-00-01-qfovx.mongodb.net</code>, &amp; <code>cluster0-shard-00-02-qfovx.mongodb.net</code> are the hostnames of the instances in your MongoDB Atlas replica set (click on the &#8220;CONNECT&#8221; button in the MongoDB Atlas UI if you don&#8217;t have these – Figure 3)</li>
<li><code>27017</code> is the standard MongoDB port number</li>
<li>To enforce security, MongoDB Atlas mandates that the <code>ssl</code> option is used</li>
<li><code>admin</code> is the database that&#8217;s being used to store the credentials for <code>pencilblue_user</code></li>
</ul>
<div id="attachment_4218" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/PencilBlue_Find_Connect_String.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4218" src="/wp-content/uploads/2016/09/PencilBlue_Find_Connect_String-1024x414.png" alt="Find the Hostnames From the MongoDB Atlas UI" width="480" height="194" class="size-large wp-image-4218" srcset="/wp-content/uploads/2016/09/PencilBlue_Find_Connect_String-1024x414.png 1024w, /wp-content/uploads/2016/09/PencilBlue_Find_Connect_String-300x121.png 300w, /wp-content/uploads/2016/09/PencilBlue_Find_Connect_String-768x310.png 768w, /wp-content/uploads/2016/09/PencilBlue_Find_Connect_String.png 1520w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4218" class="wp-caption-text">Figure 3: Find the Hostnames From the MongoDB Atlas UI</p></div>
<p><code>clusterdb</code> is the name of the database (schema) that PencilBlue will use (note that unlike some frameworks, the database name is specified separately rather than being embedded in the MongoDB URL).</p>
<p>The PencilBlue process can now be started:</p>
<pre><code>$ cd PencilBlue/
$ pbctrl start
</code></pre>
<h1>Confirm that MongoDB Atlas is Being Used</h1>
<p>At this point, it is possible to connect to MongoDB Atlas using the MongoDB shell (we&#8217;ll look at an easier way to navigate the data later) to confirm that the schema has been created:</p>
<pre><code>$ mongo mongodb://cluster0-shard-00-00-qfovx.mongodb.net:27017,cluster0-shard-00-01-qfovx.mongodb.net:27017,cluster0-shard-00-02-qfovx.mongodb.net:27017/admin?replicaSet=Cluster0-shard-0 --ssl --username billy --password my_password

Cluster0-shard-0:PRIMARY&gt; show dbs
admin      0.000GB
clusterdb  0.008GB
local      0.007GB

Cluster0-shard-0:PRIMARY&gt; use clusterdb
switched to db clusterdb

Cluster0-shard-0:PRIMARY&gt; show collections
article
auth_token
comment
custom_object
custom_object_type
fs.chunks
fs.files
job_log
lock
media
page
password_reset
plugin
plugin_settings
section
server_registry
session
setting
theme_settings
topic
unverified_user
user
</code></pre>
<h1>Create Your First Page in PencilBlue</h1>
<p>Browse to the application at <a href="http://localhost:8080/">http://localhost:8080/</a> as shown in Figure 4 and create a user account.</p>
<div id="attachment_4219" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/PencilBlue_Browser.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4219" src="/wp-content/uploads/2016/09/PencilBlue_Browser-1016x1024.png" alt="Register User in PencilBlue" width="480" height="484" class="size-large wp-image-4219" srcset="/wp-content/uploads/2016/09/PencilBlue_Browser-1016x1024.png 1016w, /wp-content/uploads/2016/09/PencilBlue_Browser-150x150.png 150w, /wp-content/uploads/2016/09/PencilBlue_Browser-298x300.png 298w, /wp-content/uploads/2016/09/PencilBlue_Browser-768x774.png 768w, /wp-content/uploads/2016/09/PencilBlue_Browser-144x144.png 144w, /wp-content/uploads/2016/09/PencilBlue_Browser.png 1750w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4219" class="wp-caption-text">Figure 4: Register User in PencilBlue</p></div>
<p>You&#8217;re then able to login and create your first page (Figure 5).</p>
<div id="attachment_4220" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/PencilBlue_Create_content.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4220" src="/wp-content/uploads/2016/09/PencilBlue_Create_content-1024x973.png" alt="Create a New Page Using PencilBlue" width="480" height="456" class="size-large wp-image-4220" srcset="/wp-content/uploads/2016/09/PencilBlue_Create_content-1024x973.png 1024w, /wp-content/uploads/2016/09/PencilBlue_Create_content-300x285.png 300w, /wp-content/uploads/2016/09/PencilBlue_Create_content-768x730.png 768w, /wp-content/uploads/2016/09/PencilBlue_Create_content.png 1902w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4220" class="wp-caption-text">Figure 5: Create a New Page Using PencilBlue</p></div>
<p>After saving, the new page can be viewed (Figure 6).</p>
<div id="attachment_4221" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/PencilBlue_Page.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4221" src="/wp-content/uploads/2016/09/PencilBlue_Page-776x1024.png" alt="View Pokémon Page in PencilBlue" width="480" height="633" class="size-large wp-image-4221" srcset="/wp-content/uploads/2016/09/PencilBlue_Page-776x1024.png 776w, /wp-content/uploads/2016/09/PencilBlue_Page-227x300.png 227w, /wp-content/uploads/2016/09/PencilBlue_Page-768x1014.png 768w, /wp-content/uploads/2016/09/PencilBlue_Page.png 1620w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4221" class="wp-caption-text">Figure 6: View Pokémon Page in PencilBlue</p></div>
<p>To visually navigate through the PencilBlue schema and data, <a href="https://www.mongodb.com/download-center?jmp=nav#compass">download and install MongoDB Compass</a>. Use your MongoDB Atlas credentials to connect Compass to your MongoDB database – Figure 7.</p>
<div id="attachment_4222" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/PencilBlue_Connect_Compass_to_MongoDB_Atlas.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4222" src="/wp-content/uploads/2016/09/PencilBlue_Connect_Compass_to_MongoDB_Atlas-1024x839.png" alt="Connect MongoDB Compass to MongoDB Atlas" width="480" height="393" class="size-large wp-image-4222" srcset="/wp-content/uploads/2016/09/PencilBlue_Connect_Compass_to_MongoDB_Atlas-1024x839.png 1024w, /wp-content/uploads/2016/09/PencilBlue_Connect_Compass_to_MongoDB_Atlas-300x246.png 300w, /wp-content/uploads/2016/09/PencilBlue_Connect_Compass_to_MongoDB_Atlas-768x629.png 768w, /wp-content/uploads/2016/09/PencilBlue_Connect_Compass_to_MongoDB_Atlas.png 1802w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4222" class="wp-caption-text">Figure 7: Connect MongoDB Compass to MongoDB Atlas</p></div>
<p>Navigate through the structure of the data in the <code>clusterdb</code> database (Figure 8); view the JSON documents (Figure 9) and check the indexes (Figure 10).</p>
<div id="attachment_4223" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/PencilBlue_Compass_Schema.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4223" src="/wp-content/uploads/2016/09/PencilBlue_Compass_Schema-1024x594.png" alt="Explore PencilBlue Schema Using MongoDB Compass" width="480" height="278" class="size-large wp-image-4223" srcset="/wp-content/uploads/2016/09/PencilBlue_Compass_Schema-1024x594.png 1024w, /wp-content/uploads/2016/09/PencilBlue_Compass_Schema-300x174.png 300w, /wp-content/uploads/2016/09/PencilBlue_Compass_Schema-768x445.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4223" class="wp-caption-text">Figure 8: Explore PencilBlue Schema Using MongoDB Compass</p></div>
<div id="attachment_4224" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/PencilBlue_Compass_Document.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4224" src="/wp-content/uploads/2016/09/PencilBlue_Compass_Document-1024x595.png" alt="View PencilBlue Documents in MongoDB Compass" width="480" height="279" class="size-large wp-image-4224" srcset="/wp-content/uploads/2016/09/PencilBlue_Compass_Document-1024x595.png 1024w, /wp-content/uploads/2016/09/PencilBlue_Compass_Document-300x174.png 300w, /wp-content/uploads/2016/09/PencilBlue_Compass_Document-768x446.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4224" class="wp-caption-text">Figure 9: View PencilBlue Documents in MongoDB Compass</p></div>
<div id="attachment_4225" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/PencilBlue_Compass_Indexes.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4225" src="/wp-content/uploads/2016/09/PencilBlue_Compass_Indexes-1024x594.png" alt="View PencilBlue Indexes Using MongoDB Compass" width="480" height="278" class="size-large wp-image-4225" srcset="/wp-content/uploads/2016/09/PencilBlue_Compass_Indexes-1024x594.png 1024w, /wp-content/uploads/2016/09/PencilBlue_Compass_Indexes-300x174.png 300w, /wp-content/uploads/2016/09/PencilBlue_Compass_Indexes-768x446.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4225" class="wp-caption-text">Figure 10: View PencilBlue Indexes Using MongoDB Compass</p></div>
<h1>Next Steps</h1>
<p>While MongoDB Atlas radically simplifies the operation of MongoDB there are still some decisions to take to ensure the best performance and reliability for your application. The <a href="https://www.mongodb.com/collateral/mongodb-atlas-best-practices">MongoDB Atlas Best Practices white paper</a> provides guidance on best practices for deploying, managing, and optimizing the performance of your database with MongoDB Atlas.</p>
<p>The guide outlines considerations for achieving performance at scale with MongoDB Atlas across a number of key dimensions, including instance size selection, application patterns, schema design and indexing, and disk I/O. While this guide is broad in scope, it is not exhaustive. Following the recommendations in the guide will provide a solid foundation for ensuring optimal application performance.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/using-pencilblue-with-mongodb-atlas/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Develop &#038; Deploy a Node.js App to AWS Elastic Beanstalk &#038; MongoDB Atlas</title>
		<link>/mongodb/develop-deploy-a-node-js-app-to-aws-elastic-beanstalk-mongodb-atlas</link>
					<comments>/mongodb/develop-deploy-a-node-js-app-to-aws-elastic-beanstalk-mongodb-atlas#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Thu, 15 Sep 2016 17:07:47 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[AWS]]></category>
		<category><![CDATA[Elastic Beanstalk]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Atlas]]></category>
		<category><![CDATA[node.js]]></category>
		<guid isPermaLink="false">/?p=4201</guid>

					<description><![CDATA[Introduction This blog post demonstrates how to build and deploy an application on AWS Elastic Beanstalk, and have that application connect to MongoDB Atlas as its back-end database service: Introducing the example MongoPop application Connecting applications to your MongoDB Atlas cluster; including IP address whitelisting Downloading and testing MongoPop locally and on AWS Elastic Beanstalk]]></description>
										<content:encoded><![CDATA[<h1>Introduction</h1>
<p>This blog post demonstrates how to build and deploy an application on AWS Elastic Beanstalk, and have that application connect to <a href="https://www.mongodb.com/cloud">MongoDB Atlas</a> as its back-end database service:</p>
<ul>
<li>Introducing the example <em>MongoPop</em> application</li>
<li>Connecting applications to your MongoDB Atlas cluster; including IP address whitelisting</li>
<li>Downloading and testing MongoPop locally and on AWS Elastic Beanstalk</li>
<li>Populating your database with thousands of realistic documents</li>
<li>Explaining key parts of the application code</li>
<li>Adapting and redeploying applications</li>
<li>Graphically exploring your schema and data with MongoDB Compass</li>
</ul>
<p>AWS Elastic Beanstalk is a service offered by Amazon to make it simple for developers to deploy and manage their cloud-based applications. After you&#8217;ve uploaded your application, Elastic Beanstalk automatically takes care of:</p>
<ul>
<li>Capacity provisioning, adding more instances as needed</li>
<li>Load balancing</li>
<li>Health monitoring</li>
</ul>
<p>MongoDB Atlas provides all of the features of the MongoDB database, without the operational heavy lifting. MongoDB Atlas is available on demand through a pay-as-you-go model and billed on an hourly basis, letting you focus on your application code.</p>
<p>It’s easy to get started – use a simple GUI to select the instance size, region, and features you need. MongoDB Atlas provides:</p>
<ul>
<li>Security features to protect access to your data</li>
<li>Built in replication for always-on availability, tolerating complete data center failure</li>
<li>Backups and point in time recovery to protect against data corruption</li>
<li>Fine-grained monitoring to let you know when to scale. Additional instances can be provisioned with the push of a button</li>
<li>Automated patching and one-click upgrades for new major versions of the database, enabling you to take advantage of the latest and greatest MongoDB features</li>
<li>A choice of cloud providers, regions, and billing options</li>
</ul>
<p>There is clearly a lot of synergy between these technologies – both of them handling the enabling infrastructure, letting the developer spend their precious time on writing great applications. To continue in the spirit of developer productivity, the application used in this post is developed using Node.js, the Express web application framework, and the Pug (formerly Jade) template engine.</p>
<h1>The Application &#8211; MongoPop</h1>
<p>Let&#8217;s start by taking a look at what the new Mongopop application provides.</p>
<p>Getting your MongoDB Atlas cluster up and running is a breeze but what do you do with it next? Wouldn&#8217;t it be great to populate it with some realistic data so that you can start experimenting? This is what MongoPop does – even letting you tailor the format and contents of the data using the <a href="http://www.mockaroo.com/">Mockaroo</a> service.</p>
<p>Mockaroo is a flexible service, allowing you to define a rich schema and then generate realistic sample data sets. Supported types include:</p>
<ul>
<li>Email address</li>
<li>City</li>
<li>European first name</li>
<li>JSON array</li>
<li>Branded drug names</li>
<li>Custom types defined by you, based on regular expressions</li>
</ul>
<p>Data files can be downloaded from Mockaroo in multiple formats, including: JSON, CSV, and SQL.</p>
<p>MongoPop pulls data from Mockaroo and then automatically writes the data to your database. It defaults to our example Mockaroo schema but you can replace that with a URL for any schema that you&#8217;ve defined in Mockaroo (or any other service providing arrays of JSON documents). Mockaroo takes care of connecting to MongoDB Atlas and runs multithreaded, speeding up the process of loading large datasets into MongoDB.</p>
<h2>Using MongoPop</h2>
<div id="attachment_4203" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Identify_IP_Address_for_MongoDB_Atlas_whitelisting.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4203" src="/wp-content/uploads/2016/09/Identify_IP_Address_for_MongoDB_Atlas_whitelisting-1024x524.png" alt="Identify IP Address of MongoPop Server for MongoDB Atlas IP Whitelisting" width="480" height="246" class="size-large wp-image-4203" srcset="/wp-content/uploads/2016/09/Identify_IP_Address_for_MongoDB_Atlas_whitelisting-1024x524.png 1024w, /wp-content/uploads/2016/09/Identify_IP_Address_for_MongoDB_Atlas_whitelisting-300x153.png 300w, /wp-content/uploads/2016/09/Identify_IP_Address_for_MongoDB_Atlas_whitelisting-768x393.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4203" class="wp-caption-text">Figure 1: Identify IP Address of MongoPop Server for MongoDB Atlas IP Whitelisting</p></div>
<p>When you first access MongoPop (Figure 1), you&#8217;re presented with a form to provide details on how to connect to your MongoDB Atlas instance, and what you&#8217;d like the data to look like. Before completing the form, take a note of the IP address that&#8217;s displayed. This IP address needs to be added to the whitelist for your group, which is done through the security tab of the <a href="https://www.mongodb.com/cloud">MongoDB Atlas UI</a> (Figure 2).</p>
<div id="attachment_4204" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Add_IP_Address_to_MongoDB_Atlas_whitelist.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4204" src="/wp-content/uploads/2016/09/Add_IP_Address_to_MongoDB_Atlas_whitelist-1024x428.png" alt="Add MongoPop IP Address to MongoDB Atlas Group Whitelist" width="480" height="201" class="size-large wp-image-4204" srcset="/wp-content/uploads/2016/09/Add_IP_Address_to_MongoDB_Atlas_whitelist-1024x428.png 1024w, /wp-content/uploads/2016/09/Add_IP_Address_to_MongoDB_Atlas_whitelist-300x126.png 300w, /wp-content/uploads/2016/09/Add_IP_Address_to_MongoDB_Atlas_whitelist-768x321.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4204" class="wp-caption-text">Figure 2: Add MongoPop IP Address to MongoDB Atlas Group Whitelist</p></div>
<p>In a production Elastic Beanstalk environment, the IP whitelisting can be a little more involved – that will be covered later in this post.</p>
<div id="attachment_4205" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Find_Node_Driver_Connect_String_MongoDB_Atlas.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4205" src="/wp-content/uploads/2016/09/Find_Node_Driver_Connect_String_MongoDB_Atlas-1024x416.png" alt="Find the Node.js Driver Connect String in MongoDB Atlas" width="480" height="195" class="size-large wp-image-4205" srcset="/wp-content/uploads/2016/09/Find_Node_Driver_Connect_String_MongoDB_Atlas-1024x416.png 1024w, /wp-content/uploads/2016/09/Find_Node_Driver_Connect_String_MongoDB_Atlas-300x122.png 300w, /wp-content/uploads/2016/09/Find_Node_Driver_Connect_String_MongoDB_Atlas-768x312.png 768w, /wp-content/uploads/2016/09/Find_Node_Driver_Connect_String_MongoDB_Atlas.png 1380w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4205" class="wp-caption-text">Figure 3: Find the Node.js Driver Connect String in MongoDB Atlas</p></div>
<p>While in the MongoDB Atlas UI, click the &#8220;CONNECT&#8221; button, select the &#8220;MongoDB Drivers&#8221; tab and then the &#8220;COPY&#8221; button (Figure 3). Paste the copied URI directly into MongoPop. You should also enter the password and the database you want to use.</p>
<p>Note that the URI needs editing before it&#8217;s actually used but MongoPop handles that using the password and database name you provide; the final URI will take this form: <code>mongodb://mongodb_user:my_password@cluster0-shard-00-00-qfovx.mongodb.net:27017,cluster0-shard-00-01-qfovx.mongodb.net:27017,cluster0-shard-00-02-qfovx.mongodb.net:27017/mongopop?ssl=true&amp;authSource=admin</code>.</p>
<p>This URI contains these components:</p>
<ul>
<li><code>mongodb_user</code> is the name of the user you gave when creating the group in the MongoDB Atlas UI. Alternatively, create a new user in the MongoDB Atlas UI with more restricted privileges.</li>
<li><code>my_password</code> is the password you chose when creating the user in MongoDB Atlas.</li>
<li><code>cluster0-shard-00-00-qfovx.mongodb.net</code>, <code>cluster0-shard-00-01-qfovx.mongodb.net</code>, &amp; <code>cluster0-shard-00-02-qfovx.mongodb.net</code> are the hostnames of the instances in your MongoDB Atlas replica set.</li>
<li><code>27017</code> is the default MongoDB port number.</li>
<li><code>mongopop</code> is the name of the database (schema) that MongoPop will use.</li>
<li>To enforce over-the-wire encryption, MongoDB Atlas mandates that the <code>ssl</code> option is used.</li>
<li><code>admin</code> is the database that&#8217;s being used to store the credentials for <code>mongodb_user</code>.</li>
</ul>
<p>The remaining fields define the collection to store the documents, the source of the document schema, and the number of documents (in thousands) to be added. The source URL defaults to a document format already defined but you can create your own by registering at the <a href="http://www.mockaroo.com/">Mockaroo</a> site, defining the document structure and then using the URL provided.</p>
<p>After clicking the &#8220;populate&#8221; button, MongoPop fetches the data set(s) from Mockaroo and then adds the documents to your MongoDB Atlas collection. Once the data has been added, the page refreshes and you&#8217;re shown a sample of the documents now stored in your collection (Figure 4).</p>
<div id="attachment_4206" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/MongoDB_Atlas_sample_document.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4206" src="/wp-content/uploads/2016/09/MongoDB_Atlas_sample_document-1024x771.png" alt="Sample of Data Added to MongoDB Atlas Collection" width="480" height="361" class="size-large wp-image-4206" srcset="/wp-content/uploads/2016/09/MongoDB_Atlas_sample_document-1024x771.png 1024w, /wp-content/uploads/2016/09/MongoDB_Atlas_sample_document-300x226.png 300w, /wp-content/uploads/2016/09/MongoDB_Atlas_sample_document-768x578.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4206" class="wp-caption-text">Figure 4: Sample of Data Added to MongoDB Atlas Collection</p></div>
<h3>MongoDB Compass</h3>
<p>Congratulations, you now have some data in your database! An optional step is to start exploring that data using <a href="https://www.mongodb.com/products/compass">MongoDB Compass</a>. The same credentials can be used to connect Compass to your MongoDB database (Figure 5).</p>
<div id="attachment_4207" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4207" src="/wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-1024x839.png" alt="Connect MongoDB Compass to MongoDB Atlas" width="480" height="393" class="size-large wp-image-4207" srcset="/wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-1024x839.png 1024w, /wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-300x246.png 300w, /wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-768x629.png 768w, /wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas.png 1796w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4207" class="wp-caption-text">Figure 5: Connect MongoDB Compass to MongoDB Atlas</p></div>
<p>Once connected, explore the data added to the collection (Figure 6).</p>
<div id="attachment_4208" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Explore_MongoDB_Atlas_data_with_MongoDB_Compass.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4208" src="/wp-content/uploads/2016/09/Explore_MongoDB_Atlas_data_with_MongoDB_Compass-1024x734.png" alt="Explore MongoDB Atlas Data Using MongoDB Compass" width="480" height="344" class="size-large wp-image-4208" srcset="/wp-content/uploads/2016/09/Explore_MongoDB_Atlas_data_with_MongoDB_Compass-1024x734.png 1024w, /wp-content/uploads/2016/09/Explore_MongoDB_Atlas_data_with_MongoDB_Compass-300x215.png 300w, /wp-content/uploads/2016/09/Explore_MongoDB_Atlas_data_with_MongoDB_Compass-768x550.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4208" class="wp-caption-text">Figure 6: Explore MongoDB Atlas Data Using MongoDB Compass</p></div>
<p>In this version (1.3) of MongoDB Compass (currently in <a href="https://www.mongodb.com/download-center?jmp=nav#compass">beta</a>), it is also possible to add, delete, and modify documents (Figure 7).</p>
<div id="attachment_4209" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Modify_MongoDB_Atlas_document_in_MongoDB_Compass.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4209" src="/wp-content/uploads/2016/09/Modify_MongoDB_Atlas_document_in_MongoDB_Compass-1024x340.png" alt="Modify a Document in MongoDB Compass" width="480" height="159" class="size-large wp-image-4209" srcset="/wp-content/uploads/2016/09/Modify_MongoDB_Atlas_document_in_MongoDB_Compass-1024x340.png 1024w, /wp-content/uploads/2016/09/Modify_MongoDB_Atlas_document_in_MongoDB_Compass-300x100.png 300w, /wp-content/uploads/2016/09/Modify_MongoDB_Atlas_document_in_MongoDB_Compass-768x255.png 768w, /wp-content/uploads/2016/09/Modify_MongoDB_Atlas_document_in_MongoDB_Compass.png 2002w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4209" class="wp-caption-text">Figure 7: Modify a Document in MongoDB Compass</p></div>
<p>You can verify that the document has really been updated from the MongoDB shell:</p>
<p><script src="https://gist.github.com/am-MongoDB/fd52e83e27d4db27e84be40c5c6c719d.js"></script></p>
<h2>Downloading the Application</h2>
<p>The tools for deploying your application to AWS Elastic Beanstalk integrate with <code>git</code>, which makes it the best way to get the code. Assuming that <code>git</code> is already installed, downloading the code is simple:</p>
<p><script src="https://gist.github.com/am-MongoDB/f20c38dc8fdbb058eec5c828da33b845.js"></script></p>
<p>If you then want to refresh your local repository with the latest version:</p>
<p><script src="https://gist.github.com/am-MongoDB/79171206054c25534005da997a001ebb.js"></script></p>
<p>Alternatively, simply <a href="https://github.com/andrewjamesmorgan/mongopop/archive/master.zip">download the zip file</a>.</p>
<h2>Testing The Application Locally</h2>
<p>Deploying to Elastic Beanstalk is straightforward but there is a delay each time you update and redeploy your application. For that reason, it&#8217;s still useful to be able to test and debug locally.</p>
<p>After downloading the application, installing its dependencies and then running it is trivial (this assumes that you already have Node.js installed):</p>
<p><script src="https://gist.github.com/am-MongoDB/3aa672bbdc0f0db3ce6655a295251e28.js"></script></p>
<p><code>npm_install</code> installs all of the required dependencies (which are described in <code>package.json</code>). <code>npm start</code> starts the application – once it it running browse to <a href="http://localhost:3000/pop"><code>http://localhost:3000/pop</code></a> to try it out.</p>
<h3>Deploying to AWS Elastic Beanstalk</h3>
<p>You can create your Elastic Beanstalk environment and deploy and monitor your application from the <a href="https://console.aws.amazon.com/elasticbeanstalk">AWS console</a>. If you don&#8217;t already have an account then that&#8217;s where you would create it. If you already have an account, and a copy of your Access Key ID and Secret Access Key, then using the <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3.html">EB CLI</a> provides a more efficient workflow.</p>
<p>The method for installing the EB CLI <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3-install.html">varies by platform</a> but if you already have Homebrew installed on OS X then it&#8217;s as simple as:</p>
<p><script src="https://gist.github.com/am-MongoDB/dad9ee324bd60683dc24d1c0b909c565.js"></script></p>
<p><code>eb init</code> sets default values for Elastic Beanstalk applications created with the EB CLI by prompting you with a series of questions:</p>
<p><script src="https://gist.github.com/am-MongoDB/bb7a6f5986844ee3a4d65eb3db534b66.js"></script></p>
<p><code>eb create</code> creates a new environment and deploys the current application to that environment:</p>
<p><script src="https://gist.github.com/am-MongoDB/700457d947aba7a81751bd4c62c6172d.js"></script></p>
<p>Finally, <code>eb open</code> connects to the MongoPop app from your browser.</p>
<p>If you want to make changes to the application then the EB CLI makes it simple to redeploy the new version. As an example, edit the <code>views/pop.jade</code> file to add an extra paragraph after the title:</p>
<p><script src="https://gist.github.com/am-MongoDB/48ddde4054dde848b02924ba2d7ecb0b.js"></script></p>
<p>The EB CLI integrates with <code>git</code> and so update <code>git</code> with the change and then redeploy:</p>
<p><script src="https://gist.github.com/am-MongoDB/48c861d261f4d91a354485b06fc68776.js"></script></p>
<div id="attachment_4210" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Personalised_AWS_Elasticbeanstalk_App.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4210" src="/wp-content/uploads/2016/09/Personalised_AWS_Elasticbeanstalk_App-1024x241.png" alt="Personalized Version of MongoPop Deployed to AWS EBS" width="480" height="113" class="size-large wp-image-4210" srcset="/wp-content/uploads/2016/09/Personalised_AWS_Elasticbeanstalk_App-1024x241.png 1024w, /wp-content/uploads/2016/09/Personalised_AWS_Elasticbeanstalk_App-300x71.png 300w, /wp-content/uploads/2016/09/Personalised_AWS_Elasticbeanstalk_App-768x181.png 768w, /wp-content/uploads/2016/09/Personalised_AWS_Elasticbeanstalk_App.png 1952w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4210" class="wp-caption-text">Figure 8: Personalized Version of MongoPop Deployed to AWS EBS</p></div>
<p>When you&#8217;re finished with the application, the environment can be deleted with a single command:</p>
<p><script src="https://gist.github.com/am-MongoDB/7771e7c498d3b085b5784d32ecd07ea3.js"></script></p>
<p>Note that this doesn&#8217;t remove the application deployment files that Elastic Beanstalk keeps in AWS S3 storage. To avoid continuing charges, delete those files through the <a href="https://console.aws.amazon.com/s3">AWS console</a> (Figure 9).</p>
<div id="attachment_4211" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Remove_Files_from_AWS_S3_Storage.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4211" src="/wp-content/uploads/2016/09/Remove_Files_from_AWS_S3_Storage-1024x734.png" alt="Remove Deployment Files From AWS S3 Storage" width="480" height="344" class="size-large wp-image-4211" srcset="/wp-content/uploads/2016/09/Remove_Files_from_AWS_S3_Storage-1024x734.png 1024w, /wp-content/uploads/2016/09/Remove_Files_from_AWS_S3_Storage-300x215.png 300w, /wp-content/uploads/2016/09/Remove_Files_from_AWS_S3_Storage-768x551.png 768w, /wp-content/uploads/2016/09/Remove_Files_from_AWS_S3_Storage.png 1436w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4211" class="wp-caption-text">Figure 9: Remove Deployment Files From AWS S3 Storage</p></div>
<h1>Code Highlights</h1>
<p>The full code for MongoPop can be found in <a href="https://github.com/andrewjamesmorgan/mongopop">GitHub</a> but this section presents some snippets that are specific to MongoDB and MongoDB Atlas.</p>
<p>Firstly, constructing the final URI to access the database (from <code>views/pop.js</code>):</p>
<p><script src="https://gist.github.com/am-MongoDB/7fbd00a28851dd32f97b644f0460319c.js"></script></p>
<p>Connecting to the database and working with the collection (<code>javascripts/db.js</code>):</p>
<p><script src="https://gist.github.com/am-MongoDB/3bbc2e113c31bb9802a3b073712efec8.js"></script></p>
<p>All of the dependencies (including the MongoDB Node.js driver) are defined in <code>package.json</code>:</p>
<p><script src="https://gist.github.com/am-MongoDB/38887db8319434ec1928288a4cf39146.js"></script></p>
<h1>The IP Address Whitelisting Challenge</h1>
<p>IP address whitelisting is a key MongoDB Atlas security feature, adding an extra layer to prevent 3rd parties from accessing your data. Clients are prevented from accessing the database unless their IP address has been added to the <a href="https://docs.atlas.mongodb.com/setup-cluster-security/#add-ip-addresses-to-the-whitelist">IP whitelist</a> for your MongoDB Atlas group.</p>
<p>VPC Peering for MongoDB Atlas is under development and will be available soon, offering a simple, robust solution. It will allow the whitelisting of an entire AWS Security Group within the VPC containing your application servers.</p>
<p>If you need to deploy a robust, scalable application before VPC peering becomes available, some extra steps may be required.</p>
<p>In our example application, the public IP address of the AWS EC2 instance running MongoPop was added to the MongoDB Atlas whitelist for the group.</p>
<p>That works fine but what happens if that EC2 instance fails and is rescheduled – its IP Address changes and so it would not be able to connect to MongoDB Atlas until it was whitelisted. That scenario can be remedied by assigning an Elastic IP address (which survives rescheduling) to the EC2 instance using the <a href="https://console.aws.amazon.com/ec2">AWS Console</a>.</p>
<p>What if demand for your application grows and Elastic Beanstalk determines that it needs to add an extra EC2 instance? Again, that instance will have an IP Address that hasn&#8217;t yet been added to the MongoDB Atlas whitelist. To cover that scenario (as well as rescheduling), the AWS NAT Gateway service can be used. Figure 10 illustrates a configuration using a NAT Gateway.<br />
<div id="attachment_4212" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/NAT_Gateway_with_AWS_Elastic_Beanstalk.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4212" src="/wp-content/uploads/2016/09/NAT_Gateway_with_AWS_Elastic_Beanstalk-1024x618.png" alt="Presenting a Single IP Address Using an AWS NAT Gateway" width="480" height="290" class="size-large wp-image-4212" srcset="/wp-content/uploads/2016/09/NAT_Gateway_with_AWS_Elastic_Beanstalk-1024x618.png 1024w, /wp-content/uploads/2016/09/NAT_Gateway_with_AWS_Elastic_Beanstalk-300x181.png 300w, /wp-content/uploads/2016/09/NAT_Gateway_with_AWS_Elastic_Beanstalk-768x463.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4212" class="wp-caption-text">Figure 10: Presenting a Single IP Address Using an AWS NAT Gateway</p></div></p>
<p>Two subnets are created within the AWS Virtual Private Cloud (VPC):</p>
<ul>
<li>The <strong>public subnet</strong> contains the front-end servers which external clients access via an Elastic IP Address attached to the Internet Gateway (IGW). It also contains the NAT Gateway service.</li>
<li>The <strong>private subnet</strong> contains the back-end servers which will access MongoDB Atlas.</li>
</ul>
<p>Routing tables must be created to route all messages from the private subnet destined for public IP addresses through the NAT Gateway. The NAT Gateway has its own Elastic IP Address which all of the outgoing messages that pass through it appear to originate from – this IP Address must be added to the MongoDB Atlas whitelist.</p>
<p>Messages between the front-end and back-end servers use local IP Addresses and so are routed directly, without passing through the NAT Gateway. Messages from external clients are routed from the IGW to the front-end servers.</p>
<p>Clearly this configuration adds cost and complexity (e.g., the application needs breaking into front and back-end components).</p>
<p>An alternative is to add extra logic to your application so that it automatically adds its IP address to the whitelist using the <a href="https://docs.atlas.mongodb.com/api/">MongoDB Atlas Public API</a>. If taking that approach, then also consider how to remove redundant IP addresses as the whitelist is limited to 20 entries.</p>
<h1>What Next?</h1>
<p>While MongoDB Atlas radically simplifies the operation of MongoDB there are still some decisions to take to ensure the best performance and reliability for your application. The <a href="https://www.mongodb.com/collateral/mongodb-atlas-best-practices">MongoDB Atlas Best Practices white paper</a> provides guidance on best practices for deploying, managing, and optimizing the performance of your database with MongoDB Atlas.</p>
<p>The guide outlines considerations for achieving performance at scale with MongoDB Atlas across a number of key dimensions, including instance size selection, application patterns, schema design and indexing, and disk I/O. While this guide is broad in scope, it is not exhaustive. Following the recommendations in the guide will provide a solid foundation for ensuring optimal application performance.</p>
<p>Learn more about the capabilities of MongoDB Atlas and try it out for yourself <a href="https://www.mongodb.com/cloud">here</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/develop-deploy-a-node-js-app-to-aws-elastic-beanstalk-mongodb-atlas/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MongoDB Atlas as The Data Store for Apostrophe</title>
		<link>/mongodb/atlas_apostrophe</link>
					<comments>/mongodb/atlas_apostrophe#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Thu, 15 Sep 2016 16:45:04 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[apostrophe]]></category>
		<category><![CDATA[Express]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Atlas]]></category>
		<category><![CDATA[node.js]]></category>
		<guid isPermaLink="false">/?p=4190</guid>

					<description><![CDATA[Apostrophe is a Content Management Systems that&#8217;s designed to build content-driven web sites. Because of their ease of use, Apostrophe is built upon MongoDB and Node.js. This post explains why MongoDB Atlas is an ideal choice for Apostrophe and then goes on to show how to configure Apostrophe to use it. Why MongoDB Atlas is]]></description>
										<content:encoded><![CDATA[<p>Apostrophe is a Content Management Systems that&#8217;s designed to build content-driven web sites. Because of their ease of use, Apostrophe is built upon MongoDB and Node.js.</p>
<p>This post explains why MongoDB Atlas is an ideal choice for Apostrophe and then goes on to show how to configure Apostrophe to use it.</p>
<h4>Why MongoDB Atlas is the Ideal Database for Apostrophe</h4>
<p>MongoDB delivers flexible schemas, rich queries, an idiomatic Node.js driver, and simple to use high availability and scaling. This makes it the go-to database for anyone looking to build applications on Node.js.</p>
<p><a href="https://www.mongodb.com/cloud">MongoDB Atlas</a> provides all of the features of MongoDB, without the operational heavy lifting required for any new application. MongoDB Atlas is available on demand through a pay-as-you-go model and billed on an hourly basis, letting you focus on what you do best.</p>
<p>It’s easy to get started – use a simple GUI to select the instance size, region, and features you need. MongoDB Atlas provides:</p>
<ul>
<li>Security features to protect access to your data</li>
<li>Built in replication for always-on availability, tolerating complete data center failure</li>
<li>Backups and point in time recovery to protect against data corruption</li>
<li>Fine-grained monitoring to let you know when to scale. Additional instances can be provisioned with the push of a button</li>
<li>Automated patching and one-click upgrades for new major versions of the database, enabling you to take advantage of the latest and greatest MongoDB features</li>
<li>A choice of cloud providers, regions, and billing options</li>
</ul>
<p>Like Apostrophe, MongoDB Atlas is a natural fit for users looking to simplify their development and operations work, letting them focus on what makes their application unique rather than commodity (albeit essential) plumbing.</p>
<h4>Installing Apostrophe and Setting it up to Use MongoDB Atlas</h4>
<p>Before starting with Apostrophe, you should launch your MongoDB cluster using <a href="https://www.mongodb.com/cloud">MongoDB Atlas</a> and then (optionally) create a user with read and write privileges for just the database that will be used for this project, as shown in Figure 1. You must also add the IP address of your application server to the IP Whitelist in the MongoDB Atlas security tab.</p>
<div id="attachment_4192" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Apostrophe_Create_DB_user.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4192" class="size-large wp-image-4192" src="/wp-content/uploads/2016/09/Apostrophe_Create_DB_user-983x1024.png" alt="Creating an Apostrophe user in MongoDB Atlas" width="480" height="500" srcset="/wp-content/uploads/2016/09/Apostrophe_Create_DB_user-983x1024.png 983w, /wp-content/uploads/2016/09/Apostrophe_Create_DB_user-288x300.png 288w, /wp-content/uploads/2016/09/Apostrophe_Create_DB_user-768x800.png 768w, /wp-content/uploads/2016/09/Apostrophe_Create_DB_user.png 1672w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4192" class="wp-caption-text">Figure 1:Creating an Apostrophe user in MongoDB Atlas</p></div>
<p>If it isn&#8217;t already installed on your system, download and install Node.js:</p>
<p><script src="https://gist.github.com/am-MongoDB/3bbb946bb35fd8054e95adf92b96f103.js"></script></p>
<p>You should then add the <code>bin</code> sub-folder to your <code>.bash_profile</code> file and then install ImageMagick (used by Apostrophe to handle image files); clone the Apostrophe Sandbox project; and then install its dependencies:</p>
<p><script src="https://gist.github.com/am-MongoDB/676b16c5fdeaa650a448378c1a0bbdac.js"></script></p>
<p>Before starting Apostrophe you need to configure it with details on how to connect to your specific MongoDB Atlas cluster. This is done by cloning the configuration file to <code>data/local.js</code>:</p>
<p><script src="https://gist.github.com/am-MongoDB/14d6019b0333b351685f3b077a93864d.js"></script></p>
<p>You should then edit the <code>data/local.js</code> file and set the <code>uri</code> parameter using the specific connection information provided for your MongoDB Atlas group:</p>
<p><script src="https://gist.github.com/am-MongoDB/2fdcb8c954ac831e8970543afbf5a1e4.js"></script></p>
<p>The URI contains these components:</p>
<ul>
<li><code>apostrophe_user</code> is the name of the user you created in the MongoDB Atlas UI</li>
<li><code>my_password</code> is the password you chose when creating the user in MongoDB Atlas</li>
<li><code>cluster0-shard-00-00-qfovx.mongodb.net</code>, <code>cluster0-shard-00-01-qfovx.mongodb.net</code>, &amp; <code>cluster0-shard-00-02-qfovx.mongodb.net</code> are the hostnames of the instances in your MongoDB Atlas replica set (click on the &#8220;CONNECT&#8221; button in the MongoDB Atlas UI if you don&#8217;t have these)</li>
<li><code>27017</code> is the standard MongoDB port number</li>
<li><code>clusterdb</code> is the name of the database (schema) that Apostrophe will use (note that this must match the project name used when installing Apostrophe as well as the database you granted the user access to</li>
<li>To enforce security, MongoDB Atlas mandates that the <code>ssl</code> option is used</li>
<li><code>admin</code> is the database that&#8217;s being used to store the credentials for <code>apostrophe_user</code></li>
</ul>
<p>Clients connect to Apostrophe through port 3000 and so you must open that port in your firewall.</p>
<p>You can then create the database and start Apostrophe:</p>
<p><script src="https://gist.github.com/am-MongoDB/000e19868892d5865a90a0e339286609.js"></script></p>
<h2>Testing the Application</h2>
<p>Browse to the application at <code>http://address-of-app-server:3000/</code> as shown in Figure 2 and then login using the username <code>admin</code> and the password <code>demo</code>.</p>
<div id="attachment_4194" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Apostrophe.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4194" src="/wp-content/uploads/2016/09/Apostrophe-1024x498.png" alt="Apostrophe Running on MongoDB Atlas" width="480" height="233" class="size-large wp-image-4194" srcset="/wp-content/uploads/2016/09/Apostrophe-1024x498.png 1024w, /wp-content/uploads/2016/09/Apostrophe-300x146.png 300w, /wp-content/uploads/2016/09/Apostrophe-768x373.png 768w, /wp-content/uploads/2016/09/Apostrophe.png 1138w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4194" class="wp-caption-text">Figure 2: Apostrophe Running on MongoDB Atlas</p></div>
<p>Now, go ahead and add some content (Figure 3).</p>
<div id="attachment_4195" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/create_Apostrophe_post_on_MongoDB_Atlas.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4195" src="/wp-content/uploads/2016/09/create_Apostrophe_post_on_MongoDB_Atlas-1024x668.png" alt="Edit Apostrophe Home Page with Data Stored in MongoDB Atlas" width="480" height="313" class="size-large wp-image-4195" srcset="/wp-content/uploads/2016/09/create_Apostrophe_post_on_MongoDB_Atlas-1024x668.png 1024w, /wp-content/uploads/2016/09/create_Apostrophe_post_on_MongoDB_Atlas-300x196.png 300w, /wp-content/uploads/2016/09/create_Apostrophe_post_on_MongoDB_Atlas-768x501.png 768w, /wp-content/uploads/2016/09/create_Apostrophe_post_on_MongoDB_Atlas.png 1136w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4195" class="wp-caption-text">Figure 3: Edit Apostrophe Home Page with Data Stored in MongoDB Atlas</p></div>
<p>Upload some images as shown in Figure 4.</p>
<div id="attachment_4196" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Apostrophe_add_images.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4196" src="/wp-content/uploads/2016/09/Apostrophe_add_images-1024x673.png" alt="Upload Images to Apostrophe on MongoDB Atlas" width="480" height="315" class="size-large wp-image-4196" srcset="/wp-content/uploads/2016/09/Apostrophe_add_images-1024x673.png 1024w, /wp-content/uploads/2016/09/Apostrophe_add_images-300x197.png 300w, /wp-content/uploads/2016/09/Apostrophe_add_images-768x505.png 768w, /wp-content/uploads/2016/09/Apostrophe_add_images.png 1142w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4196" class="wp-caption-text">Figure 4: Upload Images to Apostrophe on MongoDB Atlas</p></div>
<p>Optionally, to confirm that, MongoDB Atlas really is being used by Apostrophe, you can connect using the MongoDB shell:</p>
<p><script src="https://gist.github.com/am-MongoDB/6c3f3ff8df99ee12e1b963f6851f9441.js"></script></p>
<p>To visually navigate through the schema and data created by Apostrophe, <a href="https://www.mongodb.com/download-center?jmp=nav#compass">download and install MongoDB Compass</a>. Use your MongoDB Atlas credentials to connect Compass to your MongoDB database – Figure 5.</p>
<div id="attachment_4197" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Connect_Compass_to_MongoDB_Atlas.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4197" src="/wp-content/uploads/2016/09/Connect_Compass_to_MongoDB_Atlas-1024x839.png" alt="Connect MongoDB Compass to MongoDB Atlas" width="480" height="393" class="size-large wp-image-4197" srcset="/wp-content/uploads/2016/09/Connect_Compass_to_MongoDB_Atlas-1024x839.png 1024w, /wp-content/uploads/2016/09/Connect_Compass_to_MongoDB_Atlas-300x246.png 300w, /wp-content/uploads/2016/09/Connect_Compass_to_MongoDB_Atlas-768x629.png 768w, /wp-content/uploads/2016/09/Connect_Compass_to_MongoDB_Atlas.png 1802w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4197" class="wp-caption-text">Figure 5: Connect MongoDB Compass to MongoDB Atlas</p></div>
<p>Navigate through the structure of the data in the <code>clusterdb</code> database (Figure 6) and view the JSON documents (Figure 7).</p>
<div id="attachment_4198" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Compass_Apostrophe_Schema.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4198" src="/wp-content/uploads/2016/09/Compass_Apostrophe_Schema-1024x631.png" alt="Explore Apostrophe Schema Using MongoDB Compass" width="480" height="296" class="size-large wp-image-4198" srcset="/wp-content/uploads/2016/09/Compass_Apostrophe_Schema-1024x631.png 1024w, /wp-content/uploads/2016/09/Compass_Apostrophe_Schema-300x185.png 300w, /wp-content/uploads/2016/09/Compass_Apostrophe_Schema-768x473.png 768w, /wp-content/uploads/2016/09/Compass_Apostrophe_Schema.png 1282w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4198" class="wp-caption-text">Figure 6: Explore Apostrophe Schema Using MongoDB Compass</p></div>
<div id="attachment_4199" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Compass_Apostrophe_Data.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4199" src="/wp-content/uploads/2016/09/Compass_Apostrophe_Data-1024x630.png" alt="View Apostrophe Documents in MongoDB Compass" width="480" height="295" class="size-large wp-image-4199" srcset="/wp-content/uploads/2016/09/Compass_Apostrophe_Data-1024x630.png 1024w, /wp-content/uploads/2016/09/Compass_Apostrophe_Data-300x185.png 300w, /wp-content/uploads/2016/09/Compass_Apostrophe_Data-768x473.png 768w, /wp-content/uploads/2016/09/Compass_Apostrophe_Data.png 1279w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4199" class="wp-caption-text">Figure 7: View Apostrophe Documents in MongoDB Compass</p></div>
<h4>What Next?</h4>
<p>While MongoDB Atlas radically simplifies the operation of MongoDB there are still some decisions to take to ensure the best performance and reliability for your application. The <a href="https://www.mongodb.com/collateral/mongodb-atlas-best-practices">MongoDB Atlas Best Practices white paper</a> provides guidance on best practices for deploying, managing, and optimizing the performance of your database with MongoDB Atlas.</p>
<p>The guide outlines considerations for achieving performance at scale with MongoDB Atlas across a number of key dimensions, including instance size selection, application patterns, schema design and indexing, and disk I/O. While this guide is broad in scope, it is not exhaustive. Following the recommendations in the guide will provide a solid foundation for ensuring optimal application performance.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/atlas_apostrophe/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
