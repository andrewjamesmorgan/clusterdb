<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Performance &#8211; Andrew Morgan on Databases</title>
	<atom:link href="/tag/performance/feed" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Database technologies - especially around scalability and High Availability</description>
	<lastBuildDate>Tue, 12 May 2015 13:03:09 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>MySQL Cluster 7.4 is GA!</title>
		<link>/mysql-cluster/mysql-cluster-7-4-is-ga-200-million-qps-and-active-active-geor</link>
					<comments>/mysql-cluster/mysql-cluster-7-4-is-ga-200-million-qps-and-active-active-geor#comments</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Thu, 26 Feb 2015 16:00:47 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[7.4]]></category>
		<category><![CDATA[GA]]></category>
		<category><![CDATA[Geographic Replication]]></category>
		<category><![CDATA[Multi-Master Replication]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster 7.4]]></category>
		<category><![CDATA[NoSQL]]></category>
		<category><![CDATA[Performance]]></category>
		<category><![CDATA[Replication]]></category>
		<category><![CDATA[sql]]></category>
		<guid isPermaLink="false">/?p=4005</guid>

					<description><![CDATA[The General Availability of MySQL Cluster 7.4 has just been announced by Oracle. The MySQL team at Oracle are excited to announce the General Availability of MySQL Cluster 7.4, ready for production workloads. MySQL Cluster 7.4.4 can be downloaded from mysql.com and the release notes viewed in the MySQL docs. Figure 1 provides a summary of the]]></description>
										<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2015/02/MySQL-Cluster-7.4-GA-banner.jpg"><img decoding="async" class="aligncenter size-full wp-image-4021" src="/wp-content/uploads/2015/02/MySQL-Cluster-7.4-GA-banner.jpg" alt="MySQL Cluster 7.4 GA banner" width="600" srcset="/wp-content/uploads/2015/02/MySQL-Cluster-7.4-GA-banner.jpg 960w, /wp-content/uploads/2015/02/MySQL-Cluster-7.4-GA-banner-300x103.jpg 300w, /wp-content/uploads/2015/02/MySQL-Cluster-7.4-GA-banner-900x309.jpg 900w" sizes="(max-width: 960px) 100vw, 960px" /></a></p>
<p>The<b> General Availability of MySQL Cluster 7.4</b> has just been <a href="http://www.oracle.com/us/corporate/press/2431648" title="Oracle announces General Availability of MySQL Cluster 7.4 with 200 Million QPS" target="_blank">announced by Oracle</a>.</p>
<p>The MySQL team at Oracle are excited to announce the General Availability of MySQL Cluster 7.4, ready for production workloads.</p>
<p>MySQL Cluster 7.4.4 can be <a title="Download MySQL Cluster 7.4.4 - the GA release" href="http://dev.mysql.com/downloads/cluster/" target="_blank">downloaded from mysql.com</a> and the <a title="Changes in MySQL Cluster NDB 7.4.4 (5.6.22-ndb-7.4.4)" href="http://dev.mysql.com/doc/relnotes/mysql-cluster/7.4/en/mysql-cluster-news-5-6-22-ndb-7-4-4.html" target="_blank">release notes viewed in the MySQL docs</a>.</p>
<p>Figure 1 provides a summary of the enhancements delivered in this release:</p>
<ul>
<li>Performance
<ul>
<li>200M NoSQL Reads/Sec</li>
<li>2.5M SQL Ops/Sec</li>
<li>50% Faster Reads</li>
<li>40% Faster Mixed</li>
</ul>
</li>
<li>Active-Active
<ul>
<li>Active-Active Geographic Redundancy</li>
<li>Conflict Detection/Resolution</li>
</ul>
</li>
<li>Management
<ul>
<li>5X Faster Maintenance Ops</li>
<li>Detailed Reporting</li>
</ul>
</li>
</ul>
<div id="attachment_4007" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2015/02/MySQL-Cluster-7.4-summary.png"><img fetchpriority="high" decoding="async" aria-describedby="caption-attachment-4007" class="wp-image-4007 size-large" src="/wp-content/uploads/2015/02/MySQL-Cluster-7.4-summary-1024x395.png" alt="MySQL Cluster 7.4 content summary" width="480" height="185" srcset="/wp-content/uploads/2015/02/MySQL-Cluster-7.4-summary-1024x395.png 1024w, /wp-content/uploads/2015/02/MySQL-Cluster-7.4-summary-300x116.png 300w, /wp-content/uploads/2015/02/MySQL-Cluster-7.4-summary-900x347.png 900w, /wp-content/uploads/2015/02/MySQL-Cluster-7.4-summary.png 1405w" sizes="(max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4007" class="wp-caption-text">Figure 1: MySQL Cluster 7.4 content summary</p></div>
<p>The sections that follow delve into some more details.</p>
<h3>Performance</h3>
<div id="attachment_3952" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23.png"><img decoding="async" aria-describedby="caption-attachment-3952" class="wp-image-3952 size-medium" src="/wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23-300x197.png" alt="MySQL CLuster 7.4.1 Read-Write Performance" width="300" height="197" srcset="/wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23-300x197.png 300w, /wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23.png 864w" sizes="(max-width: 300px) 100vw, 300px" /></a><p id="caption-attachment-3952" class="wp-caption-text">Figure 2: Read/Writes 40% Faster than MySQL Cluster 7.3</p></div>
<div id="attachment_3951" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15.png"><img decoding="async" aria-describedby="caption-attachment-3951" class="wp-image-3951 size-medium" src="/wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15-300x199.png" alt="MySQL CLuster 7.4 Read Performance" width="300" height="199" srcset="/wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15-300x199.png 300w, /wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15.png 842w" sizes="(max-width: 300px) 100vw, 300px" /></a><p id="caption-attachment-3951" class="wp-caption-text">Figure 3: Reads 50% Faster than MySQL Cluster 7.3</p></div>
<h4>50% Faster Reads than MySQL Cluster 7.3</h4>
<p>Being a scaled-out, in-memory, real-time database, MySQL Cluster performance has always been great but we continue to work on making it faster each release. In particular, we want to keep pace with the trend of having more and more cores rather than faster ones. 7.4 continues along the path of better exploiting multiple cores &#8211; as can be seen from these benchmark results:</p>
<ul>
<li>Figure 3 shows that for reads, MySQL Cluster 7.4 is 50% faster than last release</li>
<li>Figure 2 shows that for mixed traffic, MySQL Cluster 7.4 is 50% faster than last release</li>
</ul>
<p>Just make sure that you&#8217;re using the multi-threaded data node (ndbmtd rather than ndbd) and have <a title="MySQL Cluster - configuring multi-threaded datanodes" href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-programs-ndbmtd.html" target="_blank">configured how many threads it should use</a>.</p>
<p>The tests were performed using a 48 core/96 thread machine (also demonstrating how well MySQL Cluster can now scale up with large numbers of cores).</p>
<p>So, the sysbench benchmark results show how much faster MySQL Cluster 7.4 is compared to the previous 2 releases (a nice apples-to-apples test but on a very small cluster without any scale-out) but we now have some even more interesting <a title="MySQL Cluster Benchmark Results" href="http://www.mysql.com/why-mysql/benchmarks/mysql-cluster/" target="_blank">benchmark results</a> showing just how well MySQL Cluster can scale out to deliver incredible results&#8230;</p>
<h4>200 Million NoSQL NoSQL QPS!</h4>
<div id="attachment_4015" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2015/02/200-Million-NoSQL-QPS.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4015" class="size-medium wp-image-4015" src="/wp-content/uploads/2015/02/200-Million-NoSQL-QPS-300x179.png" alt="200 Million NoSQL Queries Per Second with MySQL Cluster 7.4" width="300" height="179" srcset="/wp-content/uploads/2015/02/200-Million-NoSQL-QPS-300x179.png 300w, /wp-content/uploads/2015/02/200-Million-NoSQL-QPS-1024x612.png 1024w, /wp-content/uploads/2015/02/200-Million-NoSQL-QPS-900x538.png 900w, /wp-content/uploads/2015/02/200-Million-NoSQL-QPS.png 1157w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><p id="caption-attachment-4015" class="wp-caption-text">Figure 4: 200 Million NoSQL Queries Per Second</p></div>
<p>Using the <a title="Download MySQL Bechmark tools" href="http://dev.mysql.com/downloads/benchmarks.html%20" target="_blank">flexAsynch benchmark tool</a> and a pool of 32 data nodes (with each data node running on a dedicated 56 thread Intel E5-2697 v3 (Haswell) machine) the cluster was able to process 200,000,000 reads per second. These results are shown in Figure 4, where the number of data nodes are scaled on the x-axis &#8211; as you&#8217;ll observe, performance scales virtually linearly with the number of data nodes. Note that MySQL Cluster supports up to 48 data nodes and so there&#8217;s still plenty of scope to scale out even further.</p>
<h4>2.5 Million SQL Operation per Second</h4>
<div id="attachment_4017" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2015/02/2.5-Million-SQL-operations-per-second.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4017" class="size-medium wp-image-4017" src="/wp-content/uploads/2015/02/2.5-Million-SQL-operations-per-second-300x175.png" alt="2.5 Million SQL operations per second with MySQL Cluster" width="300" height="175" srcset="/wp-content/uploads/2015/02/2.5-Million-SQL-operations-per-second-300x175.png 300w, /wp-content/uploads/2015/02/2.5-Million-SQL-operations-per-second-1024x598.png 1024w, /wp-content/uploads/2015/02/2.5-Million-SQL-operations-per-second-900x526.png 900w, /wp-content/uploads/2015/02/2.5-Million-SQL-operations-per-second.png 1164w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><p id="caption-attachment-4017" class="wp-caption-text">Figure 5: 2.5 Million SQL operations per second</p></div>
<p>Using a smaller cluster (just 16 data nodes running on the same 56 thread machines), the DBT2 Benchmark has been used to assess how well SQL performance scales as more data nodes are added. SQL performance was measured at 2,500,000 SQL read opeations per minute. This equates to around 5 Million Transactions Per Minutes or 2.2 Million NewOnly TPM.</p>
<p>As can be in Figure 5 the scaling of SQL reads is again almost linear.</p>
<h3>Active-Active (Multi-Master) Replication</h3>
<p>MySQL Cluster allows bi-directional replication between two (or more) clusters. Replication within each cluster is synchronous but between clusters it is asynchronous which means the following scenario is possible:</p>
<table border="1" summary="Active-Active asynchronous replication can lead to inconsistencies between databases" width="260" align="center">
<caption align="center">Conflict with asynchronous replication</caption>
<tbody>
<tr>
<th scope="col" align="center" width="80">Site A</th>
<th scope="col" align="center" width="100">Replication</th>
<th scope="col" align="center" width="80">Site B</th>
</tr>
<tr>
<td align="center">x == 10</td>
<td></td>
<td align="center">x == 10</td>
</tr>
<tr>
<td align="center">x = 11</td>
<td></td>
<td align="center">x = 20</td>
</tr>
<tr>
<td></td>
<td align="center">&#8212; x=11 &#8211;&gt;</td>
<td align="center">x == 11</td>
</tr>
<tr>
<td align="center">x==20</td>
<td align="center">&lt;&#8211; x=20 &#8212;</td>
<td></td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>In this example a value (column for a row in a table) is set to 11 on site A and the change is queued for replication to site B. In the mean time, an application sets the value to 20 on site B and that change is queued for replication to site A. Once both sites have received and applied the replicated change from the other cluster site A contains the value 20 while site B contains 11 &#8211; in other words the databases are now inconsistent.</p>
<h4>How MySQL Cluster implements eventual consistency</h4>
<p>There are two phases to establishing consistency between both clusters after an inconsistency has been introduced:</p>
<ol>
<li>Detect that a conflict has happened</li>
<li>Resolve the inconsistency</li>
</ol>
<p>The following animation illustrates how MySQL Cluster 7.2 detects that an inconsistency has been introduced by the asynchronous, active-active replication:</p>
<div id="attachment_2149" style="width: 610px" class="wp-caption alignnone"><a href="/wp-content/uploads/2011/11/ReflectingGCI1.gif"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-2149" class="size-full wp-image-2149" title="ReflectingGCI" src="/wp-content/uploads/2011/11/ReflectingGCI1.gif" alt="" width="600" height="463" /></a><p id="caption-attachment-2149" class="wp-caption-text">Figure 6: Detecting conflicts</p></div>
<p>While we typically consider the 2 clusters in an active-active replication configuration to be peers, in this case we designate one to be the primary and the other the secondary. Reads and writes can still be sent to either cluster but it is the responsibility of the primary to identify that a conflict has arisen and then remove the inconsistency.</p>
<p>A logical clock is used to identify (in relative terms) when a change is made on the primary &#8211; for those who know something of the MySQL Cluster internals, we use the index of the Global Checkpoint that the update is contained in. For all tables that have this feature turned on, an extra, hidden column is automatically added on the primary &#8211; this represents the value of the logical clock when the change was made.</p>
<p>Once the change has been applied on the primary, there is a &#8220;window of conflict&#8221; for the effected row(s) during which if a different change is made to the same row(s) on the secondary then there will be an inconsistency. Once the slave on the secondary has applied the change from the primary, it will send a replication event back to the slave on the primary, containing the primary&#8217;s clock value associated with the changes that have just been applied on the secondary. (Remember that the clock is actually the Global Checkpoint Index and so this feature is sometimes referred to as Reflected GCI). Once the slave on the primary has received this event, it knows that all changes tagged with a clock value no later than the reflected GCI are now safe &#8211; the window of conflict has closed.</p>
<p>If an application modifies this same row on the secondary before the replication event from the primary was applied then it will send an associated replication event to the slave on the primary <strong>before</strong> it reflects the new GCI. The slave on the primary will process this replication event and compare the clock value recorded with the effected rows with the latest reflected GCI; as the clock value for the conflicting row is higher the primary recognises that a conflict has occured and will launch the algorithm to resolve the inconsistency.</p>
<div id="attachment_3950" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-3950" class="wp-image-3950 size-large" src="/wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-1024x372.png" alt="Options for MySQL Cluster replication conflict detection/resolution" width="480" height="174" srcset="/wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-1024x372.png 1024w, /wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-300x109.png 300w, /wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-900x327.png 900w, /wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15.png 1728w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-3950" class="wp-caption-text">Figure 7: Options for MySQL Cluster replication conflict detection/resolution</p></div>
<p>&nbsp;</p>
<p>After a conflict has been detected, you have the option of having the database simply report the conflict to the application or have it roll back just the conflicting row or the entire transaction and all subsequent transactions that were dependent on it.</p>
<p style="text-align: left;">So &#8211; what&#8217;s new in 7.4?</p>
<ul>
<li>Selective tracking of transaction reads for improved transaction dependency tracking</li>
<li>Improved NDB Exceptions table format : Non-PK columns, operation type, transaction id, before and after values</li>
<li>Improved manageability: Online conflict role change, improved visibility into system state, operations, current and historic consistency</li>
</ul>
<h4>Configuring Active-Active Replication with Transactional Conflict Resolution</h4>
<div id="attachment_4026" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2015/02/Screen-Shot-2015-02-11-at-17.36.17.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4026" class="size-medium wp-image-4026" src="/wp-content/uploads/2015/02/Screen-Shot-2015-02-11-at-17.36.17-300x181.png" alt="MySQL Replication Configuration" width="300" height="181" srcset="/wp-content/uploads/2015/02/Screen-Shot-2015-02-11-at-17.36.17-300x181.png 300w, /wp-content/uploads/2015/02/Screen-Shot-2015-02-11-at-17.36.17.png 795w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><p id="caption-attachment-4026" class="wp-caption-text">Figure 8: MySQL Replication Configuration</p></div>
<p>This section assumes that replication has already been set up between two clusters as shown in Figure 8. For more details on how to set up that configuration then refer to the blog: <a title="Enhanced conflict resolution with MySQL Cluster active-active replication" href="/mysql-cluster/enhanced-conflict-resolution-with-mysql-cluster-active-active-replication/%20" target="_blank">Enhanced conflict resolution with MySQL Cluster active-active replication</a>.</p>
<p>To keep things simple, just two hosts are used; 192.168.56.101 contains all nodes for the primary cluster and 192.168.56.102 will contain all nodes for the secondary. A single MySQL Server in each cluster acts as both the master and the slave.</p>
<p>The first step is to identify the tables that need conflict detection enabling. Each of those tables then has to have an entry in the mysql.ndb_replication table where they&#8217;re tagged as using the new NDB$EPOCH2_TRANS() function &#8211; you could also choose to use NDB$EPOCH(), in which case only the changes to conflicting rows will be rolled-back rather than the full transactions. A few things to note:</p>
<ul>
<li>This must be done before creating the application tables themselves</li>
<li>Should only be done on the primary</li>
<li>By default the table doesn&#8217;t exist and so the very first step is to create it</li>
</ul>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">PRIMARY&gt; CREATE TABLE mysql.ndb_replication (
-&gt;     db VARBINARY(63),
-&gt;     table_name VARBINARY(63),
-&gt;     server_id INT UNSIGNED,
-&gt;     binlog_type INT UNSIGNED,
-&gt;     conflict_fn VARBINARY(128),
-&gt;     PRIMARY KEY USING HASH (db, table_name, server_id)
-&gt; )   ENGINE=NDB
-&gt; PARTITION BY KEY(db,table_name);

PRIMARY&gt; REPLACE INTO mysql.ndb_replication VALUES ('clusterdb', 'simple1', 0, 0,  'NDB$EPOCH2_TRANS()');
PRIMARY&gt; REPLACE INTO mysql.ndb_replication VALUES ('clusterdb', 'simple2', 0, 0,'NDB$EPOCH2_TRANS()');
PRIMARY&gt; REPLACE INTO mysql.ndb_replication VALUES ('clusterdb', 'simple3', 0, 0,'NDB$EPOCH2_TRANS()');

SECONDARY&gt; SELECT * FROM mysql.ndb_replication;
+-----------+------------+-----------+-------------+--------------------+
| db        | table_name | server_id | binlog_type | conflict_fn        |
+-----------+------------+-----------+-------------+--------------------+
| clusterdb | simple2    |         0 |           0 | NDB$EPOCH2_TRANS() |
| clusterdb | simple1    |         0 |           0 | NDB$EPOCH2_TRANS() |
| clusterdb | simple3    |         0 |           0 | NDB$EPOCH2_TRANS() |
+-----------+------------+-----------+-------------+--------------------+
</pre>
<p>Refer to the <a title="Documentation for mysql.ndb_replication table" href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-replication-conflict-resolution.html#mysql-cluster-ndb-replication-table" target="_blank">MySQL Cluster documentation</a> for details on the contents of the mysql.ndb_replication table.</p>
<p>The next step is to define which MySQL Cluster instance is to act as the PRIMARY and which as the SECONDARY (note that the slave SQL thread must be halted to make this change):</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">PRIMARY&gt; STOP SLAVE SQL_THREAD;
SECONDARY&gt; STOP SLAVE SQL_THREAD;
PRIMARY&gt; SET GLOBAL ndb_slave_conflict_role='PRIMARY';
SECONDARY&gt; SET GLOBAL ndb_slave_conflict_role='SECONDARY';
SECONDARY&gt; START SLAVE SQL_THREAD;
PRIMARY&gt; START SLAVE SQL_THREAD;
</pre>
<p>For each of these tables you should also create an exceptions table which will record any conflicts that have resulted in changes being rolled back; the format of these tables is rigidly defined and so take care to copy the types exactly; again this only needs doing on the primary:</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">PRIMARY&gt; CREATE DATABASE clusterdb;USE clusterdb;

PRIMARY&gt; CREATE TABLE simple1$EX (
NDB$server_id INT UNSIGNED,
NDB$master_server_id INT UNSIGNED,
NDB$master_epoch BIGINT UNSIGNED,
NDB$count INT UNSIGNED,
NDB$OP_TYPE ENUM('WRITE_ROW','UPDATE_ROW', 'DELETE_ROW', 'REFRESH_ROW', 'READ_ROW') NOT NULL,
NDB$CFT_CAUSE ENUM('ROW_DOES_NOT_EXIST', 'ROW_ALREADY_EXISTS', 'DATA_IN_CONFLICT', 'TRANS_IN_CONFLICT') NOT NULL,
NDB$ORIG_TRANSID BIGINT UNSIGNED NOT NULL,
id INT NOT NULL,
value$OLD INT,
value$NEW INT,
PRIMARY KEY(NDB$server_id, NDB$master_server_id, NDB$master_epoch, NDB$count)) ENGINE=NDB;

PRIMARY&gt; CREATE TABLE simple2$EX (
NDB$server_id INT UNSIGNED,
NDB$master_server_id INT UNSIGNED,
NDB$master_epoch BIGINT UNSIGNED,
NDB$count INT UNSIGNED,
NDB$OP_TYPE ENUM('WRITE_ROW','UPDATE_ROW', 'DELETE_ROW', 'REFRESH_ROW', 'READ_ROW') NOT NULL,
NDB$CFT_CAUSE ENUM('ROW_DOES_NOT_EXIST', 'ROW_ALREADY_EXISTS', 'DATA_IN_CONFLICT', 'TRANS_IN_CONFLICT') NOT NULL,
NDB$ORIG_TRANSID BIGINT UNSIGNED NOT NULL,
id INT NOT NULL,
value$OLD INT,
value$NEW INT,
PRIMARY KEY(NDB$server_id, NDB$master_server_id, NDB$master_epoch, NDB$count)) ENGINE=NDB;

PRIMARY&gt; CREATE TABLE simple3$EX (
NDB$server_id INT UNSIGNED,
NDB$master_server_id INT UNSIGNED,
NDB$master_epoch BIGINT UNSIGNED,
NDB$count INT UNSIGNED,
NDB$OP_TYPE ENUM('WRITE_ROW','UPDATE_ROW', 'DELETE_ROW', 'REFRESH_ROW', 'READ_ROW') NOT NULL,
NDB$CFT_CAUSE ENUM('ROW_DOES_NOT_EXIST', 'ROW_ALREADY_EXISTS', 'DATA_IN_CONFLICT', 'TRANS_IN_CONFLICT') NOT NULL,
NDB$ORIG_TRANSID BIGINT UNSIGNED NOT NULL,
id INT NOT NULL,
value$OLD INT,
value$NEW INT,
PRIMARY KEY(NDB$server_id, NDB$master_server_id, NDB$master_epoch, NDB$count)) ENGINE=NDB;
</pre>
<p>Refer to the <a title="Documentation for MySQL Cluster exception tables" href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-replication-conflict-resolution.html#mysql-cluster-replication-exceptions-table" target="_blank">MySQL Cluster documentation</a> for details on the format of the exception tables.</p>
<p>Finally, the application tables themselves can be created (this only needs doing on the primary as they&#8217;ll be replicated to the secondary):</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">PRIMARY&gt; CREATE TABLE simple1 (id INT NOT NULL PRIMARY KEY, value INT) ENGINE=ndb;
PRIMARY&gt; CREATE TABLE simple2 (id INT NOT NULL PRIMARY KEY, value INT) ENGINE=ndb;
PRIMARY&gt; CREATE TABLE simple3 (id INT NOT NULL PRIMARY KEY, value INT) ENGINE=ndb;
</pre>
<p>Everything is now set up and the new configuration can be tested to ensure that conflicts are detected and the correct updates are rolled back.</p>
<h4>Testing Active-Active Replication with Transactional Conflict Resolution</h4>
<p>The first step is to add some data to our new tables (note that at this point replication is running and so they only need to be created on the primary) and confirm that everything is replicated to the secondary:</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">PRIMARY&gt; REPLACE INTO simple1 VALUES (1,10);
PRIMARY&gt; REPLACE INTO simple2 VALUES (1,10);
PRIMARY&gt; REPLACE INTO simple3 VALUES (1,10);

SECONDARY&gt; SELECT * FROM simple1;
+----+-------+
| id | value |
+----+-------+
|  1 |    10 |
+----+-------+

SECONDARY&gt; SELECT * FROM simple2;
+----+-------+
| id | value |
+----+-------+
|  1 |    10 |
+----+-------+

SECONDARY&gt; SELECT * FROM simple3;
+----+-------+
| id | value |
+----+-------+
|  1 |    10 |
+----+-------+
</pre>
<p>It is important that the NDB$EPOCH2_TRANS() function rolls back any transactions on the secondary that involve a conflict (as well as subsequent, dependent transactions that modify the same rows); to intentionally trigger this, the simplest approach is to stop the slave IO thread on the secondary Cluster in order to increase the size of the window of conflict (which is otherwise very short). Once the slave IO thread has been stopped a change is made to table simple1 on the primary and then the secondary makes a (conflicting) change to the same row as well as making a change to table simple2 in the same transaction. A second transaction on the primary will change a row in simple3 &#8211; as it doesn&#8217;t touch any rows that have been involved in a conflict then that change should stand.</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">SECONDARY&gt; STOP SLAVE IO_THREAD;

PRIMARY&gt; UPDATE simple1 SET value=13 WHERE id=1;

SECONDARY&gt; BEGIN; # conflicting transaction
SECONDARY&gt; UPDATE simple1 SET value=20 WHERE id=1;
SECONDARY&gt; UPDATE simple2 SET value=20 WHERE id=1;
SECONDARY&gt; COMMIT;
SECONDARY&gt; UPDATE simple3 SET value=20 WHERE id=1; # non conflicting

SECONDARY&gt; SELECT * FROM simple1; SELECT * FROM simple2; SELECT * FROM simple3;
+----+-------+
| id | value |
+----+-------+
|  1 |    20 |
+----+-------+

+----+-------+
| id | value |
+----+-------+
|  1 |    20 |
+----+-------+

+----+-------+
| id | value |
+----+-------+
|  1 |    20 |
+----+-------+
</pre>
<p>If you now check the exception tables then you can see that the primary has received the changes from the secondary and because the first transaction updated the same row in simple1 during its window of conflict it has recorded that the change needs to be rolled back &#8211; this will happen as soon as the replication thread is restarted on the secondary:</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">PRIMARY&gt; SELECT * FROM simple1$EX\G
*************************** 1. row ***************************
NDB$server_id: 9
NDB$master_server_id: 20
NDB$master_epoch: 31344671326216
NDB$count: 3
NDB$OP_TYPE: UPDATE_ROW
NDB$CFT_CAUSE: TRANS_IN_CONFLICT
NDB$ORIG_TRANSID: 193282978304
id: 1
value$OLD: 10
value$NEW: 20
1 row in set (0.00 sec)

PRIMARY&gt; SELECT * FROM simple2$EX\G
*************************** 1. row ***************************
NDB$server_id: 9
NDB$master_server_id: 20
NDB$master_epoch: 31344671326216
NDB$count: 1
NDB$OP_TYPE: UPDATE_ROW
NDB$CFT_CAUSE: TRANS_IN_CONFLICT
NDB$ORIG_TRANSID: 193282978304
id: 1
value$OLD: 10
value$NEW: 20

PRIMARY&gt; SELECT * FROM simple3$EX\G
Empty set (0.01 sec)

SECONDARY&gt; START SLAVE IO_THREAD;

SECONDARY&gt; SELECT * FROM simple1; SELECT * FROM simple2; SELECT * FROM simple3;
+----+-------+
| id | value |
+----+-------+
|  1 |    13 |
+----+-------+

+----+-------+
| id | value |
+----+-------+
|  1 |    10 |
+----+-------+

+----+-------+
| id | value |
+----+-------+
|  1 |    20 |
+----+-------+
</pre>
<p>These are the results we expect &#8211; simple1 has the value set by the primary with the subsequent change on the secondary rolled back; simple2 was not updated by the primary but the change on the secondary was rolled back as it was made in the same transaction as the conflicting update to simple1. The change on the secondary to simple3 has survived as it was made outside of any conflicting transaction and the change was not dependent on any conflicting changes. Finally just confirm that the data is identical on the primary:</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">PRIMARY&gt; SELECT * FROM simple1; SELECT * FROM simple2; SELECT * FROM simple3;
+----+-------+
| id | value |
+----+-------+
|  1 |    13 |
+----+-------+

+----+-------+
| id | value |
+----+-------+
|  1 |    10 |
+----+-------+

+----+-------+
| id | value |
+----+-------+
|  1 |    20 |
+----+-------+
</pre>
<p>Statistics are provided on the primary that record that 1 conflict has been detected, effecting 1 transaction and that it resulted in 2 row changes being rolled back:</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">PRIMARY&gt; SHOW STATUS LIKE 'ndb_conflict%';
+------------------------------------------+----------------+
| Variable_name                            | Value          |
+------------------------------------------+----------------+
| Ndb_conflict_fn_max                      | 0              |
| Ndb_conflict_fn_old                      | 0              |
| Ndb_conflict_fn_max_del_win              | 0              |
| Ndb_conflict_fn_epoch                    | 0              |
| Ndb_conflict_fn_epoch_trans              | 0              |
| Ndb_conflict_fn_epoch2                   | 0              |
| Ndb_conflict_fn_epoch2_trans             | 1              |
| Ndb_conflict_trans_row_conflict_count    | 1              |
| Ndb_conflict_trans_row_reject_count      | 2              |
| Ndb_conflict_trans_reject_count          | 1              |
| Ndb_conflict_trans_detect_iter_count     | 1              |
| Ndb_conflict_trans_conflict_commit_count | 1              |
| Ndb_conflict_epoch_delete_delete_count   | 0              |
| Ndb_conflict_reflected_op_prepare_count  | 0              |
| Ndb_conflict_reflected_op_discard_count  | 0              |
| Ndb_conflict_refresh_op_count            | 0              |
| Ndb_conflict_last_conflict_epoch         | 37391985278995 |
| Ndb_conflict_last_stable_epoch           | 37417755082760 |
+------------------------------------------+----------------+

SECONDARY&gt; SHOW STATUS LIKE 'ndb_conflict%';
+------------------------------------------+----------------+
| Variable_name                            | Value          |
+------------------------------------------+----------------+
| Ndb_conflict_fn_max                      | 0              |
| Ndb_conflict_fn_old                      | 0              |
| Ndb_conflict_fn_max_del_win              | 0              |
| Ndb_conflict_fn_epoch                    | 0              |
| Ndb_conflict_fn_epoch_trans              | 0              |
| Ndb_conflict_fn_epoch2                   | 0              |
| Ndb_conflict_fn_epoch2_trans             | 0              |
| Ndb_conflict_trans_row_conflict_count    | 0              |
| Ndb_conflict_trans_row_reject_count      | 0              |
| Ndb_conflict_trans_reject_count          | 0              |
| Ndb_conflict_trans_detect_iter_count     | 0              |
| Ndb_conflict_trans_conflict_commit_count | 0              |
| Ndb_conflict_epoch_delete_delete_count   | 0              |
| Ndb_conflict_reflected_op_prepare_count  | 1              |
| Ndb_conflict_reflected_op_discard_count  | 1              |
| Ndb_conflict_refresh_op_count            | 2              |
| Ndb_conflict_last_conflict_epoch         | 32280974196749 |
| Ndb_conflict_last_stable_epoch           | 18897856102416 |
+------------------------------------------+----------------+
</pre>
<p>These status variables are described in the <a title="MySQL Cluster conflict detecion/resoultion status variables" href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-status-variables.html" target="_blank">MySQL Cluster documentation</a>.</p>
<h3>Faster Restarts</h3>
<p>You can restart MySQL Cluster processes (nodes) without losing database service (for example if adding extra memory to a server) and so on the face of it, the speed of the restarts isn&#8217;t that important. Having said that, while the node is restarting you&#8217;ve lost some of your high-availability which for super-critical applications can make you nervous. Additionally, faster restarts mean that you can complete maintenance activities faster &#8211; for example, a software upgrade requires a rolling restart of all of the nodes &#8211; if you have 48 data nodes then you want each of the data nodes to restart as quickly as possible.</p>
<p>MySQL 7.4 includes a number of optimisations to the restart code and so if you&#8217;re already using MySQL Cluster, it might be interesting to see how much faster it gets for your application.</p>
<h3>Enhanced Reporting</h3>
<p>MySQL Cluster presents a lot of monitoring information through the ndbinfo database and in 7.4 we&#8217;ve added some extra information on how memory is used for individual tables and how operations are distributed.</p>
<h4>Extra Memory Reporting</h4>
<p>MySQL Cluster allocates all of the required memory when a data node starts and so any information on memory usage from the operating system is of limited use and provides no clues as to how memory is used with the data nodes &#8211; for example, which tables are using the most memory. Also, as this is a distributed database, it is helpful to understand whether a particular table is using a similar amount of memory in each data node (if not then it could be that a better partitioning/sharding key could be used). Finally, when rows are deleted from a table, the memory for those rows would typically remain allocated against that table and so it is helpful to understand how many of these ‘empty slots’ are available for use by new rows in that table. MySQL Cluster 7.4 introduces a new table – <a title="Understanding how memory is used in mmc" href="%20http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-ndbinfo-memory-per-fragment.html" target="_blank">ndbinfo.memory_per_fragment</a> &#8211; that provides that information.</p>
<p>For example; to see how much memory is being used by each data node for a particular table&#8230;</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">mysql&gt; CREATE DATABASE clusterdb;USE clusterdb;
mysql&gt; CREATE TABLE simples (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY) ENGINE=NDB;
mysql&gt; SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |      131072 |       5504 |        172 |
|    1 |    2 |      131072 |       1280 |         40 |
|    2 |    0 |      131072 |       5504 |        172 |
|    2 |    2 |      131072 |       1280 |         40 |
|    3 |    1 |      131072 |       3104 |         97 |
|    3 |    3 |      131072 |       4256 |        133 |
|    4 |    1 |      131072 |       3104 |         97 |
|    4 |    3 |      131072 |       4256 |        133 |
+------+------+-------------+------------+------------+
</pre>
<p>When you delete rows from a MySQL Cluster table, the memory is not actually freed up and so if you check the existing <a title="memoryusage table" href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-ndbinfo-memoryusage.html" target="_blank">memoryusage table</a> you won&#8217;t see a change. This memory will be reused when you add new rows to that same table. In MySQL Cluster 7.4, it&#8217;s possible to see how much memory is in that state for a table&#8230;</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">mysql&gt; SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |      131072 |       5504 |        172 |
|    1 |    2 |      131072 |       1280 |         40 |
|    2 |    0 |      131072 |       5504 |        172 |
|    2 |    2 |      131072 |       1280 |         40 |
|    3 |    1 |      131072 |       3104 |         97 |
|    3 |    3 |      131072 |       4256 |        133 |
|    4 |    1 |      131072 |       3104 |         97 |
|    4 |    3 |      131072 |       4256 |        133 |
+------+------+-------------+------------+------------+
mysql&gt; DELETE FROM clusterdb.simples LIMIT 1;
mysql&gt; SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |      131072 |       5504 |        172 |
|    1 |    2 |      131072 |       1312 |         41 |
|    2 |    0 |      131072 |       5504 |        172 |
|    2 |    2 |      131072 |       1312 |         41 |
|    3 |    1 |      131072 |       3104 |         97 |
|    3 |    3 |      131072 |       4288 |        134 |
|    4 |    1 |      131072 |       3104 |         97 |
|    4 |    3 |      131072 |       4288 |        134 |
+------+------+-------------+------------+------------+
</pre>
<p>As a final example, we can check whether a table is being evenly sharded accross the data nodes (in this case a realy bad sharding key was chosen)&#8230;</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">mysql&gt; CREATE TABLE simples (id INT NOT NULL AUTO_INCREMENT, \
        species VARCHAR(20) DEFAULT "Human", 
        PRIMARY KEY(id, species)) engine=ndb PARTITION BY KEY(species);

// Add some data

mysql&gt; SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |           0 |          0 |          0 |
|    1 |    2 |      196608 |      11732 |        419 |
|    2 |    0 |           0 |          0 |          0 |
|    2 |    2 |      196608 |      11732 |        419 |
|    3 |    1 |           0 |          0 |          0 |
|    3 |    3 |           0 |          0 |          0 |
|    4 |    1 |           0 |          0 |          0 |
|    4 |    3 |           0 |          0 |          0 |
+------+------+-------------+------------+------------+
</pre>
<h4>Extra Operations Reporting</h4>
<p>To ensure that resources are being used effectively, it is very helpful to understand the how each table is being access (how frequently and for what types of operations). To support this, the ndbinfo. operations_per_fragment table is provided. For example, the data in this table would let you identify that a large number of full table scans are performed on a particular table.</p>
<p>It is also important to identify if there are any hotspots where a disproportionate share of the queries for a table are hitting a particular fragment/data node. Again, <a title="Monitoring the distributed nature of operations in MySQL Cluster" href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-ndbinfo-operations-per-fragment.html" target="_blank">ndbinfo. operations_per_fragment</a> provides this information.</p>
<p>As an example of how to use some of the data from this table, a simple table is created and populated and then ndbinfo.operations_per_fragment is used to monitor how many Primary Key reads and table scans are performed[1]:</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">mysql&gt; CREATE TABLE simples (id INT AUTO_INCREMENT PRIMARY KEY, time TIMESTAMP) ENGINE=NDB;

mysql&gt; SELECT fq_name AS 'Table', node_id AS 'Data Node', tot_key_reads AS 'Reads', tot_frag_scans AS 'Scans' FROM ndbinfo.operations_per_fragment WHERE fq_name LIKE '%simples';
+-----------------------+-----------+-------+-------+
| Table                 | Data Node | Reads | Scans |
+-----------------------+-----------+-------+-------+
| clusterdb/def/simples |         3 |     0 |     1 |
| clusterdb/def/simples |         3 |     0 |     0 |
| clusterdb/def/simples |         4 |     0 |     0 |
| clusterdb/def/simples |         4 |     0 |     1 |
+-----------------------+-----------+-------+-------+

mysql&gt; REPLACE INTO simples VALUES ();  # Repeated several times
mysql&gt; SELECT * FROM simples;
+----+---------------------+
| id | time                |
+----+---------------------+
|  7 | 2015-01-22 15:12:42 |
…
|  8 | 2015-01-22 15:12:58 |
+----+---------------------+
23 rows in set (0.00 sec)

mysql&gt; SELECT fq_name AS 'Table', node_id AS 'Data Node', tot_key_reads AS 'Reads', tot_frag_scans AS 'Scans' FROM ndbinfo.operations_per_fragment WHERE fq_name LIKE '%simples';
+-----------------------+-----------+-------+-------+
| Table                 | Data Node | Reads | Scans |
+-----------------------+-----------+-------+-------+
| clusterdb/def/simples |         3 |     0 |     2 |
| clusterdb/def/simples |         3 |     0 |     0 |
| clusterdb/def/simples |         4 |     0 |     0 |
| clusterdb/def/simples |         4 |     0 |     2 |
+-----------------------+-----------+-------+-------+

mysql&gt; SELECT * FROM simples WHERE id=11;
+----+---------------------+
| id | time                |
+----+---------------------+
| 11 | 2015-01-22 15:12:59 |
+----+---------------------+

mysql&gt; SELECT fq_name AS 'Table', node_id AS 'Data Node', tot_key_reads AS 'Reads', tot_frag_scans AS 'Scans' FROM ndbinfo.operations_per_fragment WHERE fq_name LIKE '%simples';
+-----------------------+-----------+-------+-------+
| Table                 | Data Node | Reads | Scans |
+-----------------------+-----------+-------+-------+
| clusterdb/def/simples |         3 |     0 |     2 |
| clusterdb/def/simples |         3 |     0 |     0 |
| clusterdb/def/simples |         4 |     0 |     0 |
| clusterdb/def/simples |         4 |     1 |     2 |
+-----------------------+-----------+-------+-------+
</pre>
<p>Note that there are two rows listed for each data node but only one row for each has non-zero values; this is because each data node holds the primary fragment for one of the partitions and the secondary fragment for the other – all operations are performed only on the active fragments. This is made clearer if the fragment number is included in the query:</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">mysql&gt; SELECT fq_name AS 'Table', node_id AS 'Data Node', fragment_num AS 'Fragment', tot_key_reads AS 'Reads', tot_frag_scans AS 'Scans' FROM ndbinfo.operations_per_fragment WHERE fq_name LIKE '%simples';
+-----------------------+-----------+----------+-------+-------+
| Table                 | Data Node | Fragment | Reads | Scans |
+-----------------------+-----------+----------+-------+-------+
| clusterdb/def/simples |         3 |        0 |     0 |     2 |
| clusterdb/def/simples |         3 |        1 |     0 |     0 |
| clusterdb/def/simples |         4 |        0 |     0 |     0 |
| clusterdb/def/simples |         4 |        1 |     1 |     2 |
+-----------------------+-----------+----------+-------+-------+
</pre>
<h3>Conclusion</h3>
<p>We&#8217;re really excited about the GA for this new MySQL Cluster release; if you get chance to try it out then please let us know how you get on &#8211; either through a comment on this blog, a <a title="MySQL bug report" href="http://bugs.mysql.com/" target="_blank">MySQL bug report</a> or a post to the <a title="MySQL Cluster Forum" href="http://forums.mysql.com/list.php?25" target="_blank">MySQL Cluster Forum</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-cluster/mysql-cluster-7-4-is-ga-200-million-qps-and-active-active-geor/feed</wfw:commentRss>
			<slash:comments>8</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL Cluster 7.4.3 RELEASE CANDIDATE now available</title>
		<link>/mysql-cluster/mysql-cluster-7-4-3-release-candidate-now-available</link>
					<comments>/mysql-cluster/mysql-cluster-7-4-3-release-candidate-now-available#comments</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Thu, 22 Jan 2015 10:03:00 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster 7.4]]></category>
		<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[Performance]]></category>
		<guid isPermaLink="false">/?p=3990</guid>

					<description><![CDATA[Oracle have just made availble the Release Candidate for MySQL Cluster 7.4 (MySQL Cluster 7.4.3) &#8211; it can be downloaded from the development release tab here. Note that this is not a GA release and so we wouldn&#8217;t recommend using it in production. The delta between this RC and the 7.4.2 DMR can be viewed]]></description>
										<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2014/07/MySQL_Cluster_400.png"><img loading="lazy" decoding="async" src="/wp-content/uploads/2014/07/MySQL_Cluster_400.png" alt="MySQL Cluster Logo" width="400" height="168" class="alignright size-full wp-image-3934" srcset="/wp-content/uploads/2014/07/MySQL_Cluster_400.png 400w, /wp-content/uploads/2014/07/MySQL_Cluster_400-300x126.png 300w" sizes="auto, (max-width: 400px) 100vw, 400px" /></a></p>
<p>Oracle have just made availble the <strong>Release Candidate</strong> for MySQL Cluster 7.4 (MySQL Cluster 7.4.3) &#8211; it can be <a href="http://dev.mysql.com/downloads/cluster/" title="download the MySQL Cluster 7.4.3 Release Candidate" target="_blank">downloaded from the development release tab here</a>. Note that this is not a GA release and so we wouldn&#8217;t recommend using it in production.</p>
<p>The delta between this RC and the 7.4.2 DMR can be viewed in the <a href="http://dev.mysql.com/doc/relnotes/mysql-cluster/7.4/en/mysql-cluster-news-5-6-22-ndb-7-4-3.html" title="MySQL Cluster 7.4.3 Release Notes" target="_blank">MySQL Cluster 7.4.3 Release Notes</a></p>
<p>There are three main focus areas for this RC and the purpose of this post is to briefly introduce them:</p>
<ul>
<li>Active-Active (Multi-Master) Replication</li>
<li>Performance</li>
<li>Operational improvements (speeding up of restarts; enhanced memory reporting)</li>
</ul>
<h2>Active-Active (Multi-Master) Replication</h2>
<p>MySQL Cluster allows bi-directional replication between two (or more) clusters. Replication within each cluster is synchronous but between clusters it is asynchronous which means the following scenario is possible:</p>
<table summary="Active-Active asynchronous replication can lead to inconsistencies between databases" width="260" border="1" align="center">
<caption align="center">Conflict with asynchronous replication</caption>
<tbody>
<tr>
<th scope="col" align="center" width="80">Site A</th>
<th scope="col" align="center" width="100">Replication</th>
<th scope="col" align="center" width="80">Site B</th>
</tr>
<tr>
<td align="center">x == 10</td>
<td></td>
<td align="center">x == 10</td>
</tr>
<tr>
<td align="center">x = 11</td>
<td></td>
<td align="center">x = 20</td>
</tr>
<tr>
<td></td>
<td align="center">&#8212; x=11 &#8211;&gt;</td>
<td align="center">x == 11</td>
</tr>
<tr>
<td align="center">x==20</td>
<td align="center">&lt;&#8211; x=20 &#8212;</td>
<td></td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>In this example a value (column for a row in a table) is set to 11 on site A and the change is queued for replication to site B. In the mean time, an application sets the value to 20 on site B and that change is queued for replication to site A. Once both sites have received and applied the replicated change from the other cluster site A contains the value 20 while site B contains 11 &#8211; in other words the databases are now inconsistent.</p>
<h2>How MySQL Cluster implements eventual consistency</h2>
<p>There are two phases to establishing consistency between both clusters after an inconsistency has been introduced:</p>
<ol>
<li>Detect that a conflict has happened</li>
<li>Resolve the inconsistency</li>
</ol>
<p>The following animation illustrates how MySQL Cluster 7.2 detects that an inconsistency has been introduced by the asynchronous, active-active replication:</p>
<div id="attachment_2149" style="width: 610px" class="wp-caption alignnone"><a href="/wp-content/uploads/2011/11/ReflectingGCI1.gif"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-2149" class="size-full wp-image-2149" title="ReflectingGCI" src="/wp-content/uploads/2011/11/ReflectingGCI1.gif" alt="" width="600" height="463" /></a><p id="caption-attachment-2149" class="wp-caption-text">Detecting conflicts</p></div>
<p>While we typically consider the 2 clusters in an active-active replication configuration to be peers, in this case we designate one to be the primary and the other the secondary. Reads and writes can still be sent to either cluster but it is the responsibility of the primary to identify that a conflict has arisen and then remove the inconsistency.</p>
<p>A logical clock is used to identify (in relative terms) when a change is made on the primary &#8211; for those who know something of the MySQL Cluster internals, we use the index of the Global Checkpoint that the update is contained in. For all tables that have this feature turned on, an extra, hidden column is automatically added on the primary &#8211; this represents the value of the logical clock when the change was made.</p>
<p>Once the change has been applied on the primary, there is a &#8220;window of conflict&#8221; for the effected row(s) during which if a different change is made to the same row(s) on the secondary then there will be an inconsistency. Once the slave on the secondary has applied the change from the primary, it will send a replication event back to the slave on the primary, containing the primary&#8217;s clock value associated with the changes that have just been applied on the secondary. (Remember that the clock is actually the Global Checkpoint Index and so this feature is sometimes referred to as Reflected GCI). Once the slave on the primary has received this event, it knows that all changes tagged with a clock value no later than the reflected GCI are now safe &#8211; the window of conflict has closed.</p>
<p>If an application modifies this same row on the secondary before the replication event from the primary was applied then it will send an associated replication event to the slave on the primary <strong>before</strong> it reflects the new GCI. The slave on the primary will process this replication event and compare the clock value recorded with the effected rows with the latest reflected GCI; as the clock value for the conflicting row is higher the primary recognises that a conflict has occured and will launch the algorithm to resolve the inconsistency.</p>
<p><a href="/wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15.png"><img loading="lazy" decoding="async" src="/wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-300x109.png" alt="Options for MySQL Cluster replication conflict detection/resolution" width="300" height="109" class="alignright size-medium wp-image-3950" srcset="/wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-300x109.png 300w, /wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-1024x372.png 1024w, /wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-900x327.png 900w, /wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15.png 1728w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a></p>
<p>After a conflict has been detected, you have the option of having the database simply report the conflict to the application or have it roll back just the conflicting row or the entire transaction and all subsequent transactions that were dependent on it.</p>
<p>So &#8211; what&#8217;s new in 7.4?</p>
<ul>
<li>Detects conflicts between inserts and updates</li>
<li>Option to roll back entire transaction (and dependent transactions) rather than just the conflicting row</li>
<li>All conflicts are handled before switching primary &#8211; avoiding potential race conditions</li>
</ul>
<h3>Performance</h3>
<p><a href="/wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23.png"><img loading="lazy" decoding="async" src="/wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23-300x197.png" alt="MySQL CLuster Read-Write Performance" width="300" height="197" class="alignright size-medium wp-image-3952" srcset="/wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23-300x197.png 300w, /wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23.png 864w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><br />
Being a scaled-out, in-memory, real-time database, MySQL Cluster performance has always been great but we continue to work on making it faster each release. In particular, we want to keep pace with the trend of having more and more cores rather than faster ones. 7.4 continues along the path of better exploiting multiple cores &#8211; as can be seen from these benchmark results.<br />
<a href="/wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15.png"><img loading="lazy" decoding="async" src="/wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15-300x199.png" alt="MySQL CLuster 7.4 Read Performance" width="300" height="199" class="alignright size-medium wp-image-3951" srcset="/wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15-300x199.png 300w, /wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15.png 842w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><br />
Just make sure that you&#8217;re using the multi-threaded data node (ndbmtd rather than ndbd) and have <a href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-programs-ndbmtd.html" title="MySQL Cluster - configuring multi-threaded datanodes" target="_blank">configured how many threads it should use</a>.</p>
<h3>Faster Restarts</h3>
<p>You can restart MySQL Cluster processes (nodes) without losing database service (for example if adding extra memory to a server) and so on the face of it, the speed of the restarts isn&#8217;t that important. Having said that, while the node is restarting you&#8217;ve lost some of your high-availability which for super-critical applications can make you nervous. Additionally, faster restarts mean that you can complete maintenance activities faster &#8211; for example, a software upgrade requires a rolling restart of all of the nodes &#8211; if you have 48 data nodes then you want each of the data nodes to restart as quickly as possible.</p>
<p>MySQL 7.4 includes a number of optimisations to the restart code and so if you&#8217;re already using MySQL Cluster, it might be interesting to see how much faster it gets for your application. We also have some extra optimisations in the works that you can expect to see in later 7.4 versions.</p>
<h3>Extra Memory Reporting</h3>
<p>MySQL Cluster presents a lot of monitoring information through the <a href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-ndbinfo.html" title="ndbinfo database" target="_blank">ndbinfo database</a> and in 7.4 we&#8217;ve added some extra information on how memory is used for individual tables.</p>
<p>For example; to see how much memory is being used by each data node for a particular table&#8230;</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql> CREATE DATABASE clusterdb;USE clusterdb;
mysql> CREATE TABLE simples (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY) ENGINE=NDB;
mysql> SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |      131072 |       5504 |        172 |
|    1 |    2 |      131072 |       1280 |         40 |
|    2 |    0 |      131072 |       5504 |        172 |
|    2 |    2 |      131072 |       1280 |         40 |
|    3 |    1 |      131072 |       3104 |         97 |
|    3 |    3 |      131072 |       4256 |        133 |
|    4 |    1 |      131072 |       3104 |         97 |
|    4 |    3 |      131072 |       4256 |        133 |
+------+------+-------------+------------+------------+
</pre>
<p>When you delete rows from a MySQL Cluster table, the memory is not actually freed up and so if you check the existing <a href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-ndbinfo-memoryusage.html" title="memoryusage table" target="_blank">memoryusage table</a> you won&#8217;t see a change. This memory will be reused when you add new rows to that same table. In MySQL Cluster 7.4, it&#8217;s possible to see how much memory is in that state for a table&#8230;</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql> SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |      131072 |       5504 |        172 |
|    1 |    2 |      131072 |       1280 |         40 |
|    2 |    0 |      131072 |       5504 |        172 |
|    2 |    2 |      131072 |       1280 |         40 |
|    3 |    1 |      131072 |       3104 |         97 |
|    3 |    3 |      131072 |       4256 |        133 |
|    4 |    1 |      131072 |       3104 |         97 |
|    4 |    3 |      131072 |       4256 |        133 |
+------+------+-------------+------------+------------+
mysql> DELETE FROM clusterdb.simples LIMIT 1;
mysql> SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |      131072 |       5504 |        172 |
|    1 |    2 |      131072 |       1312 |         41 |
|    2 |    0 |      131072 |       5504 |        172 |
|    2 |    2 |      131072 |       1312 |         41 |
|    3 |    1 |      131072 |       3104 |         97 |
|    3 |    3 |      131072 |       4288 |        134 |
|    4 |    1 |      131072 |       3104 |         97 |
|    4 |    3 |      131072 |       4288 |        134 |
+------+------+-------------+------------+------------+
</pre>
<p>As a final example, we can check whether a table is being evenly sharded accross the data nodes (in this case a realy bad sharding key was chosen)&#8230;</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql> CREATE TABLE simples (id INT NOT NULL AUTO_INCREMENT, \
        species VARCHAR(20) DEFAULT "Human", 
        PRIMARY KEY(id, species)) engine=ndb PARTITION BY KEY(species);

// Add some data

mysql> SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |           0 |          0 |          0 |
|    1 |    2 |      196608 |      11732 |        419 |
|    2 |    0 |           0 |          0 |          0 |
|    2 |    2 |      196608 |      11732 |        419 |
|    3 |    1 |           0 |          0 |          0 |
|    3 |    3 |           0 |          0 |          0 |
|    4 |    1 |           0 |          0 |          0 |
|    4 |    3 |           0 |          0 |          0 |
+------+------+-------------+------------+------------+
</pre>
<p>If you get chance to try out this new release then please let us know how you get on &#8211; either through a comment on this blog, a <a href="http://bugs.mysql.com/" title="MySQL bug report" target="_blank">MySQL bug report</a> or a post to the <a href="http://forums.mysql.com/list.php?25" title="MySQL Cluster Forum" target="_blank">MySQL Cluster Forum</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-cluster/mysql-cluster-7-4-3-release-candidate-now-available/feed</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL Cluster 7.4.0 Labs Release</title>
		<link>/mysql-cluster/mysql-cluster-7-4-0-labs-released</link>
					<comments>/mysql-cluster/mysql-cluster-7-4-0-labs-released#comments</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Mon, 31 Mar 2014 12:28:06 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[High Availability]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster 7.4]]></category>
		<category><![CDATA[Performance]]></category>
		<guid isPermaLink="false">/?p=3872</guid>

					<description><![CDATA[The first version of MySQL Cluster 7.4 has now been released on MySQL Labs. Note that labs loads are not suitable for production use (in fact they&#8217;re even less mature than Development Milestone Releases); their purpose is to give users a chance to see what&#8217;s in the works, try it for themselves and then provide]]></description>
										<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2013/11/MySQL_Cluster.png"><img loading="lazy" decoding="async" src="/wp-content/uploads/2013/11/MySQL_Cluster-300x125.png" alt="MySQL Cluster Logo" width="300" height="125" class="alignright size-medium wp-image-2982" srcset="/wp-content/uploads/2013/11/MySQL_Cluster-300x125.png 300w, /wp-content/uploads/2013/11/MySQL_Cluster.png 1004w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a>The first version of MySQL Cluster 7.4 has now been released on <a href="http://labs.mysql.com/" title="MySQL Labs" target="blank">MySQL Labs</a>. Note that labs loads are not suitable for production use (in fact they&#8217;re even less mature than Development Milestone Releases); their purpose is to give users a chance to see what&#8217;s in the works, try it for themselves and then provide feedback. Having read that, if you&#8217;d like to try it out then <a href="http://labs.mysql.com/" title="Download MySQL Cluster 7.4 from MySQL Labs" target="blank">Download MySQL Cluster 7.4 from MySQL Labs</a>.</p>
<p>The focus of this first Cluster 7.4 load is performance and data node restart times.</p>
<h2>Performance</h2>
<p><a href="/wp-content/uploads/2014/03/Screen-Shot-2014-03-28-at-16.21.35.png"><img loading="lazy" decoding="async" src="/wp-content/uploads/2014/03/Screen-Shot-2014-03-28-at-16.21.35-300x203.png" alt="MySQL Cluster 7.4 Sysbench Read-Only" width="300" height="203" class="alignright size-medium wp-image-3869" srcset="/wp-content/uploads/2014/03/Screen-Shot-2014-03-28-at-16.21.35-300x203.png 300w, /wp-content/uploads/2014/03/Screen-Shot-2014-03-28-at-16.21.35-1024x695.png 1024w, /wp-content/uploads/2014/03/Screen-Shot-2014-03-28-at-16.21.35-900x611.png 900w, /wp-content/uploads/2014/03/Screen-Shot-2014-03-28-at-16.21.35.png 1228w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a>MySQL Cluster was designed from the outset to be a distributed, in-memory database and has been deployed that way for many, many years (it&#8217;s interesting to see that the idea of in-memory databases has now really come into vogue with excitement around new arrivals on the scene such as Hekaton). Not surprisingly when people are considering MySQL Cluster, performance and scalability are key features (High Availability is another) and so performance improvements are always a key focus of every release and MySQL CLuster 7.4 is no exception.</p>
<p><a href="/wp-content/uploads/2014/03/Screen-Shot-2014-03-28-at-16.21.24.png"><img loading="lazy" decoding="async" src="/wp-content/uploads/2014/03/Screen-Shot-2014-03-28-at-16.21.24-300x199.png" alt="MySQL Cluster 7.4 Sysbench Read/Write" width="300" height="199" class="alignright size-medium wp-image-3868" srcset="/wp-content/uploads/2014/03/Screen-Shot-2014-03-28-at-16.21.24-300x199.png 300w, /wp-content/uploads/2014/03/Screen-Shot-2014-03-28-at-16.21.24-1024x681.png 1024w, /wp-content/uploads/2014/03/Screen-Shot-2014-03-28-at-16.21.24-900x599.png 900w, /wp-content/uploads/2014/03/Screen-Shot-2014-03-28-at-16.21.24.png 1220w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a>The graphs show what&#8217;s already been acheived with Read Only Sysbench showing a 47% increase in throughput and a 38% improvement for the Read/Write benchmark. Even better improvements are seen when configuring the data nodes to use even more threads. For those not familiar with Sysbench, you should realise that each of the transactions involves quite a lot of work: 10 Primary Key lookups, 5 different types of scans where we fetch 100 records (normal select through ordered index followed by oder by, group by and so forth).</p>
<h2>Restart Times</h2>
<p>While less glamorous than performance, the time taken for a data node to restart can make a huge difference to how easy it is to manage your cluster. As the size and activity of the database increases, the restart time for a single data node will go up, if you then multiply that time by the number of data nodes you have, maintenance activities can start to take longer than you&#8217;d like.</p>
<p>This first MySQL Cluster 7.4 labs makes some signifficant improvements to the restart times &#8211; mostly by allowing more of the work to be done in parallel.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-cluster/mysql-cluster-7-4-0-labs-released/feed</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
		<item>
		<title>Optimizing Performance of the MySQL Cluster Database &#8211; White Paper update</title>
		<link>/mysql-cluster/optimizing-performance-of-the-mysql-cluster-database-white-paper-update</link>
					<comments>/mysql-cluster/optimizing-performance-of-the-mysql-cluster-database-white-paper-update#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 13 Jul 2012 08:40:45 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster 7.2]]></category>
		<category><![CDATA[Performance]]></category>
		<category><![CDATA[White Paper]]></category>
		<guid isPermaLink="false">/?p=2397</guid>

					<description><![CDATA[A new version of the white paper &#8220;Guide to Optimizing Performance of the MySQL Cluster Database&#8221; has been released; download it here. This paper steps you through: Identifying if your application is a good fit for MySQL Cluster Measuring performance and identifying problem performance areas to address Optimizing performance: Access patterns Using Adaptive Query Localization]]></description>
										<content:encoded><![CDATA[<p><div id="attachment_2398" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2012/07/threads.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-2398" src="/wp-content/uploads/2012/07/threads-300x292.png" alt="Engineering threads within a Data Node" title="Engineering threads within a Data Node" width="300" height="292" class="size-medium wp-image-2398" /></a><p id="caption-attachment-2398" class="wp-caption-text">Engineering threads within a Data Node</p></div>A new version of the white paper &#8220;<a href="http://www.mysql.com/why-mysql/white-papers/mysql_wp_cluster_performance.php" title="Guide to Optimizing Performance of the MySQL Cluster Database" target="_blank">Guide to Optimizing Performance of the MySQL Cluster Database</a>&#8221; has been released; <a href="http://www.mysql.com/why-mysql/white-papers/mysql_wp_cluster_performance.php" title="Guide to Optimizing Performance of the MySQL Cluster Database" target="_blank">download it here</a>.</p>
<p>
This paper steps you through:</p>
<ul>
<li>Identifying if your application is a good fit for MySQL Cluster</li>
<li>Measuring performance and identifying problem performance areas to address</li>
<li>Optimizing performance:
<ul>
<li>Access patterns</li>
<li>Using Adaptive Query Localization for complex Joins</li>
<li>Distribution aware applications</li>
<li>Batching operations</li>
<li>Schema optimizations</li>
<li>Query optimization</li>
<li>Parameter tuning</li>
<li>Connection pools</li>
<li>Multi-Threaded Data Nodes</li>
<li>Alternative APIs</li>
<li>Hardware enhancements</li>
<li>Miscellaneous</li>
</ul>
</li>
<li>Scaling MySQL Cluster by Adding Nodes</li>
</ul>
<p>
As well as the kind of regular updates that are needed from time to time, this version includes the extra opportunities for optimizations that are available with MySQL Cluster 7.2 such as faster joins and engineering the threads within a multi-threaded data node.
</p>
<p>
As a reminder, I&#8217;ll be covering much of this material in an <a href="/mysql-cluster/mysql-cluster-delivering-breakthrough-performance-upcoming-webinar/" title="MySQL Cluster : Delivering Breakthrough Performance (upcoming webinar)" >upcoming webinar</a>.
</p>
<p><a href="http://www.oracle.com/mysqlconnect/index.html" target="_blank"><img loading="lazy" decoding="async" src="/wp-content/uploads/2012/07/1653691.gif" alt="MySQL Connect" title="MySQL Connect" width="125" height="125" class="aligncenter size-full wp-image-2405" /></a></p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-cluster/optimizing-performance-of-the-mysql-cluster-database-white-paper-update/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL Cluster : Delivering Breakthrough Performance (upcoming webinar)</title>
		<link>/mysql-cluster/mysql-cluster-delivering-breakthrough-performance-upcoming-webinar</link>
					<comments>/mysql-cluster/mysql-cluster-delivering-breakthrough-performance-upcoming-webinar#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Mon, 09 Jul 2012 16:13:15 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster 7.2]]></category>
		<category><![CDATA[MySQL Cluster CGE]]></category>
		<category><![CDATA[Performance]]></category>
		<guid isPermaLink="false">/?p=2386</guid>

					<description><![CDATA[I&#8217;ll be presenting a webinar covering MySQL Cluster performance on Thursday, July 26. As always, the webinar will be free but you&#8217;ll need to register here &#8211; you&#8217;ll then also receive a link to the charts and a recording of the session after the event. The replay of this webinar is now available from here.]]></description>
										<content:encoded><![CDATA[<p><div id="attachment_2385" style="width: 260px" class="wp-caption alignright"><a href="/wp-content/uploads/2012/07/MySQL-Cluster-partitioning-key.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-2385" src="/wp-content/uploads/2012/07/MySQL-Cluster-partitioning-key-250x300.png" alt="MySQL Cluster partitioning key" title="MySQL Cluster partitioning key" width="250" height="300" class="size-medium wp-image-2385" /></a><p id="caption-attachment-2385" class="wp-caption-text">MySQL Cluster partitioning key</p></div>I&#8217;ll be presenting a webinar covering MySQL Cluster performance on Thursday, July 26. As always, the webinar will be free but you&#8217;ll need to <a href="http://www.mysql.com/news-and-events/web-seminars/display-719.html" title="MySQL Cluster Essentials: Delivering Breakthrough Performance" target="_blank">register here</a> &#8211; you&#8217;ll then also receive a link to the charts and a recording of the session after the event.</p>
<p>
<em><strong><a href="http://w.on24.com/r.htm?e=490452&#038;s=1&#038;k=6F89071628F0155D82E5DB7ECC263EFA" title="MySQL Cluster performance tuning webinar" target="_blank">The replay of this webinar is now available from here.</a></strong></em>
</p>
<p>Here&#8217;s the agenda (hoping that I can squeeze it all in!):</p>
<ul>
<li>Introduction to MySQL Cluster</li>
<li>Where does MySQL Cluster fit?</li>
<li>Benchmarks:
<ul>
<li>ANALYZE TABLE </li>
<li>Access patterns </li>
<li>AQL (fast JOINs) </li>
<li>Distribution aware</li>
<li>Batching </li>
<li>Schema optimisations </li>
<li>Connection pooling </li>
<li>Multi-threaded data nodes </li>
<li>High performance NoSQL APIs </li>
<li>Hardware choices </li>
<li>More tips</li>
</ul>
</li>
<li>The measure/optimise loop</li>
<li>Techniques to boost performance</li>
<li>Scaling out </li>
<li>Other useful resources </li>
</ul>
<p>
The session starts at 9:00 am UK time / 10:00 am Central European time.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-cluster/mysql-cluster-delivering-breakthrough-performance-upcoming-webinar/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL Cluster Database 7: Performance Benchmark</title>
		<link>/mysql-cluster/mysql-cluster-database-7-performance-benchmark</link>
					<comments>/mysql-cluster/mysql-cluster-database-7-performance-benchmark#comments</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Mon, 14 Mar 2011 10:08:45 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[benchmark]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster 7.0]]></category>
		<category><![CDATA[Performance]]></category>
		<guid isPermaLink="false">/?p=1498</guid>

					<description><![CDATA[(Note that this is a copy of the original article from Hasham Pathan posted on 21st April 2009). Summary of Results: We recently conducted a Performance Benchmark of the newly released version of MySQL Cluster database software version 7.0 using the DBT2 Benchmark. The results are very impressive. Highlight of the results: For 4 Node]]></description>
										<content:encoded><![CDATA[<p>(Note that this is a copy of the <a href="http://blogs.sun.com/hasham/entry/mysql_cluster_7_performance_benchmark" target="_blank">original article from Hasham Pathan</a> posted on 21st April 2009).</p>
<h3>Summary of Results:</h3>
<p>We recently conducted a Performance Benchmark of the newly  released version of MySQL Cluster database software version  7.0 using the DBT2 Benchmark. The results are very impressive.</p>
<p>Highlight of the results:</p>
<ul>
<li>For 4 Node Cluster, we achieved 251,000 Transactions per minute which is more than 4X improvement over the MySQL Cluster 6.3 release.</li>
<li>For 2 Node Cluster, we achieved 143,000 Transactions per minute which is more than  4X improvement over the MySQL Cluster 6.3 release.</li>
<li>Whether a user is looking to take advantage of the latest multi-core, multi-thread server processors, or is seeking to reduce space and energy consumption of their Cluster hardware, MySQL Cluster 7.0 provides a higher throughput, more efficient solution than previous generations of the MySQL Cluster database.</li>
</ul>
<p><em> Note that these results were obtained using 1GB  Gigabit Ethernet. We expect improved performance for high speed cluster interconnect like <a href="http://www.sun.com/products/networking/infiniband.jsp" target="_blank">InfiniBand </a>and <a href="http://www.dolphinics.com/" target="_blank">Dolphinics interconnect solutions</a>.</em> Testing using these interconnects is currently underway.</p>
<p>Some of the KEY features of MySQL cluster 7.0 include &#8220;ability to add nodes and node groups online&#8221;  and &#8220;Data node multithreading support&#8221; You can look at the list of new feature available in MySQL cluster 7.0 <a href="http://www.mysql.com/why-mysql/white-papers/mysql_wp_cluster7_architecture.php" target="_blank">here</a>.</p>
<h3>Deployment Architecture and Configuration Details:</h3>
<div id="attachment_1497" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2011/03/MySQL-Cluster-Topology-2Nodes.gif"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-1497" class="size-medium wp-image-1497" title="MySQL-Cluster-Topology-2Nodes" src="/wp-content/uploads/2011/03/MySQL-Cluster-Topology-2Nodes-300x256.gif" alt="" width="300" height="256" /></a><p id="caption-attachment-1497" class="wp-caption-text">The topology diagram for 2 Node Scenario </p></div>
<p>In the case of a 2 node scenario, the data node processes were running on TWO Sun Fire x4450 system with 8 processor cores per data node. The MySQL server nodes were running a combination of Sun Fire x4450 systems and Sun Fire x4600 systems as shown in the deployment diagram below.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div id="attachment_1496" style="width: 287px" class="wp-caption alignright"><a href="/wp-content/uploads/2011/03/MySQL-Cluster-Topology-4Nodes.gif"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-1496" class="size-medium wp-image-1496" title="MySQL-Cluster-Topology-4Nodes" src="/wp-content/uploads/2011/03/MySQL-Cluster-Topology-4Nodes-277x300.gif" alt="" width="277" height="300" /></a><p id="caption-attachment-1496" class="wp-caption-text">The topology diagram for 4 Node Scenario</p></div>
<p>In the case of a 4 node scenario, FOUR x4450 system were used to deploy the Data Nodes, each data node using 8 cores.  The MySQL Server nodes were running on a combination of TWO Sun Fire x4600, ONE Sun Fire x4240 and FOUR Sun Fire x4450 systems.(co-located with data node systems). Other relevant details are captured in the deployment topology diagram.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Detailed Results:</h3>
<div id="attachment_1495" style="width: 676px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2011/03/DBT2-Benchmark-4Nodes.gif"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-1495" class="size-full wp-image-1495 " title="DBT2-Benchmark-4Nodes" src="/wp-content/uploads/2011/03/DBT2-Benchmark-4Nodes.gif" alt="" width="666" height="561" /></a><p id="caption-attachment-1495" class="wp-caption-text">Four Data Node Results</p></div>
<div id="attachment_1493" style="width: 627px" class="wp-caption alignright"><a href="/wp-content/uploads/2011/03/DBT2-Benchmark-2Nodes.gif"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-1493" class="size-full wp-image-1493 " title="DBT2-Benchmark-2Nodes" src="/wp-content/uploads/2011/03/DBT2-Benchmark-2Nodes.gif" alt="" width="617" height="527" /></a><p id="caption-attachment-1493" class="wp-caption-text">Two Data Node Results</p></div>
<h3>Important Notes:</h3>
<ol>
<li> Each MySQL server was bound to 3 processor cores using  &#8220;processor set&#8221; feature(to accommodate more MySQL Servers on the available hardware).  It is observed that we get increased  TPM/MySQL Server and slight decrease in the response time with 4 processor cores per MySQL server).  An example:  With 3 processor cores assigned for  the MySQL server process, we get the TPM of 12988 for 1 Server, 20 Warehouses.  With 4 processor cores, the TPM increases to 19113 with decrease in the response time from 52ms to 34ms.</li>
<li> TPM &#8211; New-order transactions per minute. It should be noted that the each transaction comprises of about 30 queries, so average response time per query if calculated would be  ~3ms. More details on the &#8220;transaction&#8221; are available in the TPC-C specification  document and DBT2 code base.</li>
<li>The MySQL 6.3 Cluster saturate with fewer number of MySQL servers. For comparison purpose,  we ran the tests with equal number of MySQL servers for both  MySQL Cluster 6.3 and 7.0</li>
</ol>
<h3>Benchmark Description</h3>
<p>Database Test 2 (DBT-2) :  DBT2 is an open source benchmark developed by OSDL (Open Source Development Labs ). Significant updates to the benchmark were made to simplify its ability to run with a clustered database such as MySQL Cluster Carrier Grade Edition. DBT2 simulates a typical OLTP (Online Transaction Processing) application that performs transactions with around ten to twenty SQL statements per transaction within five distinct transaction types. The DBT2 benchmark can be used as a good indicator in regards to the expected performance of any application that performs fairly simple transactions and executes these transactions in a repetitive fashion.</p>
<p>For the benchmark results above, DBT2 and MySQL Cluster were configured as an “in memory” database to simulate typical “real-time” database configurations. It should be noted that performance results are being measured as new-order transactions per minute (TPM).  The changes made to the DBT2 benchmark are documented and can be found on the SourceForge page for DBT2 downloads. It can also be downloaded from ww.iclaustron.com.</p>
<h3>Additional Information:</h3>
<p>More information on MySQL Cluster</p>
<ul>
<li><a href="http://www.mysql.com/why-mysql/white-papers/mysql_wp_cluster7_architecture.php" target="_blank">MySQL Cluster 7 Architecture and New Features</a></li>
<li><a href="http://www.mysql.com/why-mysql/white-papers/mysql_cluster_eval_guide.php" target="_blank">MySQL Cluster Evaluation Guide</a></li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-cluster/mysql-cluster-database-7-performance-benchmark/feed</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
		<item>
		<title>Glimpse of the future &#8211; massively improved JOIN performance for MySQL Cluster</title>
		<link>/mysql-cluster/glimpse-of-the-future-massively-improved-join-performance-for-mysql-cluster</link>
					<comments>/mysql-cluster/glimpse-of-the-future-massively-improved-join-performance-for-mysql-cluster#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 22 Oct 2010 14:46:39 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster CGE]]></category>
		<category><![CDATA[Performance]]></category>
		<guid isPermaLink="false">/?p=1334</guid>

					<description><![CDATA[A great chance to find out about the &#8220;SPJ&#8221; project that&#8217;s under way to improve the performance of complex table JOINs. A free webinar has been scheduled for Thursday, November 04 at 09:00 Pacific time (16:00 UK; 17:00 Central European Time) &#8211; just register for the webinar at mysql.com. Even if you can&#8217;t attend, by]]></description>
										<content:encoded><![CDATA[<div id="attachment_1336" style="width: 290px" class="wp-caption alignright"><a href="/wp-content/uploads/2010/10/SPJ.jpg"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-1336" class="size-medium wp-image-1336" title="SPJ" src="/wp-content/uploads/2010/10/SPJ-280x300.jpg" alt="" width="280" height="300" /></a><p id="caption-attachment-1336" class="wp-caption-text">MySQL Cluster Push-Down Joins</p></div>
<p>A great chance to find out about the &#8220;SPJ&#8221; project that&#8217;s under way to improve the performance of complex table JOINs. A free webinar has been scheduled for Thursday, November 04 at 09:00 Pacific time (16:00 UK; 17:00 Central European Time) &#8211; <a href="http://www.mysql.com/news-and-events/web-seminars/display-583.html" target="_blank">just register for the webinar at mysql.com</a>. Even if you can&#8217;t attend, by registering you&#8217;ll get an email telling you where to watch the replay shortly after the webinar.</p>
<p>MySQL Cluster performance has always been extremely high and scalable when the work load is primarily primary key reads and write but complex JOINS (many tables in the JOIN and/or a large number of results from the first part of the query) have traditionally been much slower than when using other storage engines. Work is underway to address this and SPJ is the name we&#8217;ve been using.</p>
<p>Traditionally, JOINs have been performed as Nested Loop JOINs in the MySQL Server which is fine when all of the data is held there (e.g. MyISAM) but when the data is held externally (in Cluster&#8217;s case, in the data nodes) it can result in a massive amount of messaging. SPJ works by pushing the processing of JOINs down into the data nodes where they can be performed much more efficiently as the data is local.</p>
<p>As well as finding out about the implementation, you&#8217;ll also learn:</p>
<ul>
<li>What queries benefit -&gt; how you might tweak you application to get the biggest benefits</li>
<li>The kind of performance improvements you might expect to see</li>
<li>How to try the (pre-GA!) software for yourself.</li>
</ul>
<p>Note that (as always) Oracle reserves the right to alter the timing and/or existence of new product releases.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-cluster/glimpse-of-the-future-massively-improved-join-performance-for-mysql-cluster/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Upcoming webinar &#8211; MySQL performance tuning best practices</title>
		<link>/mysql-cluster/upcoming-webinar-mysql-performance-tuning-best-practices</link>
					<comments>/mysql-cluster/upcoming-webinar-mysql-performance-tuning-best-practices#comments</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Tue, 26 Jan 2010 15:17:26 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster 7.0]]></category>
		<category><![CDATA[Performance]]></category>
		<category><![CDATA[Performance Tunining]]></category>
		<category><![CDATA[Tuning]]></category>
		<guid isPermaLink="false">/?p=897</guid>

					<description><![CDATA[MySQL Cluster Performance Tuning Best Practices Are you experiencing current performance bottlenecks in your high availability applications ? Are you designing a new mission-critical application and want to know how best to structure your schema and index strategy for optimal performance? Interested in how to transform your SQL into faster, more efficient queries? Then this]]></description>
										<content:encoded><![CDATA[<h3 style="font-size: 1.17em;">MySQL Cluster Performance Tuning Best Practices</h3>
<p>Are you experiencing current performance bottlenecks in your high availability applications ? Are you designing a new mission-critical application and want to know how best to structure your schema and index strategy for optimal performance? Interested in how to transform your SQL into faster, more efficient queries?</p>
<div id="attachment_898" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2010/01/connection_pooling_graph.jpg"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-898" class="size-medium wp-image-898" title="connection_pooling_graph" src="/wp-content/uploads/2010/01/connection_pooling_graph-300x77.jpg" alt="Benefits of connection pooling" width="300" height="77" srcset="/wp-content/uploads/2010/01/connection_pooling_graph-300x77.jpg 300w, /wp-content/uploads/2010/01/connection_pooling_graph-1024x263.jpg 1024w, /wp-content/uploads/2010/01/connection_pooling_graph.jpg 1464w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><p id="caption-attachment-898" class="wp-caption-text">Benefits of connection pooling</p></div>
<p>Then this free web presentation is for you! You will get expert insight and learn best practices to help you identify those areas of database and application design that will give you the greatest benefits for performance when using MySQL Cluster.</p>
<p>We will discuss guidelines and best practices covering the following areas:</p>
<ul>
<li>General Design Concepts and Guidelines</li>
<li>Schema Optimization
<ul>
<li>BLOB/Text vs VARBINARY/VARCHAR</li>
<li>Partition by Key</li>
</ul>
</li>
<li>Index Selection and Tuning</li>
<li>Basic Query Tuning</li>
<li>MySQL Cluster Parameter Tuning Guidelines</li>
<li>Tools to accelerate application development and testing</li>
</ul>
<p>Johan Andersson and Mat Keep will be presenting and I&#8217;ll be helping with the Q&amp;A.</p>
<p>Tuesday, February 2, 2009: 10:00 CET (Central European Time)/ 09:00 UK/GMT.</p>
<p><a href="http://www.mysql.com/news-and-events/web-seminars/display-480.html" target="_blank">Register here at mysql.com</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-cluster/upcoming-webinar-mysql-performance-tuning-best-practices/feed</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>Free MySQL Cluster Performance Tuning webinar &#8211; TODAY!</title>
		<link>/mysql-cluster/free-mysql-cluster-performance-tuning-webinar-today</link>
					<comments>/mysql-cluster/free-mysql-cluster-performance-tuning-webinar-today#comments</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Tue, 03 Nov 2009 13:12:32 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[Optimisation]]></category>
		<category><![CDATA[Optimization]]></category>
		<category><![CDATA[Performance]]></category>
		<guid isPermaLink="false">/?p=643</guid>

					<description><![CDATA[MySQL Cluster Performance Tuning Best Practices Are you experiencing current performance bottlenecks in your high availability applications ? Are you designing a new mission-critical application and want to know how best to structure your schema and index strategy for optimal performance? Interested in how to transform your SQL into faster, more efficient queries? Then this]]></description>
										<content:encoded><![CDATA[<h3 style="font-size: 1.17em;">MySQL Cluster Performance Tuning Best Practices</h3>
<p>Are you experiencing current performance bottlenecks in your high availability applications ? Are you designing a new mission-critical application and want to know how best to structure your schema and index strategy for optimal performance? Interested in how to transform your SQL into faster, more efficient queries?</p>
<p>Then this free web presentation is for you! You will get expert insight and learn best practices to help you identify those areas of database and application design that will give you the greatest benefits for performance when using MySQL Cluster.</p>
<p>We will discuss guidelines and best practices covering the following areas:</p>
<ul>
<li>General Design Concepts and Guidelines</li>
<li>Schema Optimization
<ul>
<li>BLOB/Text vs VARBINARY/VARCHAR</li>
<li>Partition by Key</li>
</ul>
</li>
<li>Index Selection and Tuning</li>
<li>Basic Query Tuning</li>
<li>MySQL Cluster Parameter Tuning Guidelines</li>
<li>Tools to accelerate application development and testing</li>
</ul>
<p>Johan Andersson and Mat Keep will be presenting and myself and Alex Yu handling the Q&amp;A.</p>
<p>Tuesday, November 03, 2009: 10:00 Pacific time (America)</p>
<p style="padding-left: 30px; ">Tue, Nov 03: 	08:00 Hawaii time</p>
<p>Tue, Nov 03: 	11:00 Mountain time (America)</p>
<p>Tue, Nov 03: 	12:00 Central time (America)</p>
<p>Tue, Nov 03: 	13:00 Eastern time (America)</p>
<p>Tue, Nov 03: 	18:00 UTC</p>
<p>Tue, Nov 03: 	18:00 Western European time</p>
<p>Tue, Nov 03: 	19:00 Central European time</p>
<p>Tue, Nov 03: 	20:00 Eastern European time</p>
<p><a href="http://www.mysql.com/news-and-events/web-seminars/display-453.html" target="_blank">Register here</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-cluster/free-mysql-cluster-performance-tuning-webinar-today/feed</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
	</channel>
</rss>
