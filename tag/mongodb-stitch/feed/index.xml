<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>MongoDB Stitch &#8211; Andrew Morgan on Databases</title>
	<atom:link href="/tag/mongodb-stitch/feed" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Database technologies - especially around scalability and High Availability</description>
	<lastBuildDate>Thu, 28 Mar 2019 09:54:35 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>How to create Dynamic Custom Roles with MongoDB Stitch</title>
		<link>/mongodb/how-to-create-dynamic-custom-roles-with-mongodb-stitch</link>
					<comments>/mongodb/how-to-create-dynamic-custom-roles-with-mongodb-stitch#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Thu, 28 Mar 2019 09:54:35 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Stitch]]></category>
		<category><![CDATA[serverless]]></category>
		<guid isPermaLink="false">/?p=4566</guid>

					<description><![CDATA[None of us want to write lots of code to control what data each user can access. In most cases, you can set up your data access controls in seconds by using Stitch&#8217;s built-in templates, e.g., &#8220;Users can read and write their own data&#8221; or &#8220;Users can read and write their own data. Users that]]></description>
										<content:encoded><![CDATA[<p>None of us want to write lots of code to control what data each user can access. In most cases, you can set up your data access controls in seconds by using <a href="https://docs.mongodb.com/stitch/mongodb/define-roles-and-permissions/#select-a-collection-rule-template" title="Stitch includes templates to control what data a user can access">Stitch&#8217;s built-in templates</a>, e.g., &#8220;Users can read and write their own data&#8221; or &#8220;Users can read and write their own data. Users that belong to a sharing list can read that data&#8221;. Stitch also lets you create <a href="https://docs.mongodb.com/stitch/mongodb/define-roles-and-permissions/#define-the-role-s-apply-when-condition" title="Define your own criteria to identify a MongoDB Stitch role">custom roles</a> that you tailor to your application and schema – this post creates such a rule, querying a second collection when deciding whether to allow a user to insert a document.</p>
<p>The application is a troll-free timeline where you can only tag another user in a post if that user has labeled you as a trusted friend. I&#8217;ve already created a database called <code>safeplace</code> for the collections.</p>
<p>The <code>users</code> collection includes a list of usernames for their trusted friends (<code>peopleWhoCanTagMe</code>):</p>
<pre><code class="js">{
    "_id" : ObjectId("5c9273127558d01d93f53dc0"),
    "username" : "alovelace",
    "name" : {
        "first" : "Ada",
        "last" : "Lovelace"
    },
    "peopleWhoCanTagMe" : [
        "jeckert",
        "jmauchly"
    ]
}
</code></pre>
<p>You then need to create a data access rule for the <code>posts</code> collection, consisting of 2 roles, which Stitch evaluates in sequence:</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/Create-Rules-nzrr0dasb3.png" alt="Creating custom roles for Stitch data access control rules" /></p>
<p>The second, <code>anyReader</code>, role lets anyone read any post, but the role we care about is <code>allowedTagger</code> which controls what the application can write to the collection.</p>
<p>The <code>allowedTagger</code> role is defined using this <a href="https://docs.mongodb.com/stitch/services/json-expressions/" title="JSON expressions to identify MongoDB Stitch roles">JSON expression</a>:</p>
<pre><code class="js">{
  "%%true": {
    "%function": {
      "name": "canTheyTag",
      "arguments": [
        "%%root.poster",
        "%%root.tagged"
      ]
    }
  }
}
</code></pre>
<p><code>%%root</code> represents the document that the user is attempting to insert. The <code>poster</code> and <code>tagged</code> attributes of the document to be written are the usernames of the author and their claimed friend. The JSON expression passes them as parameters to a <a href="https://docs.mongodb.com/stitch/functions/" title="Creating a serverless function in MongoDB Stitch">Stitch function</a> named <code>canTheyTag</code>:</p>
<pre><code class="js">exports = function(poster, tagged){
  var collection = context.services.get("mongodb-atlas")
    .db("safeplace").collection("users");
  return collection.findOne({username: tagged})
  .then ( userDoc =&gt; { 
    return (userDoc.peopleWhoCanTagMe.indexOf(poster) &gt; -1);
  }).catch( e =&gt; { console.log(e); return false; }); 
};
</code></pre>
<p>This searches the <code>users</code> collection for the tagged user and then checks that the poster&#8217;s username appears in the <code>peopleWhoCanTagMe</code> array in the retrieved document.</p>
<p>You can test this new rule using the <code>mongo</code> shell (courtesy of <a href="https://docs.mongodb.com/stitch/mongodb/connect-over-the-wire-protocol/" title="Connect to MongoDB Stitch using any MongoDB tool or connector using the MongoDB wire protocol">Stitch&#8217;s MongoDB Connection String feature</a>). Initially, I&#8217;m not included in Ada&#8217;s list of friends and so trying to tag her in a post fails:</p>
<pre><code class="js">db.posts.insert({ 
    poster: "amorgan", 
    tagged: "alovelace", 
    post: "Just sent you a pull request" })

WriteCommandError({ "ok" : 0, "errmsg" : "insert not permitted" })
</code></pre>
<p>The logs show that the insert didn&#8217;t match our customer role but that it did match the second (<code>anyReader</code>), but that inserts aren&#8217;t allowed for that role:</p>
<pre><code>Logs:
[
  "uncaught promise rejection: StitchError: insert not permitted"
]
Error:
role anyReader does not have insert permission
Stack Trace:
StitchError: insert not permitted
{
  "name": "insertOne",
  "service": "mongodb-atlas"
}
Compute Used: 936719 bytes•ms
</code></pre>
<p>Ada then adds me as a trusted friend:</p>
<pre><code class="js">db.users.update(
    {username: "alovelace"}, 
    {$push: {peopleWhoCanTagMe: "amorgan"}}
)
</code></pre>
<p>My second attempt to tag her in a post succeeds:</p>
<pre><code class="js">db.posts.insert({
    poster: "amorgan", 
    tagged: "alovelace", 
    post: "Just sent you a pull request" })

WriteResult({ "nInserted" : 1 })
</code></pre>
<p>I recently had someone ask me how to implement &#8220;traditional database roles&#8221; using Stitch, i.e. an administrator explicitly defines which user ids belong to a specific role, and then use that role to determine whether they can access a collection. You can use this same approach for that use case – have a collection that assigns users to roles and then find the user id in that collection from a Stitch function that&#8217;s used in roles for the collections you want to protect. You could then optimize the rules by including the users&#8217; roles as an attribute in their authentication token – but I&#8217;ll save that for a future post!</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/how-to-create-dynamic-custom-roles-with-mongodb-stitch/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Replace tedious coding with MongoDB Stitch and public APIs</title>
		<link>/mongodb/replace-tedious-coding-with-mongodb-stitch-and-public-apis</link>
					<comments>/mongodb/replace-tedious-coding-with-mongodb-stitch-and-public-apis#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Mon, 14 Jan 2019 13:37:07 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Stitch]]></category>
		<category><![CDATA[rest api]]></category>
		<guid isPermaLink="false">/?p=4561</guid>

					<description><![CDATA[Most apps and websites contain much functionality that&#8217;s tedious to implement and has been done thousands of times before. MongoDB Stitch takes care of a lot of these chores – for example, making it simple to interact with third-party APIs. This post explains how I used Stitch to do just that that this week. I]]></description>
										<content:encoded><![CDATA[<p>Most apps and websites contain much functionality that&#8217;s tedious to implement and has been done thousands of times before. <a href="https://docs.mongodb.com/stitch/" title="MongoDB Stitch serverless platform">MongoDB Stitch</a> takes care of a lot of these <a href="https://www.mongodb.com/blog/post/mongodb-stitch--saving-developers-from-chores?jmp=blog" title="MongoDB Stitch – saving developers from chores">chores</a> – for example, making it simple to interact with third-party APIs. This post explains how I used Stitch to do just that that this week.</p>
<p>I recently described how I <a href="https://www.mongodb.com/blog/post/taking-an-existing-website-serverless-with-mongodb-stitch-hosting?jmp=blog" title="From Legacy Website to Serverless with MongoDB Stitch Hosting">ported my legacy website to Stitch</a>. After reading that post, one of our Paris Solution Architects spotted that there was a bug in how I was validating phone numbers in my forms (specific to France&#8217;s dialling plan). I was about to go into my code to tweak the regular expressions to cope with French phone numbers. However, what if there was another country with odd rules? What if the rules changed?</p>
<p>It then struck me that this is precisely the kind of chore that I should use Stitch to replace – being an expert in regular expressions and country-specific dialling plans wasn&#8217;t going to make the experience any better for my users, and so I should contract it out to &#8220;someone&#8221; else.</p>
<p>A quick Google later, and I&#8217;d settled on the <a href="https://numverify.com/">NumVerify service</a> which provides an API to validate phone numbers and add some extra information such as the type of line and the same number in full international format.</p>
<p>To access the NumVerify API, I needed to create a Stitch <a href="https://docs.mongodb.com/stitch/services/http/" title="The Stitch HTTP Service is a generic interface that enables you to communicate with any service that is available over HTTP, such as those that provide a REST API">HTTP service</a>. I named the service <code>apiplayer.net</code> and created a rule to allow the service to access the required domain (<code>apiplayer.net</code>) using <code>GET</code> requests:</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/Stitch_http_service_rule-5ghtmajuru.png" alt="Creating an HTTP Service rule in MongoDB Stitch to access REST APIs" /></p>
<p>Then I can call use that service from a new <a href="https://docs.mongodb.com/stitch/functions/define-a-function/" title="MongoDB Stitch Functions allow you to define and execute server-side logic for your application">Stitch Function</a> (<code>verifyPhoneNumber</code>):</p>
<pre><code class="js">exports = function(phoneNumber){
  const APIKey = context.values.get("numverifyAPIKey");
  const http = context.services.get("numverify");
  const url = "http://apilayer.net/api/validate?access_key=" + APIKey + "&amp;number=" + phoneNumber + "&amp;country_code=&amp;format=1";
  var validationResults;

  return http.get({"url": url})
  .then((resp) =&gt; {
      const result = EJSON.parse(resp.body.text());
      if (result.valid) {
        console.log(result.international_format);
        return result;
      } else {
        console.log(result.number + " is not a valid phone number");
        return {valid: false};
      }
    },
    (error) =&gt; {
      console.log("Verification failed: " + error);
      return {valid: false};
    }
  );
};
</code></pre>
<p>Note that <code>numverifyAPIKey</code> is a <a href="https://docs.mongodb.com/stitch/values/" title="Values are named constants that you can use in MongoDB Stitch functions and rules">Stitch Value</a> that I&#8217;ve set to the API key I received when registering with NumVerify.</p>
<p>A typical (successful) result from this function looks like:</p>
<pre><code class="js">{
  "valid": true,
  "number": "448449808001",
  "local_format": "08449808001",
  "international_format": "+448449808001",
  "country_prefix": "+44",
  "country_code": "GB",
  "country_name": "United Kingdom of Great Britain and North",
  "location": "",
  "carrier": "",
  "line_type": "special_services"
}
</code></pre>
<p>The JavaScript running in the browser now executes the Stitch Function:</p>
<pre><code class="js">function validatePhone (inputField, helpText) {
  return new Promise(function(resolve, reject) {
    if (!validateNonEmpty (inputField, helpText)) {resolve(false)} else {
      const client = stitch.Stitch.defaultAppClient;
      client.callFunction("verifyPhoneNumber", [inputField.value]).then(
      result =&gt; {
        if (result.valid) {
          inputField.value = result.international_format;
          resolve(true);
        } else {
          helpText.innerHTML = 
            '&lt;span class="english_material" lang="en"&gt;Phone number is invalid."&lt;/span&gt;\
             &lt;span class="french_material" lang="fr"&gt;Le numéro de téléphone est invalide.&lt;/span&gt;';
             resolve(false);
        }
      }),(
      error =&gt; {
        helpText.innerHTML = 
          '&lt;span class="english_material" lang="en"&gt;Phone number validation failed, but you can submit anyway."&lt;/span&gt;\
           &lt;span class="french_material" lang="fr"&gt;La validation du numéro de téléphone a échoué, mais vous pouvez quand même soumettre.&lt;/span&gt;';
        // Not going to reject the form request just because the cloud service
        // is unavailable
        resolve(true);
      });
    }
  })   
}
</code></pre>
<p>NumVerify is as flexible as possible in accepting phone numbers in different formats. It also sets the resulting <code>international_format</code> field to a fully formatted international number – I use that to replace the user-provided number in the form, ensuring that all numbers stored in Atlas are in the same format. In one swoop, I&#8217;ve ripped out my spaghetti regular expression code, made the validations more robust, and added a new feature (normalizing the phone numbers before I store them) – result!</p>
<p>See the results at <a href="https://stitch.oleronvilla.com/">stitch.oleronvilla.com</a>, but please don&#8217;t judge my code, I still need to delegate a lot more to Stitch and other services!</p>
<p>Creating your first Stitch app? Start with one of the <a href="https://docs.mongodb.com/stitch/tutorials/" title="MongoDB Stitch serverless platform – tutorials">Stitch tutorials</a>.</p>
<p>Want to learn more about MongoDB Stitch? Read the <a href="https://www.mongodb.com/collateral/mongodb-stitch-serverless-platform?jmp=blog" title="MongoDB Stitch serverless platform architecture white paper">white paper</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/replace-tedious-coding-with-mongodb-stitch-and-public-apis/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>From Legacy Website to Serverless with MongoDB Stitch Hosting</title>
		<link>/mongodb/from-legacy-website-to-serverless-with-mongodb-stitch-hosting</link>
					<comments>/mongodb/from-legacy-website-to-serverless-with-mongodb-stitch-hosting#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Mon, 07 Jan 2019 12:12:22 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Stitch]]></category>
		<guid isPermaLink="false">/?p=4558</guid>

					<description><![CDATA[From the start, Stitch has been great at serving up dynamic content and interacting with backend services. There was just one piece missing that meant that you still needed an app server or hosting service – storing and serving up your static assets (index.html, style.css, logo.png, etc.). The recent addition of Stitch Hosting, currently in]]></description>
										<content:encoded><![CDATA[<p>From the start, <a href="https://docs.mongodb.com/stitch/" title="MongoDB Stitch serverless platform">Stitch</a> has been great at serving up dynamic content and interacting with backend services. There was just one piece missing that meant that you still needed an app server or hosting service – storing and serving up your static assets (<code>index.html</code>, <code>style.css</code>, <code>logo.png</code>, etc.). The recent addition of <a href="https://docs.mongodb.com/stitch/hosting/" title="MongoDB Stitch static file hosting">Stitch Hosting</a>, currently in beta, fixes that!</p>
<p>Following the <a href="https://en.wikipedia.org/wiki/Eating_your_own_dog_food" title="Eating your own dog food">dogfooding principle</a>, I decided to try porting one of my existing websites to Stitch (the site is for renting out our holiday home). Now, this isn’t some newfangled website with all the latest bells and whistles. I&#8217;d built the original site before the serverless and mobile-first movements took off; using PHP in the backend and JavaScript/JQuery in the frontend. The vast majority of the porting effort went into replacing the backend PHP code with frontend JavaScript. Once that was done, porting it to Stitch was a breeze.</p>
<p>Step 1 was to enable Hosting through the Stitch UI and upload the (907) static files. You can upload all the files manually through the UI, but here&#8217;s a pro-tip, you can perform a bulk upload using the <a href="https://docs.mongodb.com/stitch/import-export/" title="MongoDB Stitch import/export API">Stitch CLI</a>:</p>
<pre><code>stitch-cli import --include-hosting --strategy=replace
</code></pre>
<p>When I made further edits, I used the Stitch UI to upload the modified files:</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/Upload_Files-gkhcm9f8ur.png" alt="Upload modified static files through the MongoDB Stitch UI" /></p>
<p>When users submitted forms on the original site, I was sent an email via GoDaddy&#8217;s temperamental <code>gdform.php</code> script (which writes the data to a local file, which GoDaddy&#8217;s <code>cron</code> job may eventually process to send the email), and I was looking forward to ripping that out and using <a href="https://www.mongodb.com/cloud/stitch" title="Use the MongoDB query language directly from your frontend code using MongoDB Stitch QueryAnywhere">Stitch QueryAnywhere</a> instead. The frontend code to store the data in MongoDB is straightforward:</p>
<pre><code class="js">function addBooking (booking) {
    const client = stitch.Stitch.initializeDefaultAppClient('oleronvilla-xxxxx');
    const db = client.getServiceClient(stitch.RemoteMongoClient.factory, 
        'mongodb-atlas').db('oleron');
    const collection = db.collection('bookings');

    return client.auth.loginWithCredential(
            new stitch.AnonymousCredential()).then(user =&gt; {
        return collection.insertOne({owner_id: client.auth.user.id, 
                                    bookingRequest: booking})
            .catch(err =&gt; console.error(err.message))});
}
</code></pre>
<p>So that safely stores the user-submitted data in MongoDB. The next step was to bring the site into the 1990s by having it send me a text message with the submitted data. I could have gone back to the frontend code to send the data to a Stitch Function (in addition to writing it to Atlas), but, as my legacy frontend code is somewhat &#8216;fragile&#8217;, I prefer to make as few changes there as possible. <a href="https://docs.mongodb.com/stitch/triggers/" title="Database Triggers for MongoDB with MongoDB Stitch Triggers">Stitch Triggers</a> to the rescue! I created a new <a href="https://docs.mongodb.com/stitch/functions/define-a-function/" title="MongoDB Stitch serverless functions">Stitch Function</a> (<code>textReservation</code>) to send the form data to Twilio:</p>
<pre><code class="js">exports = function(event) {
    const twilio = context.services.get("TwilioText");
    const request = event.fullDocument.bookingRequest;
    const body = "New booking from "
      + request.name.first + " " + request.name.last
      + " for these weeks: " + request.requestedDates.toString() + ". "
      + "Call on " + request.contact.phone
      + " or email " + request.contact.email + ". "
      + "Comment: " + request.comments;
    twilio.send({
        to: context.values.get("phoneNumber"),
        from: context.values.get("twilioNumber"),
        body: body
    }); 
};
</code></pre>
<p>The final step was to link this function to a Stitch Trigger which fires whenever Stitch QueryAnywhere adds a new document to the <code>oleron.bookings</code> collection:</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/MongoDB_Stitch_Trigger-pn6xfnt3k5.png" alt="Create a MongoDB Stitch Trigger" /></p>
<p>Note that I used the <a href="https://docs.mongodb.com/stitch/hosting/use-a-custom-domain-name/" title="Use your own domain names with MongoDB Stitch Hosting">Stitch option to bring my own domain name</a>. See the results at <a href="https://stitch.oleronvilla.com/">stitch.oleronvilla.com</a>, but please don&#8217;t judge my code!</p>
<p>Creating your first Stitch app? Start with one of the <a href="https://docs.mongodb.com/stitch/tutorials/" title="MongoDB Stitch serverless platform – tutorials">Stitch tutorials</a>.</p>
<p>Want to learn more about MongoDB Stitch? Read the <a href="https://www.mongodb.com/collateral/mongodb-stitch-serverless-platform" title="MongoDB Stitch serverless platform architecture white paper">white paper</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/from-legacy-website-to-serverless-with-mongodb-stitch-hosting/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MongoDB Stitch Triggers &#038; Amazon Kinesis – The AWS re:Invent Stitch Rover Demo</title>
		<link>/mongodb/mongodb-stitch-triggers-amazon-kinesis-the-aws-reinvent-stitch-rover-demo</link>
					<comments>/mongodb/mongodb-stitch-triggers-amazon-kinesis-the-aws-reinvent-stitch-rover-demo#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Tue, 18 Dec 2018 15:21:26 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[AWS]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Mobile]]></category>
		<category><![CDATA[MongoDB Stitch]]></category>
		<guid isPermaLink="false">/?p=4555</guid>

					<description><![CDATA[This post delves into using MongoDB Stitch Triggers and the Stitch AWS service to push MongoDB database changes to Amazon Kinesis. This is the fifth and final article in a series of blog posts examining how the MongoDB Mobile/Stitch-controlled rover was put together for our AWS re:Invent demo. Stitch has simple, built-in integration with AWS]]></description>
										<content:encoded><![CDATA[<p>This post delves into using <a href="https://docs.mongodb.com/stitch/triggers/" title="MongoDB Stitch database triggers">MongoDB Stitch Triggers</a> and the <a href="https://docs.mongodb.com/stitch/services/aws/" title="Using AWS services such as Kinesis through MongoDB Stitch">Stitch AWS service</a> to push MongoDB database changes to <a href="https://aws.amazon.com/kinesis/" title="Amazon Kinesis – Easily collect, process, and analyze video and data streams in real time">Amazon Kinesis</a>. This is the fifth and final article in a <a href="https://www.mongodb.com/blog/post/mongodb-stitchmobile-mars-rover-lands-at-aws-reinvent" title="MongoDB Mobile, MongoDB Stitch, and AWS Kinesis-powered MongoDB rover debuted at AWS re:Invent">series of blog posts</a> examining how the <a href="https://docs.mongodb.com/stitch/mongodb/mobile-overview/" title="MongoDB Mobile embedded database">MongoDB Mobile</a>/<a href="https://docs.mongodb.com/stitch/" title="MongoDB Stitch serverless platform">Stitch</a>-controlled rover was put together for our AWS re:Invent demo.</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/Stitch_Rover_Triggers-zhgkadsgbn.jpg" alt="Sensor data from MongoDB Stitch Rover is pushed to Amazon Kinesis" /></p>
<p>Stitch has simple, built-in integration with AWS services, letting you call services like Kinesis from Stitch Functions using syntax similar to the AWS SDK. To start, we configure a new AWS service in Stitch using an IAM role from AWS and then create a new Stitch Service rule to enable Kinesis:</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/Kinesis-uijqi4mcb2.png" alt="Configure the Amazon Kinesis through the MongoDB Stitch AWS Service" /></p>
<p>We then need a <a href="https://www.mongodb.com/blog/post/mongodb-stitch-functions--the-aws-reinvent-stitch-rover-demo" title="MongoDB Stitch Functions – The AWS re:Invent Stitch Rover Demo">Stitch Function</a> (<code>kinesisTrigger</code>) to put our rover&#8217;s sensor data onto a Kinesis stream. Note that the sensor data is taken from the <code>event</code> function argument (we&#8217;ll get to that in a second):</p>
<pre><code class="js">exports = function(event){
  const awsService = context.services.get('aws');
  const roverId = event.fullDocument.roverId;
  try{
    awsService.kinesis("us-west-2").PutRecord({
      Data: JSON.stringify(event.fullDocument), 
      StreamName: context.values.get("Stream"),
      PartitionKey: context.values.get("Partitions")[roverId]
    }).then(function(response) {
      return response;
    });

    console.log("Successfully put the following document into the " +
      context.values.get("Stream") + " Kinesis stream: " + 
             EJSON.stringify(event.fullDocument));
  }catch(error){
    console.log(error);
  }
};
</code></pre>
<p>As the rover will sometimes be disconnected from the network, it stores the readings locally in the MongoDB Mobile database. Stitch Mobile Sync will then sync these same documents to Atlas whenever it&#8217;s online.</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/Stitch_Rover_Triggers-9hlm2bvu59.png" alt="Propagating sensor data to Amazon Kinesis using MongoDB Stitch Mobile Sync, Stitch Triggers, and a Stitch Function" /></p>
<p>We&#8217;ve configured the <code>kinesisTrigger</code> trigger to fire whenever a new document is added to the <code>rover.sensors</code> collection. The trigger calls the linked function <code>KinesisTrigger</code> (the trigger and function names don&#8217;t need to match), passing the inserted document as a function argument. From the time that the Stitch Trigger is hit, it typically takes just 20ms to get the data into Kinesis.</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/Stitch_Trigger-t2sn0ph04l.png" alt="Creating a MongoDB Database Trigger using Stitch Triggers" /></p>
<p>This completes the blog series. As a reminder, this is what we&#8217;ve covered in the five posts:<br />
&#8211; <a href="https://www.mongodb.com/blog/post/mongodb-stitchmobile-mars-rover-lands-at-aws-reinvent" title="MongoDB Stitch, MongoDB Mobile, Atlas, Android Things, a Raspberry Pi, and Amazon Kinesis are used to control reliably control our Mars rover">MongoDB Stitch/Mobile Mars Rover Lands at AWS re:Invent</a> describes how MongoDB Stitch, MongoDB Mobile, Atlas, Android Things, a Raspberry Pi, and Amazon Kinesis are used to reliably control our Mars rover.<br />
&#8211; <a href="https://www.mongodb.com/blog/post/mongodb-stitch-queryanywhere--the-aws-reinvent-stitch-rover-demo" title="calling the Stitch SDK directly from the frontend app">MongoDB Stitch QueryAnywhere</a> focuses on how the Mission Control app records the user commands in MongoDB Atlas by calling the Stitch SDK directly from the frontend code.<br />
&#8211; <a href="https://www.mongodb.com/blog/post/mongodb-stitch-mobile-sync--the-aws-reinvent-stitch-rover-demo" title="Stitch Mobile Sync synchronizes data between MongoDB Atlas and MongoDB Mobile">MongoDB Stitch Mobile Sync</a> shows how Stitch Mobile Sync synchronizes the user commands written to MongoDB Atlas by the Mission Control app with the MongoDB Mobile database embedded in the rover (and how it syncs the data back to Atlas when it&#8217;s updated in MongoDB Mobile).<br />
&#8211; <a href="https://www.mongodb.com/blog/post/mongodb-stitch-functions--the-aws-reinvent-stitch-rover-demo" title="Using Stitch Functions to provide aggregated sensor data">MongoDB Stitch Functions</a> focuses on how a Stitch Function is used to provide aggregated sensor data such as the average temperature for the last 5 minutes.<br />
&#8211; <a href="https://www.mongodb.com/blog/post/mongodb-stitch-triggers--amazon-kinesis--the-aws-reinvent-stitch-rover-demo" title="MongoDB Stitch and Amazon AWS Kinesis">MongoDB Stitch Triggers &amp; Amazon Kinesis</a> shows how we use MongoDB Stitch Triggers and the Stitch AWS service to push MongoDB database changes to Amazon Kinesis.</p>
<p>You can find all of the code in the <a href="https://github.com/drewdipalma/stitch-car" title="Powered by MongoDB Mobile, MongoDB Stitch, and AWS Kinesis – the MongoDB Rover ">Stitch Rover GitHub repo</a>.</p>
<p>Why not <a href="https://docs.mongodb.com/stitch/tutorials/" title="MongoDB Stitch Tutorials">try Stitch out for yourself</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/mongodb-stitch-triggers-amazon-kinesis-the-aws-reinvent-stitch-rover-demo/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MongoDB Stitch Functions – The AWS re:Invent Stitch Rover Demo</title>
		<link>/mongodb/mongodb-stitch-functions-the-aws-reinvent-stitch-rover-demo</link>
					<comments>/mongodb/mongodb-stitch-functions-the-aws-reinvent-stitch-rover-demo#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Mon, 17 Dec 2018 15:35:32 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[AWS]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Mobile]]></category>
		<category><![CDATA[MongoDB Stitch]]></category>
		<guid isPermaLink="false">/?p=4553</guid>

					<description><![CDATA[This is the fourth in a series of blog posts examining how the MongoDB Mobile/Stitch-controlled rover was put together for our re:Invent demo. This post focuses on how a Stitch Function is used to provide aggregated sensor data such as the average temperature for the last 5 minutes. A common question we were asked at]]></description>
										<content:encoded><![CDATA[<p>This is the fourth in a <a href="https://www.mongodb.com/blog/post/mongodb-stitchmobile-mars-rover-lands-at-aws-reinvent" title="MongoDB Mobile, MongoDB Stitch, and AWS Kinesis-powered MongoDB rover debuted at AWS re:Invent">series of blog posts</a> examining how the  <a href="https://docs.mongodb.com/stitch/mongodb/mobile-overview/" title="MongoDB Mobile embedded database">MongoDB Mobile</a>/<a href="https://docs.mongodb.com/stitch/" title="MongoDB Stitch serverless platform">Stitch</a>-controlled rover was put together for our re:Invent demo. This post focuses on how a <a href="https://docs.mongodb.com/stitch/functions/" title="MongoDB Stitch serverless functions">Stitch Function</a> is used to provide aggregated sensor data such as the average temperature for the last 5 minutes.</p>
<p>A common question we were asked at re:Invent is how Stitch&#8217;s serverless Functions compare with AWS Lambda functions. Stitch functions are designed to be very light-weight (run as <a href="https://golangbot.com/goroutines">Goroutines</a> and deliver low latency – ideal, for example, when working with a database (especially as your function has a persistent MongoDB connection). In contrast, Lambda functions are more heavy-weight (Lambda spins up containers to run your functions in) – better suited to compute-heavy operations.</p>
<p>You write your functions in JavaScript (ES6) through the Stitch UI or the command line. We created this function (<code>getReadings</code>) to fetch a rover&#8217;s sensor data for the specified interval and then return the computed average, minimum, and maximum values:</p>
<pre><code class="js">exports = function(roverId, start, end){
  const mdb = context.services.get('mongodb-atlas');
  const sensors = mdb.db("Rovers").collection("Sensors");

  return sensors.find({"id": roverId, "time":{"$gt":start,"$lt":end}})
    .toArray()
    .then(readings =&gt; {
     let data = objArray.map(readings =&gt; readings.reading);
     return {"Average": data.reduce((a,b) =&gt; a + b, 0) / data.length,
        "Min": Math.min(...readings),
        "Max": Math.max(...readings)};
  });
};
</code></pre>
<p>This function can then be called from your app frontend code:</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/Stitch_Rover_Functions-evgltamu83.png" alt="Calling a MongoDB Stitch Function from a client frontend" /></p>
<p>The frontend code to run this function is as simple as this:</p>
<pre><code class="js">context.functions.execute("getReadings", myId, samplePeriod.start, 
    samplePeriod.end);
</code></pre>
<p>There&#8217;s a lot more that you can do in functions, such as sending data to another cloud service. You&#8217;ll see an example of this in the next post which shows how a <a href="https://docs.mongodb.com/stitch/triggers/" title="MongoDB Stitch database triggers">Stitch Trigger</a> calls a Stitch function to send MongoDB Atlas data to <a href="https://docs.mongodb.com/stitch/services/aws/" title="Using AWS services such as Kinesis through MongoDB Stitch">AWS Kinesis</a>.</p>
<p>If you can&#8217;t wait then you can find all of the code in the <a href="https://github.com/drewdipalma/stitch-car" title="Powered by MongoDB Mobile, MongoDB Stitch, and AWS Kinesis – the MongoDB Rover ">Stitch Rover GitHub repo</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/mongodb-stitch-functions-the-aws-reinvent-stitch-rover-demo/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MongoDB Stitch Mobile Sync – The AWS re:Invent Stitch Rover Demo</title>
		<link>/mongodb/mongodb-stitch-mobile-sync-the-aws-reinvent-stitch-rover-demo-2</link>
					<comments>/mongodb/mongodb-stitch-mobile-sync-the-aws-reinvent-stitch-rover-demo-2#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Thu, 13 Dec 2018 14:03:39 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Mobile]]></category>
		<category><![CDATA[MongoDB Stitch]]></category>
		<guid isPermaLink="false">/?p=4551</guid>

					<description><![CDATA[At AWS re:Invent, we demonstrated how MongoDB Mobile, MongoDB Stitch, and AWS services could be used to build a cloud-controlled Mars rover – read the overview post for the setup. This post focuses on how Stitch Mobile Sync synchronizes the user commands written to MongoDB Atlas by the Mission Control app with the MongoDB Mobile]]></description>
										<content:encoded><![CDATA[<p>At AWS re:Invent, we demonstrated how <a href="https://docs.mongodb.com/stitch/mongodb/mobile-overview/" title="MongoDB Mobile embedded database">MongoDB Mobile</a>, <a href="https://docs.mongodb.com/stitch/" title="MongoDB Stitch serverless platform">MongoDB Stitch</a>, and AWS services could be used to build a cloud-controlled Mars rover – read the <a href="https://www.mongodb.com/blog/post/mongodb-stitchmobile-mars-rover-lands-at-aws-reinvent" title="Powered by MongoDB Mobile, MongoDB Stitch, and AWS Kinesis, the MongoDB Rover ">overview post</a> for the setup. This post focuses on how <a href="https://docs.mongodb.com/stitch/mongodb/mobile/build-sync/" title="MongoDB Stitch Mobile Sync">Stitch Mobile Sync</a> synchronizes the user commands <a href="https://www.mongodb.com/blog/post/mongodb-stitch-mobile-sync--the-aws-reinvent-stitch-rover-demo">written to MongoDB Atlas by the Mission Control app</a> with the MongoDB Mobile database embedded in the rover (and how it syncs the data back to Atlas when it&#8217;s updated in MongoDB Mobile).</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/Rover_Stitch_Mobile_Sync-50ptpw9fgw.jpg" alt="MongoDB Stitch Rover - Stitch Mobile Sync" /></p>
<p>Many people who took part in the demo at re:Invent asked why Mission Control wrote the commands to Atlas rather than sending them directly to the rover. The reason is that you can&#8217;t guarantee that the rover will always have network access (and when thousands descended on the expo hall for the Monday evening social, we learned that maintaining a connection over conference WiFi can be just as tricky as maintaining one to Mars). The commands are stored in Atlas and then synchronized to the rover whenever it&#8217;s online.</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/Stitch_mobile_sync-6k0erml9kv.png" alt="Stitch Mobile Sync architecture" /></p>
<p>Each rover has a single document in the <code>rover.rovers</code> collection, and each command is stored as an element in the <code>moves</code> array:</p>
<pre><code>{
  "_id" : "5bee1053fdc728f2623e20eb",
  "moves" : [
    {
      "_id" : "5c0e4db5119f6e36c7d06f55",
      "angle" : 90,
      "speed" : 2
    },
    {
      "_id" : "5c0e4dbc119f6e36c7d06f56",
      "angle" : 118,
      "speed" : 3
    },
    {
      "_id" : "5c0e4dc3119f6e36c7d06f57",
      "angle" : 45,
      "speed" : -1
    }
  ],
  "__stitch_sync_version" : {
    "spv" : 1,
    "id" : "2f704b04-2338-4c75-a7cf-d555c94cb556",
    "v" : NumberLong(10313)
  }
}
</code></pre>
<p>Stitch Mobile sync automatically pushes the document to the rover&#8217;s MongoDB Mobile database, and the rover&#8217;s Android app moves the rover in response. Once a move command has been acted on, the app removes it from the array and updates the document in MongoDB Mobile. Stitch Mobile Sync then automatically pushes the change back to Atlas:</p>
<pre><code class="java">doMove(move);
final Document update = new Document("$pull", new Document("moves",
                new Document("_id", move.getId())));
rovers.sync().updateOne(getRoverFilter(), update).addOnCompleteListener(task -&gt; {
  if (!task.isSuccessful()) {
    Log.d(TAG, "failed to update rover document", task.getException());
  }
  try {
    Thread.sleep(MOVE_LOOP_WAIT_TIME_MS);
  } catch (InterruptedException e) {
    e.printStackTrace();
  }
  moveLoop();
}
</code></pre>
<p>You may have noticed that the same document is being updated in both Atlas and MongoDB Mobile, raising the possibility of conflicts. A conflict occurs when the document is updated in one database and, before that change has been synced, the same document is updated in the second. Sketchy network connectivity increases the size of the window where this can happen and that makes conflicts more likely.</p>
<p>Fortunately, Stitch Mobile Sync allows the client application to register a conflict handler function. The function is passed both versions of the document and can decide what the &#8216;winning&#8217; document should look like. The conflict handling could be as simple as &#8220;local wins&#8221;, but in this case, we take the remote document (which contains at least one command not yet added to the local database) and remove any commands that have already been acted on:</p>
<pre><code class="java">public class RoverActivity extends Activity 
  implements ConflictHandler&lt;Rover&gt; {

  @Override
  public Rover resolveConflict(
    final BsonValue documentId,
    final ChangeEvent&lt;Rover&gt; localEvent,
    final ChangeEvent&lt;Rover&gt; remoteEvent
    ) {
    if (localEvent.getFullDocument().getLastMoveCompleted() == null) {
      return remoteEvent.getFullDocument();
    }
    // Given this sync model consists of a single producer and a
    // single consumer, a conflict can only occur when a production
    // and consumption happens at the same "time". That means
    // that there should always be an overlap of moves during a 
    // conflict and that the last move completed is always present
    // in the remote. Therefore we should trim all moves up to
    // and including the last completed move.
    final Rover localRover = localEvent.getFullDocument();
    final String lastMoveCompleted = localRover.getLastMoveCompleted();
    final Rover remoteRover = remoteEvent.getFullDocument();
    final List&lt;Move&gt; nextMoves = new ArrayList&lt;&gt;(remoteRover
      .getMoves().size());
    boolean caughtUp = false;
    for (final Move move : remoteRover.getMoves()) {
      if (move.getId().equals(lastMoveCompleted)) {
        caughtUp = true;
      } else 
      {
        if (caughtUp) {
          nextMoves.add(move);
        }
      }
    }
    return new Rover(localRover, nextMoves);
  }
}
</code></pre>
<p>The next post in this series looks at how <a href="https://docs.mongodb.com/stitch/functions/" title="MongoDB Stitch serverless functions">Stitch Functions</a> can be used to provide an aggregated view of the rover&#8217;s sensor data.</p>
<p>If you can&#8217;t wait then you can find all of the code in the <a href="https://github.com/drewdipalma/stitch-car" title="Powered by MongoDB Mobile, MongoDB Stitch, and AWS Kinesis – the MongoDB Rover ">Stitch Rover GitHub repo</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/mongodb-stitch-mobile-sync-the-aws-reinvent-stitch-rover-demo-2/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MongoDB Stitch Mobile Sync – The AWS re:Invent Stitch Rover Demo</title>
		<link>/mongodb/mongodb-stitch-mobile-sync-the-aws-reinvent-stitch-rover-demo</link>
					<comments>/mongodb/mongodb-stitch-mobile-sync-the-aws-reinvent-stitch-rover-demo#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Wed, 12 Dec 2018 12:49:46 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Mobile]]></category>
		<category><![CDATA[MongoDB Stitch]]></category>
		<guid isPermaLink="false">/?p=4549</guid>

					<description><![CDATA[At AWS re:Invent, we demonstrated how MongoDB Mobile, MongoDB Stitch, and AWS services could be used to build a cloud-controlled Mars rover – read the overview post for the setup. This post focuses on how the mission control app records the user commands in MongoDB Atlas. Mission Control is a simple web application that we]]></description>
										<content:encoded><![CDATA[<p>At AWS re:Invent, we demonstrated how <a href="https://docs.mongodb.com/stitch/mongodb/mobile-overview/" title="MongoDB Mobile embedded database">MongoDB Mobile</a>, <a href="https://docs.mongodb.com/stitch/" title="MongoDB Stitch serverless platform">MongoDB Stitch</a>, and AWS services could be used to build a cloud-controlled Mars rover – read the <a href="https://www.mongodb.com/blog/post/mongodb-stitchmobile-mars-rover-lands-at-aws-reinvent" title="Powered by MongoDB Mobile, MongoDB Stitch, and AWS Kinesis, the MongoDB Rover ">overview post</a> for the setup. This post focuses on how the mission control app records the user commands in <a href="https://docs.mongodb.com/stitch/mongodb/atlas-overview/" title="MongoDB Atlas – fully hosted MongoDB as a service in the cloud">MongoDB Atlas</a>.</p>
<p>Mission Control is a simple web application that we ran on an iPad. The web app takes commands from the user through its UI which displays directions for the rover to travel in. Each command sets the rover off in that direction for a short fixed amount of time.</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/Stitch_QueryAnywhere_Mission_Control-3gpa73ulj0.jpg" alt="MongoDB Stitch QueryAnywhere rover Mission Control web app" /></p>
<p>Rather than sending the command directly to the rover, and as Mars is a long way away and network connections are not always reliable, the app stores the commands in an array within the rover&#8217;s document in Atlas – in that way, commands can be queued up and sent to the rover as soon as it&#8217;s back online.</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/MongoDB_QueryAnywhere-xel9dn1vbb.png" alt="MongoDB Stitch QueryAnywhere" /></p>
<p>This is what the document looks like after a few commands have been submitted (but not yet acted on by the rover):</p>
<pre><code>{
    "_id" : "5bee1053fdc728f2623e20eb",
    "moves" : [
        {
            "_id" : "5c0e4db5119f6e36c7d06f55",
            "angle" : 90,
            "speed" : 2
        },
        {
            "_id" : "5c0e4dbc119f6e36c7d06f56",
            "angle" : 118,
            "speed" : 3
        },
        {
            "_id" : "5c0e4dc3119f6e36c7d06f57",
            "angle" : 45,
            "speed" : -1
        }
    ],
    "__stitch_sync_version" : {
        "spv" : 1,
        "id" : "2f704b04-2338-4c75-a7cf-d555c94cb556",
        "v" : NumberLong(10313)
    }
}
</code></pre>
<p>A traditional way of access the database from the frontend app would be to stand up an app server, <a href="https://www.mongodb.com/blog/post/the-modern-application-stack-part-3-building-a-rest-api-using-expressjs" title="Building a REST API for MongoDB">implement a custom REST API</a> and data access control layer, and then send the commands to it from the frontend app. MongoDB Stitch massively simplifies that workflow by letting a web (or mobile) app execute MongoDB Query Language operations directly – removing the need for thousands of lines of boilerplate code.</p>
<p>When we explained this access model to demo visitors, some were nervous about this approach as we&#8217;ve been taught that the schema and database access should be hidden from the frontend (remember SQL injection attacks?). Fortunately, <a href="https://s3.amazonaws.com/stitch-sdks/js/docs/4/index.html" title="Safely query MongoDB directly from your app frontend with MongoDB Stitch QueryAnywhere">Stitch QueryAnywhere</a> is made up of two components – the first is the <a href="https://s3.amazonaws.com/stitch-sdks/js/docs/4/index.html">Stitch SDK</a> that enables direct access to the database, the second is the <a href="https://docs.mongodb.com/stitch/mongodb/mongodb-rules/" title="MongoDB Stitch rules mean you don't need to implement your own data access control layer">sophisticated, fine-grained user access controls</a> provided by the Stitch service. If that doesn&#8217;t allay your fears then you have the option to obfuscate the schema by accessing the database through <a href="https://docs.mongodb.com/stitch/functions/" title="Serverless computing with Stitch Functions">Stitch Functions</a>.</p>
<p>Updating the document from the web app is a cinch with Stitch. The first step is to import the Stitch SDK:</p>
<pre><code class="js">&lt;head&gt;
  &lt;script src="https://s3.amazonaws.com/stitch-sdks/js/bundles/4.0.15-0/stitch.js"&gt;&lt;/script&gt;
  &lt;script src="https://s3.amazonaws.com/stitch-sdks/bson/bson.bundle.js"&gt;&lt;/script&gt;
&lt;/head&gt;
</code></pre>
<p>The second step is to create the object/document for the command and push it onto the <code>moves</code> array within this rover&#8217;s document in the <code>rover.rovers</code> collection:</p>
<pre><code class="js">function pushMoveToRover(roverId) {
    const client = stitch.Stitch.defaultAppClient;
    const coll = client.getServiceClient(stitch.RemoteMongoClient.factory,
        'mongodb-atlas').db('rover').collection('rovers');
    const angle = parseInt($("#angle").val());
    const speed = parseInt($("#speed").val());
    if (isNaN(angle) || isNaN(speed)) {
        return;
    }
    const move = {"_id": new BSON.ObjectID().toHexString(), angle, speed};
    coll.updateOne({"_id": roverId}, {"$push": { "moves": move }, 
        "$inc": {"__stitch_sync_version.v": 1}});
}
</code></pre>
<p>If you are used to working with the MongoDB Query Language from an app server, that should seem very familiar. The only thing that might catch your eye is that <code>__stitch_sync_version.v</code>. That’s part of how this update will get to the MongoDB Mobile database embedded in the rover. We’ll explain that in the next part.</p>
<p>If you can&#8217;t wait then you can find all of the code in the <a href="https://github.com/drewdipalma/stitch-car" title="Powered by MongoDB Mobile, MongoDB Stitch, and AWS Kinesis – the MongoDB Rover ">Stitch Rover GitHub repo</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/mongodb-stitch-mobile-sync-the-aws-reinvent-stitch-rover-demo/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MongoDB Stitch/Mobile Mars Rover Lands at AWS re:Invent</title>
		<link>/mongodb/mongodb-stitch-mobile-mars-rover-lands-at-aws-reinvent</link>
					<comments>/mongodb/mongodb-stitch-mobile-mars-rover-lands-at-aws-reinvent#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Tue, 11 Dec 2018 14:11:45 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Stitch]]></category>
		<guid isPermaLink="false">/?p=4546</guid>

					<description><![CDATA[Powered by MongoDB Mobile, MongoDB Stitch, and AWS Kinesis, the MongoDB rover debuted at AWS re:Invent. More than a thousand people stopped by our demo to see if they could navigate the rover around a treacherous alien landscape. One of the challenges in controlling a rover on the other side of the Solar System is]]></description>
										<content:encoded><![CDATA[<p>Powered by <a href="https://docs.mongodb.com/stitch/mongodb/mobile-overview/">MongoDB Mobile</a>, <a href="https://docs.mongodb.com/stitch/">MongoDB Stitch</a>, and <a href="https://aws.amazon.com/kinesis/">AWS Kinesis</a>, the MongoDB rover debuted at AWS re:Invent.  More than a thousand people stopped by our demo to see if they could navigate the rover around a treacherous alien landscape.</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/MongoDB_Stitch_Rover-piiovrmu3q.png" alt="MongoDB Stitch &amp; Rover at AWS re:Invent" /></p>
<p>One of the challenges in controlling a rover on the other side of the Solar System is that there will frequently be times when you lose connectivity. To solve that, we store all of the commands in MongoDB Atlas and sync them to the rover (in its local MongoDB Mobile database) whenever it’s contactable.</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/MongoDB_Stitch_Rover_Architecture-joi3dg2pf7.png" alt="MongoDB Stitch Rover Application Architecture" /></p>
<p>Visitors controlled the rover via a <a href="https://github.com/drewdipalma/stitch-car/tree/master/web">JavaScript web app</a>, which uses <a href="https://s3.amazonaws.com/stitch-sdks/js/docs/4/index.html">Stitch QueryAnywhere</a> to write commands for the rover directly to a collection in <a href="https://docs.mongodb.com/stitch/mongodb/atlas-overview/">MongoDB Atlas</a> (the fully managed hosted MongoDB database, in this case, running in the AWS cloud).</p>
<p>After the commands are sent to the cloud, <a href="https://s3.amazonaws.com/stitch-sdks/java/docs/4/com/mongodb/stitch/core/services/mongodb/remote/sync/internal/package-summary.html">Stitch Mobile Sync</a> takes over, ensuring all  commands are automatically written to the MongoDB Mobile database embedded on the rover (running <a href="https://developer.android.com/things/">Android Things</a> on a <a href="https://www.raspberrypi.org/">Raspberry Pi 3b</a>) by <a href="https://s3.amazonaws.com/stitch-sdks/java/docs/4/com/mongodb/stitch/core/services/mongodb/remote/sync/internal/package-summary.html">Stitch Mobile Sync</a>. The Java app on the rover then acts on the synced commands (moving the Rover), before removing them from the mobile database to reflect that it’s completed with that set of commands –  with the updated status then finally  synced back to Atlas by Stitch Mobile Sync.</p>
<p>The rover can also record environmental sensor data in MongoDB Mobile, which Stitch Mobile Sync syncs to the <code>sensors</code> collection in Atlas. A <a href="https://docs.mongodb.com/stitch/triggers/database-triggers/">Stitch Trigger</a> on the <code>sensors</code> collection then runs a <a href="https://docs.mongodb.com/stitch/functions/">Stitch Function</a> to push those sensor readings to AWS Kinesis for further analysis, such as anomaly detection.</p>
<p>The first appearance of the MongoDB rover coincided with the <a href="https://mars.nasa.gov/insight/timeline/landing/entry-descent-landing/">Mars landing of InSight</a>. We even had our own <a href="https://www.jpl.nasa.gov/infographics/infographic.view.php?id=10776">7 minutes of terror</a> when the event WiFi buckled under the pressure of thousands of delegates descending on the expo hall during Monday’s evening social – but it did at least demonstrate that Stitch Mobile Sync quickly catches up once connectivity is restored.</p>
<p>This post is the first in a series delving into the components of this interactive demo, and if you can’t wait for more details, then you can <a href="https://github.com/drewdipalma/stitch-car">find all of the code in GitHub</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/mongodb-stitch-mobile-mars-rover-lands-at-aws-reinvent/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Stitch &#038; Mobile Webinar Questions &#038; Replay</title>
		<link>/mongodb/stitch-mobile-webinar-questions-replay</link>
					<comments>/mongodb/stitch-mobile-webinar-questions-replay#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Thu, 22 Nov 2018 12:22:32 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[mobile]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Mobile]]></category>
		<category><![CDATA[MongoDB Stitch]]></category>
		<category><![CDATA[serverless]]></category>
		<guid isPermaLink="false">/?p=4541</guid>

					<description><![CDATA[How do you test MongoDB Stitch functions, how do you store Stitch triggers, and what services can you integrate Stitch with? These were some of the great questions that were asked and answered in my recent webinar. You can watch the replay of &#8220;MongoDB Mobile and MongoDB Stitch – Introduction and Latest Developments&#8221; here, or]]></description>
										<content:encoded><![CDATA[<p>How do you test MongoDB <a href="https://docs.mongodb.com/stitch/functions/" title="MongoDB Stitch serverless functions">Stitch functions</a>, how do you store <a href="https://docs.mongodb.com/stitch/triggers/database-triggers/" title="MongoDB database triggers using MongoDB Stitch"> Stitch triggers</a>, and what services can you integrate Stitch with? These were some of the great questions that were asked and answered in my recent webinar. You can watch the replay of <a href="https://www.mongodb.com/presentations/mongodb-mobile-and-mongodb-stitch-introduction" title="Building mobile and IoT apps with MongoDB, MongoDB Stitch, and MongoDB Mobile">&#8220;MongoDB Mobile and MongoDB Stitch – Introduction and Latest Developments&#8221; here</a>, or read on as I share the answers to those questions here.</p>
<p>For those new to MongoDB Stitch, it&#8217;s the serverless platform from MongoDB that isolates complexity and ‘plumbing’ so you can build applications faster. Stitch went GA in June 2018, and we recently added a set of new capabilities, including global Stitch apps, more AWS services, a React Native SDK, and the beta for Stitch Mobile Sync. MongoDB Mobile is an embedded version of the MongoDB database that you can embed in your mobile or IoT apps.</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/Mobile_Stitch_Architecture_v2-am9l8s8m2o.png" alt="Building mobile apps with MongoDB Mobile, MongoDB Stitch, and MongoDB Atlas" /></p>
<p>These are some of the questions I thought might be of interest:</p>
<h4>How do you test Stitch functions?</h4>
<p>The <a href="https://www.mongodb.com/blog/post/testing--debugging-mongodb-stitch-functions" title="Testing MongoDB Stitch functions using the Stitch UI console">Stitch UI includes a console</a> which can be used to test your <a href="https://docs.mongodb.com/stitch/functions/" title="MongoDB Stitch serverless functions">Stitch functions</a>; you can include <code>console.log</code> statements to add extra debug output to the console (they also get added to the log files for every function invoked from an <a href="https://docs.mongodb.com/stitch/services/http/#incoming-webhooks" title="MongoDB Stitch incoming http webhooks">incoming webhook</a>, <a href="https://docs.mongodb.com/stitch/triggers/database-triggers/" title="MongoDB database triggers using MongoDB Stitch">trigger</a>, or the <a href="https://docs.mongodb.com/stitch/procedures/init-stitchclient/" title="MongoDB Stitch client SDKs">Stitch SDK</a>).</p>
<p>You can also <a href="https://www.mongodb.com/blog/post/working-with-mongodb-stitch-through-the-mongo-shell" title="Testing MongoDB Stitch functions using the mongo shell and the Stitch connection string">invoke your Stitch functions through the mongo shell</a>. To do that, you&#8217;ll need to enable the MongoDB wire protocol so that the shell can talk to your Stitch app, then use the Stitch connection string provided. Once connected, you can call Stitch functions explicitly like this:</p>
<pre><code class="js">mongo&gt; db.runCommand({callFunction: "morning", arguments: ["Billy"]})

{"ok" : 1,
 "response" : {"message" : "Good Morning Billy from andrew.morgan@mongodb.com"}
}
</code></pre>
<p>You can read more about this in <a href="https://www.mongodb.com/blog/post/working-with-mongodb-stitch-through-the-mongo-shell" title="Testing MongoDB Stitch functions using the mongo shell and the Stitch connection string">this post</a> which takes you through the process.</p>
<h4>How do you store stitch triggers in your Git repo?</h4>
<p>You can <a href="https://docs.mongodb.com/stitch/import-export/export-stitch-app/" title="Exporting apps from MongoDB Stitch">export</a> your Stitch application from the Stitch UI or the Stitch CLI; the exported app is represented by a directory structure containing JSON and JavaScript files:</p>
<pre><code>yourStitchApp/
├── stitch.json
├── secrets.json
├── variables.json
├── auth_providers/
│   └── &lt;provider name&gt;.json
├── functions/
│   └── &lt;function name&gt;/
│       ├── config.json
│       └── source.js
├── services/
│   └── &lt;service name&gt;/
│       ├── config.json
│       ├── incoming_webhooks/
│       │   ├── config.json
│       │   └── source.js
│       └── rules/
│           └── &lt;rule name&gt;.json
├── triggers/
│   └── &lt;trigger name&gt;/
│       ├── config.json
│       └── source.js
└── values/
    └── &lt;value name&gt;.json
</code></pre>
<p>You can then work on the trigger configuration and the associated function locally, source control the app using Git, or <a href="https://docs.mongodb.com/stitch/import-export/" title="Importing a MongoDB Stitch app">import it into a new App</a>.</p>
<h4>We saw a few integration provider logos in the presentation. Is there a page on the MongoDB site with the comprehensive list?</h4>
<p>You can find the list of Stitch’s built-in service integrations in the <a href="https://docs.mongodb.com/stitch/services/" title="MongoDB Stitch documentation">Stitch documentation</a>.</p>
<p>Note that if we don’t have a built-in integration for a particular service, then you can easily integrate it yourself, using the <a href="https://docs.mongodb.com/stitch/services/http/" title="MongoDB Stitch generic http service">Stitch HTTP service</a> and <a href="https://docs.mongodb.com/stitch/services/http/#incoming-webhooks" title="MongoDB Stitch incoming http webhooks">incoming webhooks</a>. You can even <a href="https://docs.mongodb.com/stitch/import-export/export-stitch-app/" title="Exporting apps from MongoDB Stitch">export your new service integration</a> to share with others.</p>
<h4>Is MongoDB Mobile + Stitch Mobile Sync the same as a cache in a progressive app?</h4>
<p>It certainly removes the need to have a separate cache, but it does much more. With MongoDB Mobile, the data is persistently stored on your device. You also have the full power of the MongoDB Query Language to perform sophisticated queries and aggregations on that local data. Changes made to the local database are pushed back to MongoDB Atlas, and from there to any other mobile devices configured to sync the same documents (e.g., for the same user running the app on another device).</p>
<h4>How do I download &amp; embed MongoDB Mobile?</h4>
<p>You simply need to <a href="https://docs.mongodb.com/stitch/mongodb/mobile/getting-started/" title="How to embed MongoDB Mobile in your application">add 1 line to your Android or Xcode project</a> to have access to the entire Stitch SDK, including the Stitch Local Database service (i.e.,the MongoDB Mobile database). The Stitch SDK includes the entire mobile and makes it very easy to use and consume, even if you&#8217;re just using the local MongoDB Mobile database and not Stitch.</p>
<hr />
<p>Creating your first Stitch app? Start with one of the <a href="https://docs.mongodb.com/stitch/tutorials/" title="MongoDB Stitch serverless platform – tutorials">Stitch tutorials</a>.</p>
<p>Want to learn more about MongoDB Stitch? Read the <a href="https://www.mongodb.com/collateral/mongodb-stitch-serverless-platform" title="MongoDB Stitch serverless platform architecture white paper">white paper</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/stitch-mobile-webinar-questions-replay/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Working with MongoDB Stitch Through Existing Drivers – Python &#038; PyMongo</title>
		<link>/mongodb/working-with-mongodb-stitch-through-existing-drivers-python-pymongo</link>
					<comments>/mongodb/working-with-mongodb-stitch-through-existing-drivers-python-pymongo#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 12 Oct 2018 15:48:35 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[MongoDB Stitch]]></category>
		<category><![CDATA[Python]]></category>
		<guid isPermaLink="false">/?p=4532</guid>

					<description><![CDATA[If you are developing an app using Java, Swift, or JavaScript then the Stitch SDK is the best way to access MongoDB Stitch from your frontend application code – getting to your data and accessing your Stitch Services and Functions becomes child&#8217;s play. But, what if you are developing in another language &#8211; perhaps running]]></description>
										<content:encoded><![CDATA[<p>If you are developing an app using Java, Swift, or JavaScript then the <a href="https://docs.mongodb.com/stitch/client-sdks/" title="MongoDB Stitch client SDK">Stitch SDK</a> is the best way to access <a href="https://docs.mongodb.com/stitch/" title="MongoDB Stitch serverless platform">MongoDB Stitch</a> from your frontend application code – getting to your data and accessing your Stitch Services and Functions becomes child&#8217;s play.</p>
<p>But, what if you are developing in another language &#8211; perhaps running on an app server? Luckily, MongoDB Stitch now supports the <a href="https://docs.mongodb.com/stitch/wire-protocol/" title="MongoDB wire protocol for MongoDB Stitch serverless platform">MongoDB wire protocol</a> – meaning that you can continue to work with your favorite MongoDB drivers (such as <a href="https://docs.mongodb.com/ecosystem/drivers/python/" title="Pymongo – python driver for MongoDB">PyMongo</a>) and tools such as the <a href="https://www.mongodb.com/blog/post/working-with-mongodb-stitch-through-the-mongo-shell" title="Working with MongoDB Stitch Through the mongo Shell – MongoDB Wire Protocol Support"><code>mongo</code> shell</a>.</p>
<p>After <a href="https://docs.mongodb.com/stitch/wire-protocol/" title="MongoDB wire protocol access to MongoDB Stitch">enabling connection string access</a>, connecting to your Stitch app from your application is business as usual – just use the connection string you&#8217;re shown in the Stitch UI (replacing the username and password with one of your existing Stitch users). This example is for <a href="https://docs.mongodb.com/ecosystem/drivers/python/" title="Pymongo – python driver for MongoDB">Python</a>, but the pattern is the same for other languages:</p>
<pre><code>&gt;&gt;&gt; import pymongo
&gt;&gt;&gt; from pymongo import MongoClient
&gt;&gt;&gt; client = MongoClient('mongodb://andrewxxxxmorgan%40gmail.com:\
      my_password@stitch.mongodb.com:27020/?authMechanism=PLAIN&amp;\
      authSource=%24external&amp;ssl=true&amp;\
      appName=imported_trackme-etjzr:mongodb-atlas:local-userpass')
</code></pre>
<p>Inserting a document should seem very familiar (note that I&#8217;m including an <code>owner_id</code> attribute so that the app can take advantage of <a href="https://docs.mongodb.com/stitch/mongodb/mongodb-rules/" title="MongoDB Stitch rules to control access to data">Stitch&#8217;s data access controls</a>):</p>
<pre><code>&gt;&gt;&gt; db = client.trackme
&gt;&gt;&gt; collection = db.comments

&gt;&gt;&gt; comment = {
    "author" : "Andrew Morgan",
    "comment" : "Using Stitch from Python – who knew?!",
    "owner_id" : "5bacd4e7698a67f72dfdb44c"
}
&gt;&gt;&gt; collection.insert_one(comment)

&lt;pymongo.results.InsertOneResult object at 0x102b362d8&gt;
</code></pre>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/MongoDB_Wire_Protocol-14msjczlcb.png" alt="Connecting to MongoDB Stitch using the MongoDB Python Driver" /></p>
<p>However, Stitch is about more just than accessing MongoDB data. I&#8217;ve created a (stupidly) simple Stitch (<code>morning</code>) Function to show how you can execute Stitch Functions through MongoDB drivers:</p>
<pre><code>&gt;&gt;&gt; db.command("callFunction", "morning", arguments=['Billy'])

u'ok': 1, u'response': {u'message': u'Good Morning Billy from andrewxxxxxxorgan@gmail.com'}}
</code></pre>
<p>Creating your first Stitch app? Start with one of the <a href="https://docs.mongodb.com/stitch/tutorials/" title="MongoDB Stitch serverless platform – tutorials">Stitch tutorials</a>.</p>
<p>Want to learn more about MongoDB Stitch? Read the <a href="https://www.mongodb.com/collateral/mongodb-stitch-serverless-platform" title="MongoDB Stitch serverless platform architecture white paper">white paper</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/working-with-mongodb-stitch-through-existing-drivers-python-pymongo/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
