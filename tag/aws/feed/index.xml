<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>AWS &#8211; Andrew Morgan on Databases</title>
	<atom:link href="/tag/aws/feed" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Database technologies - especially around scalability and High Availability</description>
	<lastBuildDate>Thu, 04 Feb 2021 17:37:23 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>Integrate Your Realm App with Amazon EventBridge</title>
		<link>/mongodb/integrate-your-realm-app-with-amazon-eventbridge</link>
					<comments>/mongodb/integrate-your-realm-app-with-amazon-eventbridge#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Tue, 02 Feb 2021 17:29:00 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[Realm]]></category>
		<category><![CDATA[AWS]]></category>
		<guid isPermaLink="false">/?p=4589</guid>

					<description><![CDATA[I&#8217;ve just co-written an article with AWS stepping through extending a Realm chat app to send messages to a Slack channel using Amazon EventBridge. Realm makes it easy to develop compelling mobile applications backed by a serverless MongoDB Realm back end and the MongoDB Atlas database service. You can enrich those applications by integrating with]]></description>
										<content:encoded><![CDATA[
I&#8217;ve just co-written an article with AWS <a rel="noreferrer noopener" href="https://developer.mongodb.com/how-to/realm-eventbridge-slack/" target="_blank">stepping through extending a Realm chat app to send messages to a Slack channel using Amazon EventBridge</a>.




<div style="height:19px" aria-hidden="true" class="wp-block-spacer"></div>




<a rel="noreferrer noopener" href="https://www.mongodb.com/realm" target="_blank">Realm</a> makes it easy to develop compelling mobile applications backed by a serverless MongoDB Realm back end and the <a rel="noreferrer noopener" href="https://www.mongodb.com/cloud/atlas" target="_blank">MongoDB Atlas database service</a>. You can enrich those applications by integrating with AWS&#8217;s broad ecosystem of services. In that article, I show you how to configure Realm and AWS to turn Atlas database changes into <a rel="noreferrer noopener" href="https://aws.amazon.com/eventbridge" target="_blank">Amazon EventBridge</a> events – all without adding a single line of code. Once in EventBridge, you can route events to other services which can act on them.
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/integrate-your-realm-app-with-amazon-eventbridge/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MongoDB Stitch Triggers &#038; Amazon Kinesis – The AWS re:Invent Stitch Rover Demo</title>
		<link>/mongodb/mongodb-stitch-triggers-amazon-kinesis-the-aws-reinvent-stitch-rover-demo</link>
					<comments>/mongodb/mongodb-stitch-triggers-amazon-kinesis-the-aws-reinvent-stitch-rover-demo#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Tue, 18 Dec 2018 15:21:26 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[AWS]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Mobile]]></category>
		<category><![CDATA[MongoDB Stitch]]></category>
		<guid isPermaLink="false">/?p=4555</guid>

					<description><![CDATA[This post delves into using MongoDB Stitch Triggers and the Stitch AWS service to push MongoDB database changes to Amazon Kinesis. This is the fifth and final article in a series of blog posts examining how the MongoDB Mobile/Stitch-controlled rover was put together for our AWS re:Invent demo. Stitch has simple, built-in integration with AWS]]></description>
										<content:encoded><![CDATA[<p>This post delves into using <a href="https://docs.mongodb.com/stitch/triggers/" title="MongoDB Stitch database triggers">MongoDB Stitch Triggers</a> and the <a href="https://docs.mongodb.com/stitch/services/aws/" title="Using AWS services such as Kinesis through MongoDB Stitch">Stitch AWS service</a> to push MongoDB database changes to <a href="https://aws.amazon.com/kinesis/" title="Amazon Kinesis – Easily collect, process, and analyze video and data streams in real time">Amazon Kinesis</a>. This is the fifth and final article in a <a href="https://www.mongodb.com/blog/post/mongodb-stitchmobile-mars-rover-lands-at-aws-reinvent" title="MongoDB Mobile, MongoDB Stitch, and AWS Kinesis-powered MongoDB rover debuted at AWS re:Invent">series of blog posts</a> examining how the <a href="https://docs.mongodb.com/stitch/mongodb/mobile-overview/" title="MongoDB Mobile embedded database">MongoDB Mobile</a>/<a href="https://docs.mongodb.com/stitch/" title="MongoDB Stitch serverless platform">Stitch</a>-controlled rover was put together for our AWS re:Invent demo.</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/Stitch_Rover_Triggers-zhgkadsgbn.jpg" alt="Sensor data from MongoDB Stitch Rover is pushed to Amazon Kinesis" /></p>
<p>Stitch has simple, built-in integration with AWS services, letting you call services like Kinesis from Stitch Functions using syntax similar to the AWS SDK. To start, we configure a new AWS service in Stitch using an IAM role from AWS and then create a new Stitch Service rule to enable Kinesis:</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/Kinesis-uijqi4mcb2.png" alt="Configure the Amazon Kinesis through the MongoDB Stitch AWS Service" /></p>
<p>We then need a <a href="https://www.mongodb.com/blog/post/mongodb-stitch-functions--the-aws-reinvent-stitch-rover-demo" title="MongoDB Stitch Functions – The AWS re:Invent Stitch Rover Demo">Stitch Function</a> (<code>kinesisTrigger</code>) to put our rover&#8217;s sensor data onto a Kinesis stream. Note that the sensor data is taken from the <code>event</code> function argument (we&#8217;ll get to that in a second):</p>
<pre><code class="js">exports = function(event){
  const awsService = context.services.get('aws');
  const roverId = event.fullDocument.roverId;
  try{
    awsService.kinesis("us-west-2").PutRecord({
      Data: JSON.stringify(event.fullDocument), 
      StreamName: context.values.get("Stream"),
      PartitionKey: context.values.get("Partitions")[roverId]
    }).then(function(response) {
      return response;
    });

    console.log("Successfully put the following document into the " +
      context.values.get("Stream") + " Kinesis stream: " + 
             EJSON.stringify(event.fullDocument));
  }catch(error){
    console.log(error);
  }
};
</code></pre>
<p>As the rover will sometimes be disconnected from the network, it stores the readings locally in the MongoDB Mobile database. Stitch Mobile Sync will then sync these same documents to Atlas whenever it&#8217;s online.</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/Stitch_Rover_Triggers-9hlm2bvu59.png" alt="Propagating sensor data to Amazon Kinesis using MongoDB Stitch Mobile Sync, Stitch Triggers, and a Stitch Function" /></p>
<p>We&#8217;ve configured the <code>kinesisTrigger</code> trigger to fire whenever a new document is added to the <code>rover.sensors</code> collection. The trigger calls the linked function <code>KinesisTrigger</code> (the trigger and function names don&#8217;t need to match), passing the inserted document as a function argument. From the time that the Stitch Trigger is hit, it typically takes just 20ms to get the data into Kinesis.</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/Stitch_Trigger-t2sn0ph04l.png" alt="Creating a MongoDB Database Trigger using Stitch Triggers" /></p>
<p>This completes the blog series. As a reminder, this is what we&#8217;ve covered in the five posts:<br />
&#8211; <a href="https://www.mongodb.com/blog/post/mongodb-stitchmobile-mars-rover-lands-at-aws-reinvent" title="MongoDB Stitch, MongoDB Mobile, Atlas, Android Things, a Raspberry Pi, and Amazon Kinesis are used to control reliably control our Mars rover">MongoDB Stitch/Mobile Mars Rover Lands at AWS re:Invent</a> describes how MongoDB Stitch, MongoDB Mobile, Atlas, Android Things, a Raspberry Pi, and Amazon Kinesis are used to reliably control our Mars rover.<br />
&#8211; <a href="https://www.mongodb.com/blog/post/mongodb-stitch-queryanywhere--the-aws-reinvent-stitch-rover-demo" title="calling the Stitch SDK directly from the frontend app">MongoDB Stitch QueryAnywhere</a> focuses on how the Mission Control app records the user commands in MongoDB Atlas by calling the Stitch SDK directly from the frontend code.<br />
&#8211; <a href="https://www.mongodb.com/blog/post/mongodb-stitch-mobile-sync--the-aws-reinvent-stitch-rover-demo" title="Stitch Mobile Sync synchronizes data between MongoDB Atlas and MongoDB Mobile">MongoDB Stitch Mobile Sync</a> shows how Stitch Mobile Sync synchronizes the user commands written to MongoDB Atlas by the Mission Control app with the MongoDB Mobile database embedded in the rover (and how it syncs the data back to Atlas when it&#8217;s updated in MongoDB Mobile).<br />
&#8211; <a href="https://www.mongodb.com/blog/post/mongodb-stitch-functions--the-aws-reinvent-stitch-rover-demo" title="Using Stitch Functions to provide aggregated sensor data">MongoDB Stitch Functions</a> focuses on how a Stitch Function is used to provide aggregated sensor data such as the average temperature for the last 5 minutes.<br />
&#8211; <a href="https://www.mongodb.com/blog/post/mongodb-stitch-triggers--amazon-kinesis--the-aws-reinvent-stitch-rover-demo" title="MongoDB Stitch and Amazon AWS Kinesis">MongoDB Stitch Triggers &amp; Amazon Kinesis</a> shows how we use MongoDB Stitch Triggers and the Stitch AWS service to push MongoDB database changes to Amazon Kinesis.</p>
<p>You can find all of the code in the <a href="https://github.com/drewdipalma/stitch-car" title="Powered by MongoDB Mobile, MongoDB Stitch, and AWS Kinesis – the MongoDB Rover ">Stitch Rover GitHub repo</a>.</p>
<p>Why not <a href="https://docs.mongodb.com/stitch/tutorials/" title="MongoDB Stitch Tutorials">try Stitch out for yourself</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/mongodb-stitch-triggers-amazon-kinesis-the-aws-reinvent-stitch-rover-demo/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MongoDB Stitch Functions – The AWS re:Invent Stitch Rover Demo</title>
		<link>/mongodb/mongodb-stitch-functions-the-aws-reinvent-stitch-rover-demo</link>
					<comments>/mongodb/mongodb-stitch-functions-the-aws-reinvent-stitch-rover-demo#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Mon, 17 Dec 2018 15:35:32 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[AWS]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Mobile]]></category>
		<category><![CDATA[MongoDB Stitch]]></category>
		<guid isPermaLink="false">/?p=4553</guid>

					<description><![CDATA[This is the fourth in a series of blog posts examining how the MongoDB Mobile/Stitch-controlled rover was put together for our re:Invent demo. This post focuses on how a Stitch Function is used to provide aggregated sensor data such as the average temperature for the last 5 minutes. A common question we were asked at]]></description>
										<content:encoded><![CDATA[<p>This is the fourth in a <a href="https://www.mongodb.com/blog/post/mongodb-stitchmobile-mars-rover-lands-at-aws-reinvent" title="MongoDB Mobile, MongoDB Stitch, and AWS Kinesis-powered MongoDB rover debuted at AWS re:Invent">series of blog posts</a> examining how the  <a href="https://docs.mongodb.com/stitch/mongodb/mobile-overview/" title="MongoDB Mobile embedded database">MongoDB Mobile</a>/<a href="https://docs.mongodb.com/stitch/" title="MongoDB Stitch serverless platform">Stitch</a>-controlled rover was put together for our re:Invent demo. This post focuses on how a <a href="https://docs.mongodb.com/stitch/functions/" title="MongoDB Stitch serverless functions">Stitch Function</a> is used to provide aggregated sensor data such as the average temperature for the last 5 minutes.</p>
<p>A common question we were asked at re:Invent is how Stitch&#8217;s serverless Functions compare with AWS Lambda functions. Stitch functions are designed to be very light-weight (run as <a href="https://golangbot.com/goroutines">Goroutines</a> and deliver low latency – ideal, for example, when working with a database (especially as your function has a persistent MongoDB connection). In contrast, Lambda functions are more heavy-weight (Lambda spins up containers to run your functions in) – better suited to compute-heavy operations.</p>
<p>You write your functions in JavaScript (ES6) through the Stitch UI or the command line. We created this function (<code>getReadings</code>) to fetch a rover&#8217;s sensor data for the specified interval and then return the computed average, minimum, and maximum values:</p>
<pre><code class="js">exports = function(roverId, start, end){
  const mdb = context.services.get('mongodb-atlas');
  const sensors = mdb.db("Rovers").collection("Sensors");

  return sensors.find({"id": roverId, "time":{"$gt":start,"$lt":end}})
    .toArray()
    .then(readings =&gt; {
     let data = objArray.map(readings =&gt; readings.reading);
     return {"Average": data.reduce((a,b) =&gt; a + b, 0) / data.length,
        "Min": Math.min(...readings),
        "Max": Math.max(...readings)};
  });
};
</code></pre>
<p>This function can then be called from your app frontend code:</p>
<p><img decoding="async" src="https://webassets.mongodb.com/_com_assets/cms/Stitch_Rover_Functions-evgltamu83.png" alt="Calling a MongoDB Stitch Function from a client frontend" /></p>
<p>The frontend code to run this function is as simple as this:</p>
<pre><code class="js">context.functions.execute("getReadings", myId, samplePeriod.start, 
    samplePeriod.end);
</code></pre>
<p>There&#8217;s a lot more that you can do in functions, such as sending data to another cloud service. You&#8217;ll see an example of this in the next post which shows how a <a href="https://docs.mongodb.com/stitch/triggers/" title="MongoDB Stitch database triggers">Stitch Trigger</a> calls a Stitch function to send MongoDB Atlas data to <a href="https://docs.mongodb.com/stitch/services/aws/" title="Using AWS services such as Kinesis through MongoDB Stitch">AWS Kinesis</a>.</p>
<p>If you can&#8217;t wait then you can find all of the code in the <a href="https://github.com/drewdipalma/stitch-car" title="Powered by MongoDB Mobile, MongoDB Stitch, and AWS Kinesis – the MongoDB Rover ">Stitch Rover GitHub repo</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/mongodb-stitch-functions-the-aws-reinvent-stitch-rover-demo/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Develop &#038; Deploy a Node.js App to AWS Elastic Beanstalk &#038; MongoDB Atlas</title>
		<link>/mongodb/develop-deploy-a-node-js-app-to-aws-elastic-beanstalk-mongodb-atlas</link>
					<comments>/mongodb/develop-deploy-a-node-js-app-to-aws-elastic-beanstalk-mongodb-atlas#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Thu, 15 Sep 2016 17:07:47 +0000</pubDate>
				<category><![CDATA[MongoDB]]></category>
		<category><![CDATA[AWS]]></category>
		<category><![CDATA[Elastic Beanstalk]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[MongoDB Atlas]]></category>
		<category><![CDATA[node.js]]></category>
		<guid isPermaLink="false">/?p=4201</guid>

					<description><![CDATA[Introduction This blog post demonstrates how to build and deploy an application on AWS Elastic Beanstalk, and have that application connect to MongoDB Atlas as its back-end database service: Introducing the example MongoPop application Connecting applications to your MongoDB Atlas cluster; including IP address whitelisting Downloading and testing MongoPop locally and on AWS Elastic Beanstalk]]></description>
										<content:encoded><![CDATA[<h1>Introduction</h1>
<p>This blog post demonstrates how to build and deploy an application on AWS Elastic Beanstalk, and have that application connect to <a href="https://www.mongodb.com/cloud">MongoDB Atlas</a> as its back-end database service:</p>
<ul>
<li>Introducing the example <em>MongoPop</em> application</li>
<li>Connecting applications to your MongoDB Atlas cluster; including IP address whitelisting</li>
<li>Downloading and testing MongoPop locally and on AWS Elastic Beanstalk</li>
<li>Populating your database with thousands of realistic documents</li>
<li>Explaining key parts of the application code</li>
<li>Adapting and redeploying applications</li>
<li>Graphically exploring your schema and data with MongoDB Compass</li>
</ul>
<p>AWS Elastic Beanstalk is a service offered by Amazon to make it simple for developers to deploy and manage their cloud-based applications. After you&#8217;ve uploaded your application, Elastic Beanstalk automatically takes care of:</p>
<ul>
<li>Capacity provisioning, adding more instances as needed</li>
<li>Load balancing</li>
<li>Health monitoring</li>
</ul>
<p>MongoDB Atlas provides all of the features of the MongoDB database, without the operational heavy lifting. MongoDB Atlas is available on demand through a pay-as-you-go model and billed on an hourly basis, letting you focus on your application code.</p>
<p>It’s easy to get started – use a simple GUI to select the instance size, region, and features you need. MongoDB Atlas provides:</p>
<ul>
<li>Security features to protect access to your data</li>
<li>Built in replication for always-on availability, tolerating complete data center failure</li>
<li>Backups and point in time recovery to protect against data corruption</li>
<li>Fine-grained monitoring to let you know when to scale. Additional instances can be provisioned with the push of a button</li>
<li>Automated patching and one-click upgrades for new major versions of the database, enabling you to take advantage of the latest and greatest MongoDB features</li>
<li>A choice of cloud providers, regions, and billing options</li>
</ul>
<p>There is clearly a lot of synergy between these technologies – both of them handling the enabling infrastructure, letting the developer spend their precious time on writing great applications. To continue in the spirit of developer productivity, the application used in this post is developed using Node.js, the Express web application framework, and the Pug (formerly Jade) template engine.</p>
<h1>The Application &#8211; MongoPop</h1>
<p>Let&#8217;s start by taking a look at what the new Mongopop application provides.</p>
<p>Getting your MongoDB Atlas cluster up and running is a breeze but what do you do with it next? Wouldn&#8217;t it be great to populate it with some realistic data so that you can start experimenting? This is what MongoPop does – even letting you tailor the format and contents of the data using the <a href="http://www.mockaroo.com/">Mockaroo</a> service.</p>
<p>Mockaroo is a flexible service, allowing you to define a rich schema and then generate realistic sample data sets. Supported types include:</p>
<ul>
<li>Email address</li>
<li>City</li>
<li>European first name</li>
<li>JSON array</li>
<li>Branded drug names</li>
<li>Custom types defined by you, based on regular expressions</li>
</ul>
<p>Data files can be downloaded from Mockaroo in multiple formats, including: JSON, CSV, and SQL.</p>
<p>MongoPop pulls data from Mockaroo and then automatically writes the data to your database. It defaults to our example Mockaroo schema but you can replace that with a URL for any schema that you&#8217;ve defined in Mockaroo (or any other service providing arrays of JSON documents). Mockaroo takes care of connecting to MongoDB Atlas and runs multithreaded, speeding up the process of loading large datasets into MongoDB.</p>
<h2>Using MongoPop</h2>
<p><div id="attachment_4203" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Identify_IP_Address_for_MongoDB_Atlas_whitelisting.png"><img fetchpriority="high" decoding="async" aria-describedby="caption-attachment-4203" src="/wp-content/uploads/2016/09/Identify_IP_Address_for_MongoDB_Atlas_whitelisting-1024x524.png" alt="Identify IP Address of MongoPop Server for MongoDB Atlas IP Whitelisting" width="480" height="246" class="size-large wp-image-4203" srcset="/wp-content/uploads/2016/09/Identify_IP_Address_for_MongoDB_Atlas_whitelisting-1024x524.png 1024w, /wp-content/uploads/2016/09/Identify_IP_Address_for_MongoDB_Atlas_whitelisting-300x153.png 300w, /wp-content/uploads/2016/09/Identify_IP_Address_for_MongoDB_Atlas_whitelisting-768x393.png 768w" sizes="(max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4203" class="wp-caption-text">Figure 1: Identify IP Address of MongoPop Server for MongoDB Atlas IP Whitelisting</p></div></p>
<p>When you first access MongoPop (Figure 1), you&#8217;re presented with a form to provide details on how to connect to your MongoDB Atlas instance, and what you&#8217;d like the data to look like. Before completing the form, take a note of the IP address that&#8217;s displayed. This IP address needs to be added to the whitelist for your group, which is done through the security tab of the <a href="https://www.mongodb.com/cloud">MongoDB Atlas UI</a> (Figure 2).</p>
<p><div id="attachment_4204" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Add_IP_Address_to_MongoDB_Atlas_whitelist.png"><img decoding="async" aria-describedby="caption-attachment-4204" src="/wp-content/uploads/2016/09/Add_IP_Address_to_MongoDB_Atlas_whitelist-1024x428.png" alt="Add MongoPop IP Address to MongoDB Atlas Group Whitelist" width="480" height="201" class="size-large wp-image-4204" srcset="/wp-content/uploads/2016/09/Add_IP_Address_to_MongoDB_Atlas_whitelist-1024x428.png 1024w, /wp-content/uploads/2016/09/Add_IP_Address_to_MongoDB_Atlas_whitelist-300x126.png 300w, /wp-content/uploads/2016/09/Add_IP_Address_to_MongoDB_Atlas_whitelist-768x321.png 768w" sizes="(max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4204" class="wp-caption-text">Figure 2: Add MongoPop IP Address to MongoDB Atlas Group Whitelist</p></div></p>
<p>In a production Elastic Beanstalk environment, the IP whitelisting can be a little more involved – that will be covered later in this post.</p>
<p><div id="attachment_4205" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Find_Node_Driver_Connect_String_MongoDB_Atlas.png"><img decoding="async" aria-describedby="caption-attachment-4205" src="/wp-content/uploads/2016/09/Find_Node_Driver_Connect_String_MongoDB_Atlas-1024x416.png" alt="Find the Node.js Driver Connect String in MongoDB Atlas" width="480" height="195" class="size-large wp-image-4205" srcset="/wp-content/uploads/2016/09/Find_Node_Driver_Connect_String_MongoDB_Atlas-1024x416.png 1024w, /wp-content/uploads/2016/09/Find_Node_Driver_Connect_String_MongoDB_Atlas-300x122.png 300w, /wp-content/uploads/2016/09/Find_Node_Driver_Connect_String_MongoDB_Atlas-768x312.png 768w, /wp-content/uploads/2016/09/Find_Node_Driver_Connect_String_MongoDB_Atlas.png 1380w" sizes="(max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4205" class="wp-caption-text">Figure 3: Find the Node.js Driver Connect String in MongoDB Atlas</p></div></p>
<p>While in the MongoDB Atlas UI, click the &#8220;CONNECT&#8221; button, select the &#8220;MongoDB Drivers&#8221; tab and then the &#8220;COPY&#8221; button (Figure 3). Paste the copied URI directly into MongoPop. You should also enter the password and the database you want to use.</p>
<p>Note that the URI needs editing before it&#8217;s actually used but MongoPop handles that using the password and database name you provide; the final URI will take this form: <code>mongodb://mongodb_user:my_password@cluster0-shard-00-00-qfovx.mongodb.net:27017,cluster0-shard-00-01-qfovx.mongodb.net:27017,cluster0-shard-00-02-qfovx.mongodb.net:27017/mongopop?ssl=true&amp;authSource=admin</code>.</p>
<p>This URI contains these components:</p>
<ul>
<li><code>mongodb_user</code> is the name of the user you gave when creating the group in the MongoDB Atlas UI. Alternatively, create a new user in the MongoDB Atlas UI with more restricted privileges.</li>
<li><code>my_password</code> is the password you chose when creating the user in MongoDB Atlas.</li>
<li><code>cluster0-shard-00-00-qfovx.mongodb.net</code>, <code>cluster0-shard-00-01-qfovx.mongodb.net</code>, &amp; <code>cluster0-shard-00-02-qfovx.mongodb.net</code> are the hostnames of the instances in your MongoDB Atlas replica set.</li>
<li><code>27017</code> is the default MongoDB port number.</li>
<li><code>mongopop</code> is the name of the database (schema) that MongoPop will use.</li>
<li>To enforce over-the-wire encryption, MongoDB Atlas mandates that the <code>ssl</code> option is used.</li>
<li><code>admin</code> is the database that&#8217;s being used to store the credentials for <code>mongodb_user</code>.</li>
</ul>
<p>The remaining fields define the collection to store the documents, the source of the document schema, and the number of documents (in thousands) to be added. The source URL defaults to a document format already defined but you can create your own by registering at the <a href="http://www.mockaroo.com/">Mockaroo</a> site, defining the document structure and then using the URL provided.</p>
<p>After clicking the &#8220;populate&#8221; button, MongoPop fetches the data set(s) from Mockaroo and then adds the documents to your MongoDB Atlas collection. Once the data has been added, the page refreshes and you&#8217;re shown a sample of the documents now stored in your collection (Figure 4).</p>
<p><div id="attachment_4206" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/MongoDB_Atlas_sample_document.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4206" src="/wp-content/uploads/2016/09/MongoDB_Atlas_sample_document-1024x771.png" alt="Sample of Data Added to MongoDB Atlas Collection" width="480" height="361" class="size-large wp-image-4206" srcset="/wp-content/uploads/2016/09/MongoDB_Atlas_sample_document-1024x771.png 1024w, /wp-content/uploads/2016/09/MongoDB_Atlas_sample_document-300x226.png 300w, /wp-content/uploads/2016/09/MongoDB_Atlas_sample_document-768x578.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4206" class="wp-caption-text">Figure 4: Sample of Data Added to MongoDB Atlas Collection</p></div></p>
<h3>MongoDB Compass</h3>
<p>Congratulations, you now have some data in your database! An optional step is to start exploring that data using <a href="https://www.mongodb.com/products/compass">MongoDB Compass</a>. The same credentials can be used to connect Compass to your MongoDB database (Figure 5).</p>
<p><div id="attachment_4207" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4207" src="/wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-1024x839.png" alt="Connect MongoDB Compass to MongoDB Atlas" width="480" height="393" class="size-large wp-image-4207" srcset="/wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-1024x839.png 1024w, /wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-300x246.png 300w, /wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas-768x629.png 768w, /wp-content/uploads/2016/09/Connect_MongoDB_Compass_to_MongoDB_Atlas.png 1796w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4207" class="wp-caption-text">Figure 5: Connect MongoDB Compass to MongoDB Atlas</p></div></p>
<p>Once connected, explore the data added to the collection (Figure 6).</p>
<p><div id="attachment_4208" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Explore_MongoDB_Atlas_data_with_MongoDB_Compass.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4208" src="/wp-content/uploads/2016/09/Explore_MongoDB_Atlas_data_with_MongoDB_Compass-1024x734.png" alt="Explore MongoDB Atlas Data Using MongoDB Compass" width="480" height="344" class="size-large wp-image-4208" srcset="/wp-content/uploads/2016/09/Explore_MongoDB_Atlas_data_with_MongoDB_Compass-1024x734.png 1024w, /wp-content/uploads/2016/09/Explore_MongoDB_Atlas_data_with_MongoDB_Compass-300x215.png 300w, /wp-content/uploads/2016/09/Explore_MongoDB_Atlas_data_with_MongoDB_Compass-768x550.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4208" class="wp-caption-text">Figure 6: Explore MongoDB Atlas Data Using MongoDB Compass</p></div></p>
<p>In this version (1.3) of MongoDB Compass (currently in <a href="https://www.mongodb.com/download-center?jmp=nav#compass">beta</a>), it is also possible to add, delete, and modify documents (Figure 7).</p>
<p><div id="attachment_4209" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Modify_MongoDB_Atlas_document_in_MongoDB_Compass.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4209" src="/wp-content/uploads/2016/09/Modify_MongoDB_Atlas_document_in_MongoDB_Compass-1024x340.png" alt="Modify a Document in MongoDB Compass" width="480" height="159" class="size-large wp-image-4209" srcset="/wp-content/uploads/2016/09/Modify_MongoDB_Atlas_document_in_MongoDB_Compass-1024x340.png 1024w, /wp-content/uploads/2016/09/Modify_MongoDB_Atlas_document_in_MongoDB_Compass-300x100.png 300w, /wp-content/uploads/2016/09/Modify_MongoDB_Atlas_document_in_MongoDB_Compass-768x255.png 768w, /wp-content/uploads/2016/09/Modify_MongoDB_Atlas_document_in_MongoDB_Compass.png 2002w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4209" class="wp-caption-text">Figure 7: Modify a Document in MongoDB Compass</p></div></p>
<p>You can verify that the document has really been updated from the MongoDB shell:</p>
<p><script src="https://gist.github.com/am-MongoDB/fd52e83e27d4db27e84be40c5c6c719d.js"></script></p>
<h2>Downloading the Application</h2>
<p>The tools for deploying your application to AWS Elastic Beanstalk integrate with <code>git</code>, which makes it the best way to get the code. Assuming that <code>git</code> is already installed, downloading the code is simple:</p>
<p><script src="https://gist.github.com/am-MongoDB/f20c38dc8fdbb058eec5c828da33b845.js"></script></p>
<p>If you then want to refresh your local repository with the latest version:</p>
<p><script src="https://gist.github.com/am-MongoDB/79171206054c25534005da997a001ebb.js"></script></p>
<p>Alternatively, simply <a href="https://github.com/andrewjamesmorgan/mongopop/archive/master.zip">download the zip file</a>.</p>
<h2>Testing The Application Locally</h2>
<p>Deploying to Elastic Beanstalk is straightforward but there is a delay each time you update and redeploy your application. For that reason, it&#8217;s still useful to be able to test and debug locally.</p>
<p>After downloading the application, installing its dependencies and then running it is trivial (this assumes that you already have Node.js installed):</p>
<p><script src="https://gist.github.com/am-MongoDB/3aa672bbdc0f0db3ce6655a295251e28.js"></script></p>
<p><code>npm_install</code> installs all of the required dependencies (which are described in <code>package.json</code>). <code>npm start</code> starts the application – once it it running browse to <a href="http://localhost:3000/pop"><code>http://localhost:3000/pop</code></a> to try it out.</p>
<h3>Deploying to AWS Elastic Beanstalk</h3>
<p>You can create your Elastic Beanstalk environment and deploy and monitor your application from the <a href="https://console.aws.amazon.com/elasticbeanstalk">AWS console</a>. If you don&#8217;t already have an account then that&#8217;s where you would create it. If you already have an account, and a copy of your Access Key ID and Secret Access Key, then using the <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3.html">EB CLI</a> provides a more efficient workflow.</p>
<p>The method for installing the EB CLI <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3-install.html">varies by platform</a> but if you already have Homebrew installed on OS X then it&#8217;s as simple as:</p>
<p><script src="https://gist.github.com/am-MongoDB/dad9ee324bd60683dc24d1c0b909c565.js"></script></p>
<p><code>eb init</code> sets default values for Elastic Beanstalk applications created with the EB CLI by prompting you with a series of questions:</p>
<p><script src="https://gist.github.com/am-MongoDB/bb7a6f5986844ee3a4d65eb3db534b66.js"></script></p>
<p><code>eb create</code> creates a new environment and deploys the current application to that environment:</p>
<p><script src="https://gist.github.com/am-MongoDB/700457d947aba7a81751bd4c62c6172d.js"></script></p>
<p>Finally, <code>eb open</code> connects to the MongoPop app from your browser.</p>
<p>If you want to make changes to the application then the EB CLI makes it simple to redeploy the new version. As an example, edit the <code>views/pop.jade</code> file to add an extra paragraph after the title:</p>
<p><script src="https://gist.github.com/am-MongoDB/48ddde4054dde848b02924ba2d7ecb0b.js"></script></p>
<p>The EB CLI integrates with <code>git</code> and so update <code>git</code> with the change and then redeploy:</p>
<p><script src="https://gist.github.com/am-MongoDB/48c861d261f4d91a354485b06fc68776.js"></script></p>
<p><div id="attachment_4210" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Personalised_AWS_Elasticbeanstalk_App.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4210" src="/wp-content/uploads/2016/09/Personalised_AWS_Elasticbeanstalk_App-1024x241.png" alt="Personalized Version of MongoPop Deployed to AWS EBS" width="480" height="113" class="size-large wp-image-4210" srcset="/wp-content/uploads/2016/09/Personalised_AWS_Elasticbeanstalk_App-1024x241.png 1024w, /wp-content/uploads/2016/09/Personalised_AWS_Elasticbeanstalk_App-300x71.png 300w, /wp-content/uploads/2016/09/Personalised_AWS_Elasticbeanstalk_App-768x181.png 768w, /wp-content/uploads/2016/09/Personalised_AWS_Elasticbeanstalk_App.png 1952w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4210" class="wp-caption-text">Figure 8: Personalized Version of MongoPop Deployed to AWS EBS</p></div></p>
<p>When you&#8217;re finished with the application, the environment can be deleted with a single command:</p>
<p><script src="https://gist.github.com/am-MongoDB/7771e7c498d3b085b5784d32ecd07ea3.js"></script></p>
<p>Note that this doesn&#8217;t remove the application deployment files that Elastic Beanstalk keeps in AWS S3 storage. To avoid continuing charges, delete those files through the <a href="https://console.aws.amazon.com/s3">AWS console</a> (Figure 9).</p>
<p><div id="attachment_4211" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/Remove_Files_from_AWS_S3_Storage.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4211" src="/wp-content/uploads/2016/09/Remove_Files_from_AWS_S3_Storage-1024x734.png" alt="Remove Deployment Files From AWS S3 Storage" width="480" height="344" class="size-large wp-image-4211" srcset="/wp-content/uploads/2016/09/Remove_Files_from_AWS_S3_Storage-1024x734.png 1024w, /wp-content/uploads/2016/09/Remove_Files_from_AWS_S3_Storage-300x215.png 300w, /wp-content/uploads/2016/09/Remove_Files_from_AWS_S3_Storage-768x551.png 768w, /wp-content/uploads/2016/09/Remove_Files_from_AWS_S3_Storage.png 1436w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4211" class="wp-caption-text">Figure 9: Remove Deployment Files From AWS S3 Storage</p></div></p>
<h1>Code Highlights</h1>
<p>The full code for MongoPop can be found in <a href="https://github.com/andrewjamesmorgan/mongopop">GitHub</a> but this section presents some snippets that are specific to MongoDB and MongoDB Atlas.</p>
<p>Firstly, constructing the final URI to access the database (from <code>views/pop.js</code>):</p>
<p><script src="https://gist.github.com/am-MongoDB/7fbd00a28851dd32f97b644f0460319c.js"></script></p>
<p>Connecting to the database and working with the collection (<code>javascripts/db.js</code>):</p>
<p><script src="https://gist.github.com/am-MongoDB/3bbc2e113c31bb9802a3b073712efec8.js"></script></p>
<p>All of the dependencies (including the MongoDB Node.js driver) are defined in <code>package.json</code>:</p>
<p><script src="https://gist.github.com/am-MongoDB/38887db8319434ec1928288a4cf39146.js"></script></p>
<h1>The IP Address Whitelisting Challenge</h1>
<p>IP address whitelisting is a key MongoDB Atlas security feature, adding an extra layer to prevent 3rd parties from accessing your data. Clients are prevented from accessing the database unless their IP address has been added to the <a href="https://docs.atlas.mongodb.com/setup-cluster-security/#add-ip-addresses-to-the-whitelist">IP whitelist</a> for your MongoDB Atlas group.</p>
<p>VPC Peering for MongoDB Atlas is under development and will be available soon, offering a simple, robust solution. It will allow the whitelisting of an entire AWS Security Group within the VPC containing your application servers.</p>
<p>If you need to deploy a robust, scalable application before VPC peering becomes available, some extra steps may be required.</p>
<p>In our example application, the public IP address of the AWS EC2 instance running MongoPop was added to the MongoDB Atlas whitelist for the group.</p>
<p>That works fine but what happens if that EC2 instance fails and is rescheduled – its IP Address changes and so it would not be able to connect to MongoDB Atlas until it was whitelisted. That scenario can be remedied by assigning an Elastic IP address (which survives rescheduling) to the EC2 instance using the <a href="https://console.aws.amazon.com/ec2">AWS Console</a>.</p>
<p>What if demand for your application grows and Elastic Beanstalk determines that it needs to add an extra EC2 instance? Again, that instance will have an IP Address that hasn&#8217;t yet been added to the MongoDB Atlas whitelist. To cover that scenario (as well as rescheduling), the AWS NAT Gateway service can be used. Figure 10 illustrates a configuration using a NAT Gateway.<br />
<div id="attachment_4212" style="width: 490px" class="wp-caption aligncenter"><a href="/wp-content/uploads/2016/09/NAT_Gateway_with_AWS_Elastic_Beanstalk.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4212" src="/wp-content/uploads/2016/09/NAT_Gateway_with_AWS_Elastic_Beanstalk-1024x618.png" alt="Presenting a Single IP Address Using an AWS NAT Gateway" width="480" height="290" class="size-large wp-image-4212" srcset="/wp-content/uploads/2016/09/NAT_Gateway_with_AWS_Elastic_Beanstalk-1024x618.png 1024w, /wp-content/uploads/2016/09/NAT_Gateway_with_AWS_Elastic_Beanstalk-300x181.png 300w, /wp-content/uploads/2016/09/NAT_Gateway_with_AWS_Elastic_Beanstalk-768x463.png 768w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4212" class="wp-caption-text">Figure 10: Presenting a Single IP Address Using an AWS NAT Gateway</p></div></p>
<p>Two subnets are created within the AWS Virtual Private Cloud (VPC):</p>
<ul>
<li>The <strong>public subnet</strong> contains the front-end servers which external clients access via an Elastic IP Address attached to the Internet Gateway (IGW). It also contains the NAT Gateway service.</li>
<li>The <strong>private subnet</strong> contains the back-end servers which will access MongoDB Atlas.</li>
</ul>
<p>Routing tables must be created to route all messages from the private subnet destined for public IP addresses through the NAT Gateway. The NAT Gateway has its own Elastic IP Address which all of the outgoing messages that pass through it appear to originate from – this IP Address must be added to the MongoDB Atlas whitelist.</p>
<p>Messages between the front-end and back-end servers use local IP Addresses and so are routed directly, without passing through the NAT Gateway. Messages from external clients are routed from the IGW to the front-end servers.</p>
<p>Clearly this configuration adds cost and complexity (e.g., the application needs breaking into front and back-end components).</p>
<p>An alternative is to add extra logic to your application so that it automatically adds its IP address to the whitelist using the <a href="https://docs.atlas.mongodb.com/api/">MongoDB Atlas Public API</a>. If taking that approach, then also consider how to remove redundant IP addresses as the whitelist is limited to 20 entries.</p>
<h1>What Next?</h1>
<p>While MongoDB Atlas radically simplifies the operation of MongoDB there are still some decisions to take to ensure the best performance and reliability for your application. The <a href="https://www.mongodb.com/collateral/mongodb-atlas-best-practices">MongoDB Atlas Best Practices white paper</a> provides guidance on best practices for deploying, managing, and optimizing the performance of your database with MongoDB Atlas.</p>
<p>The guide outlines considerations for achieving performance at scale with MongoDB Atlas across a number of key dimensions, including instance size selection, application patterns, schema design and indexing, and disk I/O. While this guide is broad in scope, it is not exhaustive. Following the recommendations in the guide will provide a solid foundation for ensuring optimal application performance.</p>
<p>Learn more about the capabilities of MongoDB Atlas and try it out for yourself <a href="https://www.mongodb.com/cloud">here</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mongodb/develop-deploy-a-node-js-app-to-aws-elastic-beanstalk-mongodb-atlas/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
