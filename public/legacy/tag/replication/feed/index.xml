<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Replication &#8211; Andrew Morgan on Databases</title>
	<atom:link href="./feed/index.html" rel="self" type="application/rss+xml" />
	<link>./../../index.html</link>
	<description>Database technologies - especially around scalability and High Availability</description>
	<lastBuildDate>Tue, 12 May 2015 13:03:09 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>MySQL Cluster 7.4 is GA!</title>
		<link>./../../mysql-cluster/mysql-cluster-7-4-is-ga-200-million-qps-and-active-active-geor/index.html</link>
					<comments>./../../mysql-cluster/mysql-cluster-7-4-is-ga-200-million-qps-and-active-active-geor/index.html#comments</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Thu, 26 Feb 2015 16:00:47 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[7.4]]></category>
		<category><![CDATA[GA]]></category>
		<category><![CDATA[Geographic Replication]]></category>
		<category><![CDATA[Multi-Master Replication]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster 7.4]]></category>
		<category><![CDATA[NoSQL]]></category>
		<category><![CDATA[Performance]]></category>
		<category><![CDATA[Replication]]></category>
		<category><![CDATA[sql]]></category>
		<guid isPermaLink="false">./../../index.html?p=4005</guid>

					<description><![CDATA[The General Availability of MySQL Cluster 7.4 has just been announced by Oracle. The MySQL team at Oracle are excited to announce the General Availability of MySQL Cluster 7.4, ready for production workloads. MySQL Cluster 7.4.4 can be downloaded from mysql.com and the release notes viewed in the MySQL docs. Figure 1 provides a summary of the]]></description>
										<content:encoded><![CDATA[<p><a href="./../../wp-content/uploads/2015/02/MySQL-Cluster-7.4-GA-banner.jpg"><img decoding="async" class="aligncenter size-full wp-image-4021" src="./../../wp-content/uploads/2015/02/MySQL-Cluster-7.4-GA-banner.jpg" alt="MySQL Cluster 7.4 GA banner" width="600" srcset="./../../wp-content/uploads/2015/02/MySQL-Cluster-7.4-GA-banner.jpg 960w, ./../../wp-content/uploads/2015/02/MySQL-Cluster-7.4-GA-banner-300x103.jpg 300w, ./../../wp-content/uploads/2015/02/MySQL-Cluster-7.4-GA-banner-900x309.jpg 900w" sizes="(max-width: 960px) 100vw, 960px" /></a></p>
<p>The<b> General Availability of MySQL Cluster 7.4</b> has just been <a href="http://www.oracle.com/us/corporate/press/2431648" title="Oracle announces General Availability of MySQL Cluster 7.4 with 200 Million QPS" target="_blank">announced by Oracle</a>.</p>
<p>The MySQL team at Oracle are excited to announce the General Availability of MySQL Cluster 7.4, ready for production workloads.</p>
<p>MySQL Cluster 7.4.4 can be <a title="Download MySQL Cluster 7.4.4 - the GA release" href="http://dev.mysql.com/downloads/cluster/" target="_blank">downloaded from mysql.com</a> and the <a title="Changes in MySQL Cluster NDB 7.4.4 (5.6.22-ndb-7.4.4)" href="http://dev.mysql.com/doc/relnotes/mysql-cluster/7.4/en/mysql-cluster-news-5-6-22-ndb-7-4-4.html" target="_blank">release notes viewed in the MySQL docs</a>.</p>
<p>Figure 1 provides a summary of the enhancements delivered in this release:</p>
<ul>
<li>Performance
<ul>
<li>200M NoSQL Reads/Sec</li>
<li>2.5M SQL Ops/Sec</li>
<li>50% Faster Reads</li>
<li>40% Faster Mixed</li>
</ul>
</li>
<li>Active-Active
<ul>
<li>Active-Active Geographic Redundancy</li>
<li>Conflict Detection/Resolution</li>
</ul>
</li>
<li>Management
<ul>
<li>5X Faster Maintenance Ops</li>
<li>Detailed Reporting</li>
</ul>
</li>
</ul>
<div id="attachment_4007" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2015/02/MySQL-Cluster-7.4-summary.png"><img fetchpriority="high" decoding="async" aria-describedby="caption-attachment-4007" class="wp-image-4007 size-large" src="./../../wp-content/uploads/2015/02/MySQL-Cluster-7.4-summary-1024x395.png" alt="MySQL Cluster 7.4 content summary" width="480" height="185" srcset="./../../wp-content/uploads/2015/02/MySQL-Cluster-7.4-summary-1024x395.png 1024w, ./../../wp-content/uploads/2015/02/MySQL-Cluster-7.4-summary-300x116.png 300w, ./../../wp-content/uploads/2015/02/MySQL-Cluster-7.4-summary-900x347.png 900w, ./../../wp-content/uploads/2015/02/MySQL-Cluster-7.4-summary.png 1405w" sizes="(max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-4007" class="wp-caption-text">Figure 1: MySQL Cluster 7.4 content summary</p></div>
<p>The sections that follow delve into some more details.</p>
<h3>Performance</h3>
<div id="attachment_3952" style="width: 310px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23.png"><img decoding="async" aria-describedby="caption-attachment-3952" class="wp-image-3952 size-medium" src="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23-300x197.png" alt="MySQL CLuster 7.4.1 Read-Write Performance" width="300" height="197" srcset="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23-300x197.png 300w, ./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23.png 864w" sizes="(max-width: 300px) 100vw, 300px" /></a><p id="caption-attachment-3952" class="wp-caption-text">Figure 2: Read/Writes 40% Faster than MySQL Cluster 7.3</p></div>
<div id="attachment_3951" style="width: 310px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15.png"><img decoding="async" aria-describedby="caption-attachment-3951" class="wp-image-3951 size-medium" src="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15-300x199.png" alt="MySQL CLuster 7.4 Read Performance" width="300" height="199" srcset="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15-300x199.png 300w, ./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15.png 842w" sizes="(max-width: 300px) 100vw, 300px" /></a><p id="caption-attachment-3951" class="wp-caption-text">Figure 3: Reads 50% Faster than MySQL Cluster 7.3</p></div>
<h4>50% Faster Reads than MySQL Cluster 7.3</h4>
<p>Being a scaled-out, in-memory, real-time database, MySQL Cluster performance has always been great but we continue to work on making it faster each release. In particular, we want to keep pace with the trend of having more and more cores rather than faster ones. 7.4 continues along the path of better exploiting multiple cores &#8211; as can be seen from these benchmark results:</p>
<ul>
<li>Figure 3 shows that for reads, MySQL Cluster 7.4 is 50% faster than last release</li>
<li>Figure 2 shows that for mixed traffic, MySQL Cluster 7.4 is 50% faster than last release</li>
</ul>
<p>Just make sure that you&#8217;re using the multi-threaded data node (ndbmtd rather than ndbd) and have <a title="MySQL Cluster - configuring multi-threaded datanodes" href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-programs-ndbmtd.html" target="_blank">configured how many threads it should use</a>.</p>
<p>The tests were performed using a 48 core/96 thread machine (also demonstrating how well MySQL Cluster can now scale up with large numbers of cores).</p>
<p>So, the sysbench benchmark results show how much faster MySQL Cluster 7.4 is compared to the previous 2 releases (a nice apples-to-apples test but on a very small cluster without any scale-out) but we now have some even more interesting <a title="MySQL Cluster Benchmark Results" href="http://www.mysql.com/why-mysql/benchmarks/mysql-cluster/" target="_blank">benchmark results</a> showing just how well MySQL Cluster can scale out to deliver incredible results&#8230;</p>
<h4>200 Million NoSQL NoSQL QPS!</h4>
<div id="attachment_4015" style="width: 310px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2015/02/200-Million-NoSQL-QPS.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4015" class="size-medium wp-image-4015" src="./../../wp-content/uploads/2015/02/200-Million-NoSQL-QPS-300x179.png" alt="200 Million NoSQL Queries Per Second with MySQL Cluster 7.4" width="300" height="179" srcset="./../../wp-content/uploads/2015/02/200-Million-NoSQL-QPS-300x179.png 300w, ./../../wp-content/uploads/2015/02/200-Million-NoSQL-QPS-1024x612.png 1024w, ./../../wp-content/uploads/2015/02/200-Million-NoSQL-QPS-900x538.png 900w, ./../../wp-content/uploads/2015/02/200-Million-NoSQL-QPS.png 1157w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><p id="caption-attachment-4015" class="wp-caption-text">Figure 4: 200 Million NoSQL Queries Per Second</p></div>
<p>Using the <a title="Download MySQL Bechmark tools" href="http://dev.mysql.com/downloads/benchmarks.html%20" target="_blank">flexAsynch benchmark tool</a> and a pool of 32 data nodes (with each data node running on a dedicated 56 thread Intel E5-2697 v3 (Haswell) machine) the cluster was able to process 200,000,000 reads per second. These results are shown in Figure 4, where the number of data nodes are scaled on the x-axis &#8211; as you&#8217;ll observe, performance scales virtually linearly with the number of data nodes. Note that MySQL Cluster supports up to 48 data nodes and so there&#8217;s still plenty of scope to scale out even further.</p>
<h4>2.5 Million SQL Operation per Second</h4>
<div id="attachment_4017" style="width: 310px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2015/02/2.5-Million-SQL-operations-per-second.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4017" class="size-medium wp-image-4017" src="./../../wp-content/uploads/2015/02/2.5-Million-SQL-operations-per-second-300x175.png" alt="2.5 Million SQL operations per second with MySQL Cluster" width="300" height="175" srcset="./../../wp-content/uploads/2015/02/2.5-Million-SQL-operations-per-second-300x175.png 300w, ./../../wp-content/uploads/2015/02/2.5-Million-SQL-operations-per-second-1024x598.png 1024w, ./../../wp-content/uploads/2015/02/2.5-Million-SQL-operations-per-second-900x526.png 900w, ./../../wp-content/uploads/2015/02/2.5-Million-SQL-operations-per-second.png 1164w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><p id="caption-attachment-4017" class="wp-caption-text">Figure 5: 2.5 Million SQL operations per second</p></div>
<p>Using a smaller cluster (just 16 data nodes running on the same 56 thread machines), the DBT2 Benchmark has been used to assess how well SQL performance scales as more data nodes are added. SQL performance was measured at 2,500,000 SQL read opeations per minute. This equates to around 5 Million Transactions Per Minutes or 2.2 Million NewOnly TPM.</p>
<p>As can be in Figure 5 the scaling of SQL reads is again almost linear.</p>
<h3>Active-Active (Multi-Master) Replication</h3>
<p>MySQL Cluster allows bi-directional replication between two (or more) clusters. Replication within each cluster is synchronous but between clusters it is asynchronous which means the following scenario is possible:</p>
<table border="1" summary="Active-Active asynchronous replication can lead to inconsistencies between databases" width="260" align="center">
<caption align="center">Conflict with asynchronous replication</caption>
<tbody>
<tr>
<th scope="col" align="center" width="80">Site A</th>
<th scope="col" align="center" width="100">Replication</th>
<th scope="col" align="center" width="80">Site B</th>
</tr>
<tr>
<td align="center">x == 10</td>
<td></td>
<td align="center">x == 10</td>
</tr>
<tr>
<td align="center">x = 11</td>
<td></td>
<td align="center">x = 20</td>
</tr>
<tr>
<td></td>
<td align="center">&#8212; x=11 &#8211;&gt;</td>
<td align="center">x == 11</td>
</tr>
<tr>
<td align="center">x==20</td>
<td align="center">&lt;&#8211; x=20 &#8212;</td>
<td></td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>In this example a value (column for a row in a table) is set to 11 on site A and the change is queued for replication to site B. In the mean time, an application sets the value to 20 on site B and that change is queued for replication to site A. Once both sites have received and applied the replicated change from the other cluster site A contains the value 20 while site B contains 11 &#8211; in other words the databases are now inconsistent.</p>
<h4>How MySQL Cluster implements eventual consistency</h4>
<p>There are two phases to establishing consistency between both clusters after an inconsistency has been introduced:</p>
<ol>
<li>Detect that a conflict has happened</li>
<li>Resolve the inconsistency</li>
</ol>
<p>The following animation illustrates how MySQL Cluster 7.2 detects that an inconsistency has been introduced by the asynchronous, active-active replication:</p>
<div id="attachment_2149" style="width: 610px" class="wp-caption alignnone"><a href="./../../wp-content/uploads/2011/11/ReflectingGCI1.gif"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-2149" class="size-full wp-image-2149" title="ReflectingGCI" src="./../../wp-content/uploads/2011/11/ReflectingGCI1.gif" alt="" width="600" height="463" /></a><p id="caption-attachment-2149" class="wp-caption-text">Figure 6: Detecting conflicts</p></div>
<p>While we typically consider the 2 clusters in an active-active replication configuration to be peers, in this case we designate one to be the primary and the other the secondary. Reads and writes can still be sent to either cluster but it is the responsibility of the primary to identify that a conflict has arisen and then remove the inconsistency.</p>
<p>A logical clock is used to identify (in relative terms) when a change is made on the primary &#8211; for those who know something of the MySQL Cluster internals, we use the index of the Global Checkpoint that the update is contained in. For all tables that have this feature turned on, an extra, hidden column is automatically added on the primary &#8211; this represents the value of the logical clock when the change was made.</p>
<p>Once the change has been applied on the primary, there is a &#8220;window of conflict&#8221; for the effected row(s) during which if a different change is made to the same row(s) on the secondary then there will be an inconsistency. Once the slave on the secondary has applied the change from the primary, it will send a replication event back to the slave on the primary, containing the primary&#8217;s clock value associated with the changes that have just been applied on the secondary. (Remember that the clock is actually the Global Checkpoint Index and so this feature is sometimes referred to as Reflected GCI). Once the slave on the primary has received this event, it knows that all changes tagged with a clock value no later than the reflected GCI are now safe &#8211; the window of conflict has closed.</p>
<p>If an application modifies this same row on the secondary before the replication event from the primary was applied then it will send an associated replication event to the slave on the primary <strong>before</strong> it reflects the new GCI. The slave on the primary will process this replication event and compare the clock value recorded with the effected rows with the latest reflected GCI; as the clock value for the conflicting row is higher the primary recognises that a conflict has occured and will launch the algorithm to resolve the inconsistency.</p>
<div id="attachment_3950" style="width: 490px" class="wp-caption aligncenter"><a href="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-3950" class="wp-image-3950 size-large" src="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-1024x372.png" alt="Options for MySQL Cluster replication conflict detection/resolution" width="480" height="174" srcset="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-1024x372.png 1024w, ./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-300x109.png 300w, ./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-900x327.png 900w, ./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15.png 1728w" sizes="auto, (max-width: 480px) 100vw, 480px" /></a><p id="caption-attachment-3950" class="wp-caption-text">Figure 7: Options for MySQL Cluster replication conflict detection/resolution</p></div>
<p>&nbsp;</p>
<p>After a conflict has been detected, you have the option of having the database simply report the conflict to the application or have it roll back just the conflicting row or the entire transaction and all subsequent transactions that were dependent on it.</p>
<p style="text-align: left;">So &#8211; what&#8217;s new in 7.4?</p>
<ul>
<li>Selective tracking of transaction reads for improved transaction dependency tracking</li>
<li>Improved NDB Exceptions table format : Non-PK columns, operation type, transaction id, before and after values</li>
<li>Improved manageability: Online conflict role change, improved visibility into system state, operations, current and historic consistency</li>
</ul>
<h4>Configuring Active-Active Replication with Transactional Conflict Resolution</h4>
<div id="attachment_4026" style="width: 310px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2015/02/Screen-Shot-2015-02-11-at-17.36.17.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-4026" class="size-medium wp-image-4026" src="./../../wp-content/uploads/2015/02/Screen-Shot-2015-02-11-at-17.36.17-300x181.png" alt="MySQL Replication Configuration" width="300" height="181" srcset="./../../wp-content/uploads/2015/02/Screen-Shot-2015-02-11-at-17.36.17-300x181.png 300w, ./../../wp-content/uploads/2015/02/Screen-Shot-2015-02-11-at-17.36.17.png 795w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><p id="caption-attachment-4026" class="wp-caption-text">Figure 8: MySQL Replication Configuration</p></div>
<p>This section assumes that replication has already been set up between two clusters as shown in Figure 8. For more details on how to set up that configuration then refer to the blog: <a title="Enhanced conflict resolution with MySQL Cluster active-active replication" href="./../../mysql-cluster/enhanced-conflict-resolution-with-mysql-cluster-active-active-replication/%20/index.html" target="_blank">Enhanced conflict resolution with MySQL Cluster active-active replication</a>.</p>
<p>To keep things simple, just two hosts are used; 192.168.56.101 contains all nodes for the primary cluster and 192.168.56.102 will contain all nodes for the secondary. A single MySQL Server in each cluster acts as both the master and the slave.</p>
<p>The first step is to identify the tables that need conflict detection enabling. Each of those tables then has to have an entry in the mysql.ndb_replication table where they&#8217;re tagged as using the new NDB$EPOCH2_TRANS() function &#8211; you could also choose to use NDB$EPOCH(), in which case only the changes to conflicting rows will be rolled-back rather than the full transactions. A few things to note:</p>
<ul>
<li>This must be done before creating the application tables themselves</li>
<li>Should only be done on the primary</li>
<li>By default the table doesn&#8217;t exist and so the very first step is to create it</li>
</ul>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">PRIMARY&gt; CREATE TABLE mysql.ndb_replication (
-&gt;     db VARBINARY(63),
-&gt;     table_name VARBINARY(63),
-&gt;     server_id INT UNSIGNED,
-&gt;     binlog_type INT UNSIGNED,
-&gt;     conflict_fn VARBINARY(128),
-&gt;     PRIMARY KEY USING HASH (db, table_name, server_id)
-&gt; )   ENGINE=NDB
-&gt; PARTITION BY KEY(db,table_name);

PRIMARY&gt; REPLACE INTO mysql.ndb_replication VALUES ('clusterdb', 'simple1', 0, 0,  'NDB$EPOCH2_TRANS()');
PRIMARY&gt; REPLACE INTO mysql.ndb_replication VALUES ('clusterdb', 'simple2', 0, 0,'NDB$EPOCH2_TRANS()');
PRIMARY&gt; REPLACE INTO mysql.ndb_replication VALUES ('clusterdb', 'simple3', 0, 0,'NDB$EPOCH2_TRANS()');

SECONDARY&gt; SELECT * FROM mysql.ndb_replication;
+-----------+------------+-----------+-------------+--------------------+
| db        | table_name | server_id | binlog_type | conflict_fn        |
+-----------+------------+-----------+-------------+--------------------+
| clusterdb | simple2    |         0 |           0 | NDB$EPOCH2_TRANS() |
| clusterdb | simple1    |         0 |           0 | NDB$EPOCH2_TRANS() |
| clusterdb | simple3    |         0 |           0 | NDB$EPOCH2_TRANS() |
+-----------+------------+-----------+-------------+--------------------+
</pre>
<p>Refer to the <a title="Documentation for mysql.ndb_replication table" href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-replication-conflict-resolution.html#mysql-cluster-ndb-replication-table" target="_blank">MySQL Cluster documentation</a> for details on the contents of the mysql.ndb_replication table.</p>
<p>The next step is to define which MySQL Cluster instance is to act as the PRIMARY and which as the SECONDARY (note that the slave SQL thread must be halted to make this change):</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">PRIMARY&gt; STOP SLAVE SQL_THREAD;
SECONDARY&gt; STOP SLAVE SQL_THREAD;
PRIMARY&gt; SET GLOBAL ndb_slave_conflict_role='PRIMARY';
SECONDARY&gt; SET GLOBAL ndb_slave_conflict_role='SECONDARY';
SECONDARY&gt; START SLAVE SQL_THREAD;
PRIMARY&gt; START SLAVE SQL_THREAD;
</pre>
<p>For each of these tables you should also create an exceptions table which will record any conflicts that have resulted in changes being rolled back; the format of these tables is rigidly defined and so take care to copy the types exactly; again this only needs doing on the primary:</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">PRIMARY&gt; CREATE DATABASE clusterdb;USE clusterdb;

PRIMARY&gt; CREATE TABLE simple1$EX (
NDB$server_id INT UNSIGNED,
NDB$master_server_id INT UNSIGNED,
NDB$master_epoch BIGINT UNSIGNED,
NDB$count INT UNSIGNED,
NDB$OP_TYPE ENUM('WRITE_ROW','UPDATE_ROW', 'DELETE_ROW', 'REFRESH_ROW', 'READ_ROW') NOT NULL,
NDB$CFT_CAUSE ENUM('ROW_DOES_NOT_EXIST', 'ROW_ALREADY_EXISTS', 'DATA_IN_CONFLICT', 'TRANS_IN_CONFLICT') NOT NULL,
NDB$ORIG_TRANSID BIGINT UNSIGNED NOT NULL,
id INT NOT NULL,
value$OLD INT,
value$NEW INT,
PRIMARY KEY(NDB$server_id, NDB$master_server_id, NDB$master_epoch, NDB$count)) ENGINE=NDB;

PRIMARY&gt; CREATE TABLE simple2$EX (
NDB$server_id INT UNSIGNED,
NDB$master_server_id INT UNSIGNED,
NDB$master_epoch BIGINT UNSIGNED,
NDB$count INT UNSIGNED,
NDB$OP_TYPE ENUM('WRITE_ROW','UPDATE_ROW', 'DELETE_ROW', 'REFRESH_ROW', 'READ_ROW') NOT NULL,
NDB$CFT_CAUSE ENUM('ROW_DOES_NOT_EXIST', 'ROW_ALREADY_EXISTS', 'DATA_IN_CONFLICT', 'TRANS_IN_CONFLICT') NOT NULL,
NDB$ORIG_TRANSID BIGINT UNSIGNED NOT NULL,
id INT NOT NULL,
value$OLD INT,
value$NEW INT,
PRIMARY KEY(NDB$server_id, NDB$master_server_id, NDB$master_epoch, NDB$count)) ENGINE=NDB;

PRIMARY&gt; CREATE TABLE simple3$EX (
NDB$server_id INT UNSIGNED,
NDB$master_server_id INT UNSIGNED,
NDB$master_epoch BIGINT UNSIGNED,
NDB$count INT UNSIGNED,
NDB$OP_TYPE ENUM('WRITE_ROW','UPDATE_ROW', 'DELETE_ROW', 'REFRESH_ROW', 'READ_ROW') NOT NULL,
NDB$CFT_CAUSE ENUM('ROW_DOES_NOT_EXIST', 'ROW_ALREADY_EXISTS', 'DATA_IN_CONFLICT', 'TRANS_IN_CONFLICT') NOT NULL,
NDB$ORIG_TRANSID BIGINT UNSIGNED NOT NULL,
id INT NOT NULL,
value$OLD INT,
value$NEW INT,
PRIMARY KEY(NDB$server_id, NDB$master_server_id, NDB$master_epoch, NDB$count)) ENGINE=NDB;
</pre>
<p>Refer to the <a title="Documentation for MySQL Cluster exception tables" href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-replication-conflict-resolution.html#mysql-cluster-replication-exceptions-table" target="_blank">MySQL Cluster documentation</a> for details on the format of the exception tables.</p>
<p>Finally, the application tables themselves can be created (this only needs doing on the primary as they&#8217;ll be replicated to the secondary):</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">PRIMARY&gt; CREATE TABLE simple1 (id INT NOT NULL PRIMARY KEY, value INT) ENGINE=ndb;
PRIMARY&gt; CREATE TABLE simple2 (id INT NOT NULL PRIMARY KEY, value INT) ENGINE=ndb;
PRIMARY&gt; CREATE TABLE simple3 (id INT NOT NULL PRIMARY KEY, value INT) ENGINE=ndb;
</pre>
<p>Everything is now set up and the new configuration can be tested to ensure that conflicts are detected and the correct updates are rolled back.</p>
<h4>Testing Active-Active Replication with Transactional Conflict Resolution</h4>
<p>The first step is to add some data to our new tables (note that at this point replication is running and so they only need to be created on the primary) and confirm that everything is replicated to the secondary:</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">PRIMARY&gt; REPLACE INTO simple1 VALUES (1,10);
PRIMARY&gt; REPLACE INTO simple2 VALUES (1,10);
PRIMARY&gt; REPLACE INTO simple3 VALUES (1,10);

SECONDARY&gt; SELECT * FROM simple1;
+----+-------+
| id | value |
+----+-------+
|  1 |    10 |
+----+-------+

SECONDARY&gt; SELECT * FROM simple2;
+----+-------+
| id | value |
+----+-------+
|  1 |    10 |
+----+-------+

SECONDARY&gt; SELECT * FROM simple3;
+----+-------+
| id | value |
+----+-------+
|  1 |    10 |
+----+-------+
</pre>
<p>It is important that the NDB$EPOCH2_TRANS() function rolls back any transactions on the secondary that involve a conflict (as well as subsequent, dependent transactions that modify the same rows); to intentionally trigger this, the simplest approach is to stop the slave IO thread on the secondary Cluster in order to increase the size of the window of conflict (which is otherwise very short). Once the slave IO thread has been stopped a change is made to table simple1 on the primary and then the secondary makes a (conflicting) change to the same row as well as making a change to table simple2 in the same transaction. A second transaction on the primary will change a row in simple3 &#8211; as it doesn&#8217;t touch any rows that have been involved in a conflict then that change should stand.</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">SECONDARY&gt; STOP SLAVE IO_THREAD;

PRIMARY&gt; UPDATE simple1 SET value=13 WHERE id=1;

SECONDARY&gt; BEGIN; # conflicting transaction
SECONDARY&gt; UPDATE simple1 SET value=20 WHERE id=1;
SECONDARY&gt; UPDATE simple2 SET value=20 WHERE id=1;
SECONDARY&gt; COMMIT;
SECONDARY&gt; UPDATE simple3 SET value=20 WHERE id=1; # non conflicting

SECONDARY&gt; SELECT * FROM simple1; SELECT * FROM simple2; SELECT * FROM simple3;
+----+-------+
| id | value |
+----+-------+
|  1 |    20 |
+----+-------+

+----+-------+
| id | value |
+----+-------+
|  1 |    20 |
+----+-------+

+----+-------+
| id | value |
+----+-------+
|  1 |    20 |
+----+-------+
</pre>
<p>If you now check the exception tables then you can see that the primary has received the changes from the secondary and because the first transaction updated the same row in simple1 during its window of conflict it has recorded that the change needs to be rolled back &#8211; this will happen as soon as the replication thread is restarted on the secondary:</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">PRIMARY&gt; SELECT * FROM simple1$EX\G
*************************** 1. row ***************************
NDB$server_id: 9
NDB$master_server_id: 20
NDB$master_epoch: 31344671326216
NDB$count: 3
NDB$OP_TYPE: UPDATE_ROW
NDB$CFT_CAUSE: TRANS_IN_CONFLICT
NDB$ORIG_TRANSID: 193282978304
id: 1
value$OLD: 10
value$NEW: 20
1 row in set (0.00 sec)

PRIMARY&gt; SELECT * FROM simple2$EX\G
*************************** 1. row ***************************
NDB$server_id: 9
NDB$master_server_id: 20
NDB$master_epoch: 31344671326216
NDB$count: 1
NDB$OP_TYPE: UPDATE_ROW
NDB$CFT_CAUSE: TRANS_IN_CONFLICT
NDB$ORIG_TRANSID: 193282978304
id: 1
value$OLD: 10
value$NEW: 20

PRIMARY&gt; SELECT * FROM simple3$EX\G
Empty set (0.01 sec)

SECONDARY&gt; START SLAVE IO_THREAD;

SECONDARY&gt; SELECT * FROM simple1; SELECT * FROM simple2; SELECT * FROM simple3;
+----+-------+
| id | value |
+----+-------+
|  1 |    13 |
+----+-------+

+----+-------+
| id | value |
+----+-------+
|  1 |    10 |
+----+-------+

+----+-------+
| id | value |
+----+-------+
|  1 |    20 |
+----+-------+
</pre>
<p>These are the results we expect &#8211; simple1 has the value set by the primary with the subsequent change on the secondary rolled back; simple2 was not updated by the primary but the change on the secondary was rolled back as it was made in the same transaction as the conflicting update to simple1. The change on the secondary to simple3 has survived as it was made outside of any conflicting transaction and the change was not dependent on any conflicting changes. Finally just confirm that the data is identical on the primary:</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">PRIMARY&gt; SELECT * FROM simple1; SELECT * FROM simple2; SELECT * FROM simple3;
+----+-------+
| id | value |
+----+-------+
|  1 |    13 |
+----+-------+

+----+-------+
| id | value |
+----+-------+
|  1 |    10 |
+----+-------+

+----+-------+
| id | value |
+----+-------+
|  1 |    20 |
+----+-------+
</pre>
<p>Statistics are provided on the primary that record that 1 conflict has been detected, effecting 1 transaction and that it resulted in 2 row changes being rolled back:</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">PRIMARY&gt; SHOW STATUS LIKE 'ndb_conflict%';
+------------------------------------------+----------------+
| Variable_name                            | Value          |
+------------------------------------------+----------------+
| Ndb_conflict_fn_max                      | 0              |
| Ndb_conflict_fn_old                      | 0              |
| Ndb_conflict_fn_max_del_win              | 0              |
| Ndb_conflict_fn_epoch                    | 0              |
| Ndb_conflict_fn_epoch_trans              | 0              |
| Ndb_conflict_fn_epoch2                   | 0              |
| Ndb_conflict_fn_epoch2_trans             | 1              |
| Ndb_conflict_trans_row_conflict_count    | 1              |
| Ndb_conflict_trans_row_reject_count      | 2              |
| Ndb_conflict_trans_reject_count          | 1              |
| Ndb_conflict_trans_detect_iter_count     | 1              |
| Ndb_conflict_trans_conflict_commit_count | 1              |
| Ndb_conflict_epoch_delete_delete_count   | 0              |
| Ndb_conflict_reflected_op_prepare_count  | 0              |
| Ndb_conflict_reflected_op_discard_count  | 0              |
| Ndb_conflict_refresh_op_count            | 0              |
| Ndb_conflict_last_conflict_epoch         | 37391985278995 |
| Ndb_conflict_last_stable_epoch           | 37417755082760 |
+------------------------------------------+----------------+

SECONDARY&gt; SHOW STATUS LIKE 'ndb_conflict%';
+------------------------------------------+----------------+
| Variable_name                            | Value          |
+------------------------------------------+----------------+
| Ndb_conflict_fn_max                      | 0              |
| Ndb_conflict_fn_old                      | 0              |
| Ndb_conflict_fn_max_del_win              | 0              |
| Ndb_conflict_fn_epoch                    | 0              |
| Ndb_conflict_fn_epoch_trans              | 0              |
| Ndb_conflict_fn_epoch2                   | 0              |
| Ndb_conflict_fn_epoch2_trans             | 0              |
| Ndb_conflict_trans_row_conflict_count    | 0              |
| Ndb_conflict_trans_row_reject_count      | 0              |
| Ndb_conflict_trans_reject_count          | 0              |
| Ndb_conflict_trans_detect_iter_count     | 0              |
| Ndb_conflict_trans_conflict_commit_count | 0              |
| Ndb_conflict_epoch_delete_delete_count   | 0              |
| Ndb_conflict_reflected_op_prepare_count  | 1              |
| Ndb_conflict_reflected_op_discard_count  | 1              |
| Ndb_conflict_refresh_op_count            | 2              |
| Ndb_conflict_last_conflict_epoch         | 32280974196749 |
| Ndb_conflict_last_stable_epoch           | 18897856102416 |
+------------------------------------------+----------------+
</pre>
<p>These status variables are described in the <a title="MySQL Cluster conflict detecion/resoultion status variables" href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-status-variables.html" target="_blank">MySQL Cluster documentation</a>.</p>
<h3>Faster Restarts</h3>
<p>You can restart MySQL Cluster processes (nodes) without losing database service (for example if adding extra memory to a server) and so on the face of it, the speed of the restarts isn&#8217;t that important. Having said that, while the node is restarting you&#8217;ve lost some of your high-availability which for super-critical applications can make you nervous. Additionally, faster restarts mean that you can complete maintenance activities faster &#8211; for example, a software upgrade requires a rolling restart of all of the nodes &#8211; if you have 48 data nodes then you want each of the data nodes to restart as quickly as possible.</p>
<p>MySQL 7.4 includes a number of optimisations to the restart code and so if you&#8217;re already using MySQL Cluster, it might be interesting to see how much faster it gets for your application.</p>
<h3>Enhanced Reporting</h3>
<p>MySQL Cluster presents a lot of monitoring information through the ndbinfo database and in 7.4 we&#8217;ve added some extra information on how memory is used for individual tables and how operations are distributed.</p>
<h4>Extra Memory Reporting</h4>
<p>MySQL Cluster allocates all of the required memory when a data node starts and so any information on memory usage from the operating system is of limited use and provides no clues as to how memory is used with the data nodes &#8211; for example, which tables are using the most memory. Also, as this is a distributed database, it is helpful to understand whether a particular table is using a similar amount of memory in each data node (if not then it could be that a better partitioning/sharding key could be used). Finally, when rows are deleted from a table, the memory for those rows would typically remain allocated against that table and so it is helpful to understand how many of these ‘empty slots’ are available for use by new rows in that table. MySQL Cluster 7.4 introduces a new table – <a title="Understanding how memory is used in mmc" href="%20http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-ndbinfo-memory-per-fragment.html" target="_blank">ndbinfo.memory_per_fragment</a> &#8211; that provides that information.</p>
<p>For example; to see how much memory is being used by each data node for a particular table&#8230;</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">mysql&gt; CREATE DATABASE clusterdb;USE clusterdb;
mysql&gt; CREATE TABLE simples (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY) ENGINE=NDB;
mysql&gt; SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |      131072 |       5504 |        172 |
|    1 |    2 |      131072 |       1280 |         40 |
|    2 |    0 |      131072 |       5504 |        172 |
|    2 |    2 |      131072 |       1280 |         40 |
|    3 |    1 |      131072 |       3104 |         97 |
|    3 |    3 |      131072 |       4256 |        133 |
|    4 |    1 |      131072 |       3104 |         97 |
|    4 |    3 |      131072 |       4256 |        133 |
+------+------+-------------+------------+------------+
</pre>
<p>When you delete rows from a MySQL Cluster table, the memory is not actually freed up and so if you check the existing <a title="memoryusage table" href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-ndbinfo-memoryusage.html" target="_blank">memoryusage table</a> you won&#8217;t see a change. This memory will be reused when you add new rows to that same table. In MySQL Cluster 7.4, it&#8217;s possible to see how much memory is in that state for a table&#8230;</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">mysql&gt; SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |      131072 |       5504 |        172 |
|    1 |    2 |      131072 |       1280 |         40 |
|    2 |    0 |      131072 |       5504 |        172 |
|    2 |    2 |      131072 |       1280 |         40 |
|    3 |    1 |      131072 |       3104 |         97 |
|    3 |    3 |      131072 |       4256 |        133 |
|    4 |    1 |      131072 |       3104 |         97 |
|    4 |    3 |      131072 |       4256 |        133 |
+------+------+-------------+------------+------------+
mysql&gt; DELETE FROM clusterdb.simples LIMIT 1;
mysql&gt; SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |      131072 |       5504 |        172 |
|    1 |    2 |      131072 |       1312 |         41 |
|    2 |    0 |      131072 |       5504 |        172 |
|    2 |    2 |      131072 |       1312 |         41 |
|    3 |    1 |      131072 |       3104 |         97 |
|    3 |    3 |      131072 |       4288 |        134 |
|    4 |    1 |      131072 |       3104 |         97 |
|    4 |    3 |      131072 |       4288 |        134 |
+------+------+-------------+------------+------------+
</pre>
<p>As a final example, we can check whether a table is being evenly sharded accross the data nodes (in this case a realy bad sharding key was chosen)&#8230;</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">mysql&gt; CREATE TABLE simples (id INT NOT NULL AUTO_INCREMENT, \
        species VARCHAR(20) DEFAULT "Human", 
        PRIMARY KEY(id, species)) engine=ndb PARTITION BY KEY(species);

// Add some data

mysql&gt; SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |           0 |          0 |          0 |
|    1 |    2 |      196608 |      11732 |        419 |
|    2 |    0 |           0 |          0 |          0 |
|    2 |    2 |      196608 |      11732 |        419 |
|    3 |    1 |           0 |          0 |          0 |
|    3 |    3 |           0 |          0 |          0 |
|    4 |    1 |           0 |          0 |          0 |
|    4 |    3 |           0 |          0 |          0 |
+------+------+-------------+------------+------------+
</pre>
<h4>Extra Operations Reporting</h4>
<p>To ensure that resources are being used effectively, it is very helpful to understand the how each table is being access (how frequently and for what types of operations). To support this, the ndbinfo. operations_per_fragment table is provided. For example, the data in this table would let you identify that a large number of full table scans are performed on a particular table.</p>
<p>It is also important to identify if there are any hotspots where a disproportionate share of the queries for a table are hitting a particular fragment/data node. Again, <a title="Monitoring the distributed nature of operations in MySQL Cluster" href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-ndbinfo-operations-per-fragment.html" target="_blank">ndbinfo. operations_per_fragment</a> provides this information.</p>
<p>As an example of how to use some of the data from this table, a simple table is created and populated and then ndbinfo.operations_per_fragment is used to monitor how many Primary Key reads and table scans are performed[1]:</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">mysql&gt; CREATE TABLE simples (id INT AUTO_INCREMENT PRIMARY KEY, time TIMESTAMP) ENGINE=NDB;

mysql&gt; SELECT fq_name AS 'Table', node_id AS 'Data Node', tot_key_reads AS 'Reads', tot_frag_scans AS 'Scans' FROM ndbinfo.operations_per_fragment WHERE fq_name LIKE '%simples';
+-----------------------+-----------+-------+-------+
| Table                 | Data Node | Reads | Scans |
+-----------------------+-----------+-------+-------+
| clusterdb/def/simples |         3 |     0 |     1 |
| clusterdb/def/simples |         3 |     0 |     0 |
| clusterdb/def/simples |         4 |     0 |     0 |
| clusterdb/def/simples |         4 |     0 |     1 |
+-----------------------+-----------+-------+-------+

mysql&gt; REPLACE INTO simples VALUES ();  # Repeated several times
mysql&gt; SELECT * FROM simples;
+----+---------------------+
| id | time                |
+----+---------------------+
|  7 | 2015-01-22 15:12:42 |
…
|  8 | 2015-01-22 15:12:58 |
+----+---------------------+
23 rows in set (0.00 sec)

mysql&gt; SELECT fq_name AS 'Table', node_id AS 'Data Node', tot_key_reads AS 'Reads', tot_frag_scans AS 'Scans' FROM ndbinfo.operations_per_fragment WHERE fq_name LIKE '%simples';
+-----------------------+-----------+-------+-------+
| Table                 | Data Node | Reads | Scans |
+-----------------------+-----------+-------+-------+
| clusterdb/def/simples |         3 |     0 |     2 |
| clusterdb/def/simples |         3 |     0 |     0 |
| clusterdb/def/simples |         4 |     0 |     0 |
| clusterdb/def/simples |         4 |     0 |     2 |
+-----------------------+-----------+-------+-------+

mysql&gt; SELECT * FROM simples WHERE id=11;
+----+---------------------+
| id | time                |
+----+---------------------+
| 11 | 2015-01-22 15:12:59 |
+----+---------------------+

mysql&gt; SELECT fq_name AS 'Table', node_id AS 'Data Node', tot_key_reads AS 'Reads', tot_frag_scans AS 'Scans' FROM ndbinfo.operations_per_fragment WHERE fq_name LIKE '%simples';
+-----------------------+-----------+-------+-------+
| Table                 | Data Node | Reads | Scans |
+-----------------------+-----------+-------+-------+
| clusterdb/def/simples |         3 |     0 |     2 |
| clusterdb/def/simples |         3 |     0 |     0 |
| clusterdb/def/simples |         4 |     0 |     0 |
| clusterdb/def/simples |         4 |     1 |     2 |
+-----------------------+-----------+-------+-------+
</pre>
<p>Note that there are two rows listed for each data node but only one row for each has non-zero values; this is because each data node holds the primary fragment for one of the partitions and the secondary fragment for the other – all operations are performed only on the active fragments. This is made clearer if the fragment number is included in the query:</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">mysql&gt; SELECT fq_name AS 'Table', node_id AS 'Data Node', fragment_num AS 'Fragment', tot_key_reads AS 'Reads', tot_frag_scans AS 'Scans' FROM ndbinfo.operations_per_fragment WHERE fq_name LIKE '%simples';
+-----------------------+-----------+----------+-------+-------+
| Table                 | Data Node | Fragment | Reads | Scans |
+-----------------------+-----------+----------+-------+-------+
| clusterdb/def/simples |         3 |        0 |     0 |     2 |
| clusterdb/def/simples |         3 |        1 |     0 |     0 |
| clusterdb/def/simples |         4 |        0 |     0 |     0 |
| clusterdb/def/simples |         4 |        1 |     1 |     2 |
+-----------------------+-----------+----------+-------+-------+
</pre>
<h3>Conclusion</h3>
<p>We&#8217;re really excited about the GA for this new MySQL Cluster release; if you get chance to try it out then please let us know how you get on &#8211; either through a comment on this blog, a <a title="MySQL bug report" href="http://bugs.mysql.com/" target="_blank">MySQL bug report</a> or a post to the <a title="MySQL Cluster Forum" href="http://forums.mysql.com/list.php?25" target="_blank">MySQL Cluster Forum</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql-cluster/mysql-cluster-7-4-is-ga-200-million-qps-and-active-active-geor/feed/index.html</wfw:commentRss>
			<slash:comments>8</slash:comments>
		
		
			</item>
		<item>
		<title>Choosing the right MySQL High Availability Solution – webinar replay</title>
		<link>./../../mysql/choosing-the-right-mysql-high-availability-solution-webinar-replay/index.html</link>
					<comments>./../../mysql/choosing-the-right-mysql-high-availability-solution-webinar-replay/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 20 Feb 2015 14:49:01 +0000</pubDate>
				<category><![CDATA[MySQL]]></category>
		<category><![CDATA[clustering]]></category>
		<category><![CDATA[DRBD]]></category>
		<category><![CDATA[fabric]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[High Availability]]></category>
		<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[Replication]]></category>
		<category><![CDATA[Scale]]></category>
		<guid isPermaLink="false">./../../index.html?p=4038</guid>

					<description><![CDATA[Earlier this week, I presented a webinar on MySQL High Availability options for MySQL &#8211; what they are and how to choose the most appropriate one for your application. The replay of this webinar can now be viewed here or if you just want to look at the charts then scroll down. At the end]]></description>
										<content:encoded><![CDATA[<p><a href="./../../wp-content/uploads/2013/10/MySQL-HA-Logo1.png"><img loading="lazy" decoding="async" class="aligncenter size-full wp-image-2970" src="./../../wp-content/uploads/2013/10/MySQL-HA-Logo1.png" alt="MySQL-HA-Logo1.png" width="950" height="100" srcset="./../../wp-content/uploads/2013/10/MySQL-HA-Logo1.png 950w, ./../../wp-content/uploads/2013/10/MySQL-HA-Logo1-300x31.png 300w" sizes="auto, (max-width: 950px) 100vw, 950px" /></a>Earlier this week, I presented a webinar on MySQL High Availability options for MySQL &#8211; what they are and how to choose the most appropriate one for your application.</p>
<p>The <a title="Achieving MySQL High Availability, Learn to Select Your Best Option - webinar replay" href="https://event.on24.com/eventRegistration/EventLobbyServlet?target=reg20.jsp&amp;eventid=930247&amp;sessionid=1&amp;key=FF21049401BAD50579B6733B15BC9D36&amp;sourcepage=register" target="_blank">replay of this webinar can now be viewed here</a> or if you just want to look at the charts then scroll down. At the end of this post, I include a summary of the Q&amp;A from the webinar.</p>
<p><span style="color: #333399;">How important is your data? Can you afford to lose it? What about just some of it? What would be the impact if you couldn&#8217;t access it for a minute, an hour, a day or a week?</span></p>
<p><span style="color: #333399;">Different applications can have very different requirements for High Availability. Some need 100% data reliability with 24x7x365 read &amp; write access while many others are better served by a simpler approach with more modest HA ambitions.</span></p>
<p><span style="color: #333399;">MySQL has an array of High Availability solutions ranging from simple backups, through replication and shared storage clustering &#8211; all the way up to 99.999% available shared nothing, geographically replicated clusters. These solutions also have different &#8216;bonus&#8217; features such as full InnoDB compatibility, in-memory real-time performance, linear scalability and SQL &amp; NoSQL APIs.</span></p>
<p><span style="color: #333399;">The purpose of this webinar is to help you decide where your application sits in terms of HA requirements and discover which of the MySQL solutions best fit the bill. It will also cover what you need outside of the database to ensure High Availability &#8211; state of the art monitoring being a prime example.</span></p>
<h2>The charts</h2>
<p>&nbsp;</p>
<p><iframe loading="lazy" src="//www.slideshare.net/slideshow/embed_code/44927297" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></p>
<h2></h2>
<h2>Questions and Answers</h2>
<ul>
<li><strong>What does &#8220;HA&#8221; stands for?</strong> High Availability</li>
<li><strong>What is meant by scale-out?</strong> Scale-out is where you increase the capacity or the throughput of the system by adding extra (usually commodity) machines &#8211; this is the opposite of scale-up where you buy the biggest single server that you can find. It tends to be much more economical this way and you can add extra capacity if and when you need it.</li>
<li><strong>Most of my applications are for small businesses were the data load is not that big, is this session worth listening too?</strong> Yes &#8211; the focus of this presentation is on keeping your data safe and accessible, not on scaling to massive volumes and throughput. Scale-out is touched on as if you need that as well then it can influence your choice of High Availability solution</li>
<li><strong>How does all this compare with Amazon Aurora?</strong> Aurora is something that&#8217;s offered by Amazon and is supported by them. Aurora can only be run on AWS &#8211; the solutions covered here can be taken to lots of different environments &#8211; whether cloud or &#8216;bare metal&#8217;</li>
<li><strong>what amount of work would be involved in migrating actual InnoDB based DB&#8217;s into NDB?</strong> As you&#8217;d expect, it depends on the application. Changes should be minor to get it to run but you might need to make more adjustments to get the best performance. This <a title="MySQL Cluster Evaluation Guide" href="http://www.mysql.com/why-mysql/white-papers/mysql-cluster-evaluation-guide/" target="_blank">white paper</a> is a good place to start.</li>
<li><strong>Is it possible to migrate InnoDB data to MySQL Cluster?</strong> Yes. The first thing to note is that to use MySQL Cluster, you have to use the mysqld (MySQL Server) process that comes with the MySQL Cluster package; once you&#8217;ve switched to that binary then you can run ALTER TABLE my_tab ENGINE=NDB; provided that your schema is compatible with MySQL Cluster. Alternatively you can perform a mysqldump and then load the data in.</li>
<li><strong>Does MySQL Fabric solutions support &#8220;rolling upgrade&#8221;?</strong> Yes &#8211; you can perform a rolling upgrade of the managed MySQL Servers but you have to do it yourself, Fabric doesn&#8217;t automate it at present</li>
<li><strong>What about master-master replication?</strong> You can use active-active replication but the application is responsibe for avoiding conflicts between the two sites unless you use MySQL Cluster/NDB (where the functionality is built into the database)</li>
<li><strong>What&#8217;s the maximum distance that the master and slave can be apart?</strong> For MySQL Replication, there is no maximum distance; the latency of the master isn&#8217;t impacted if you stick with the default asynchronous replication. If you use semi-synchronous replication then the latency of your transactions will be impacted by the WAN latency between the master and slave site(s).</li>
<li><strong>Is there a monetary investment to implement this or is it free?</strong> The database technology presented in this session can be used under the GPL open source license; if you buy a commercal edition then you get access to some additional tools such as MySQL Enterprise Monitor and MySQL Cluster Manager.</li>
<li><strong>Can we check the transaction sequence in slave side?</strong> Yes, with MySQL replication, you can check which transactions have been applied on the slave.</li>
<li><strong>Can the slave switch over to master, in case the master needs to be shut down?</strong> Yes &#8211; that&#8217;s a very common use case</li>
<li><strong>Do we have seperate binlog for different databases (schemas)?</strong> All of the databases (schemas) within the MySQL Server use the same binary log. When that log file fills up, it&#8217;s rotated out and a new one used.</li>
<li><strong>How can I implement &#8220;auto-failover&#8221; in mysql 5.6 replication? Are you talking abaout &#8220;mysqlfailover&#8221; script?</strong> You can use the mysqlfailover utility or MySQL Fabric</li>
<li><strong>What are the similarties and differences between InnoDB and the NDB/MySQL Cluster engines?</strong> We&#8217;ll cover some of this in this presentation and you can find more details in this <a title="MySQL Cluster Evaluation Guide" href="http://www.mysql.com/why-mysql/white-papers/mysql-cluster-evaluation-guide/" target="_blank">white paper</a></li>
<li><strong>With master-master replication, there were some parameters to control the autoincrement IDs so that we could avoid conflicts with active-active MySQL replication?</strong> If you ensure that the same row isn&#8217;t written to on both masters then you can avoid conflicts. One option could be to store odd primary keys on one and even on the other. You can then set the <a title="auto_increment_increment" href="http://dev.mysql.com/doc/refman/5.0/en/replication-options-master.html#sysvar_auto_increment_increment" target="_blank">auto_increment_increment</a> and <a title="auto_increment_offset" href="http://dev.mysql.com/doc/refman/5.0/en/replication-options-master.html#sysvar_auto_increment_offset" target="_blank">auto_increment_offset</a> parameters and then use auto-increment primary keys on each MySQL Server</li>
<li><strong>Is there an online backup tool available in mysql &#8211; without locking my database?</strong> Yes &#8211; if you&#8217;re using InnoDB then you can use MySQL Enterprise Backup (part of MySQL Enterprise Edition and it&#8217;s also <em>much</em> faster than mysqldump); MySQL Cluster it has a built-in online backup tool (which can be simpler to use in conjunction with MySQL Cluter Manager which is part of MySQL Cluster Carrier Grade Edition)</li>
<li><strong>In multi-source replication, how are data conflicts handled? If more than one master modifies the same row, which one is applied?</strong> That&#8217;s left as an exercise for the application. The application is responsible for making sure that there are no conflicting updates (if you care about the conflicts). You could also use MySQL Fabric to shard the data.</li>
<li><strong>With MySQL Group Replication, if one master is down, will transactions still be applied?</strong> With MySQL Group Replication, updates can be sent to any of the servers and so if one is unavailable just switch to any of the others</li>
<li><strong>what is the maximum data size MySQL can handle in it&#8217;s latest release?</strong> The maximum size of an InnoDB table[space] is four billion pages (64TB with the default 16k page size). Beyond that you start partitioning or use MySQL Fabric</li>
<li><strong>Can you give a short definition for sharding?</strong> Sharding is where you take the data for a table and split it accross multiple MySQL Server instances. Typically you&#8217;ll choose one or more columns from the table to act as the sharding key to decide which shard a specific row should be stored in. You can also have functional sharding where you decide that the whole of table A will be in one shard and all of table B in another</li>
<li><strong>Is there a storage engine to handle JSON documents?</strong> Here&#8217;s an <a title="JSON queries using MySQL" href="interesting blog on that topic. http://blog.ulf-wendel.de/2013/mysql-5-7-sql-functions-for-json-udf/" target="_blank">interesting blog on that topic</a></li>
<li><strong>What algorithms are available for sharding in MySQL?</strong> With MySQL Fabric you can use a hash or define ranges for the shard key. With MySQL Cluster, the sharding is completely transparrent to the application but it uses a MD5 hashing under the covers</li>
<li><strong>In MySQL cluster is all the data replicated to all of the data nodes?</strong> Data is synchrously replicated between the 2 data nodes forming a node group. Different node groups are responsible for different shards for any given table</li>
<li><strong>What&#8217;s the maximum number of data nodes in MySQL Cluster?</strong> 48</li>
<li><strong>Which it best inter-connect method between MySQL Cluster data nodes for highest performance?</strong> Infiniband and GB Ethernet have both shown great results. If you&#8217;re able to configure the behaviour then low latency will help get the best performance</li>
<li><strong>Can I colocate MySQL Cluster data nodes with MySQL Servers in order use all posible resources?</strong> Yes, you can co-locate data nodes and MySQL Servers. Note that the management node (ndb_mgmd) should not run on the same machine as any of the data nodes &#8211; <a title="read this post for details on how to deploy MySQL Cluster nodes for High Availability" href="./../../mysql-cluster/mysql-cluster-fault-tolerance-impact-of-deployment-decisions/index.html" target="_blank">read this post for details on how to deploy MySQL Cluster nodes for High Availability</a></li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql/choosing-the-right-mysql-high-availability-solution-webinar-replay/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL Replication: What’s New in MySQL 5.7 and Beyond &#8211; webinar replay</title>
		<link>./../../mysql-replication/mysql-replication-whats-new-in-mysql-5-7-and-beyond-webinar-replay/index.html</link>
					<comments>./../../mysql-replication/mysql-replication-whats-new-in-mysql-5-7-and-beyond-webinar-replay/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Mon, 01 Dec 2014 09:23:23 +0000</pubDate>
				<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[High Availability]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[Replication]]></category>
		<category><![CDATA[secondary]]></category>
		<guid isPermaLink="false">./../../index.html?p=3980</guid>

					<description><![CDATA[Luís Soares and I recently hosted a webinar which explained the latest developments in MySQL Replication. The webinar replay is now available to download from here. Details: Continuing in the footsteps of its predecessor, MySQL 5.7 is set to be a groundbreaking release. In this webinar, the engineers behind the product provide insights into what’s]]></description>
										<content:encoded><![CDATA[<p><a href="./../../wp-content/uploads/2014/03/MySQL_Replication.png"><img loading="lazy" decoding="async" class="alignright size-medium wp-image-3803" src="./../../wp-content/uploads/2014/03/MySQL_Replication-300x101.png" alt="MySQL Replication Logo" width="300" height="101" srcset="./../../wp-content/uploads/2014/03/MySQL_Replication-300x101.png 300w, ./../../wp-content/uploads/2014/03/MySQL_Replication-1024x347.png 1024w, ./../../wp-content/uploads/2014/03/MySQL_Replication-900x305.png 900w, ./../../wp-content/uploads/2014/03/MySQL_Replication.png 1240w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a>Luís Soares and I recently hosted a webinar which explained the latest developments in MySQL Replication.</p>
<p>The webinar replay is now <a title="MySQL 5.7 latest developments" href="http://event.on24.com/eventRegistration/EventLobbyServlet?target=lobby.jsp&amp;eventid=880903&amp;sessionid=1&amp;key=C7FC018C0640492A4A758F6DCE77C87F&amp;eventuserid=109013173" target="_blank">available to download from here</a>.</p>
<p><iframe loading="lazy" src="//www.slideshare.net/slideshow/embed_code/42205145" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></p>
<h3>Details:</h3>
<p>Continuing in the footsteps of its predecessor, MySQL 5.7 is set to be a groundbreaking release. In this webinar, the engineers behind the product provide insights into what’s new for MySQL replication in the latest 5.7 Development Milestone Release and review the early access features available via labs.mysql.com. The next generation of replication features cover several technical areas such as better semi-synchronous replication, an enhanced multithreaded slave (per-transaction parallelism), improved monitoring with performance schema tables, online configuration changes, options for fine-tuning replication performance, support for more-advanced topologies with multisource replication, and much more. This is also a great chance to learn about MySQL Group Replication &#8211; the next generation of active-active, update-anywhere replication for MySQL.</p>
<p>Seize the opportunity to learn how you will be able to leverage MySQL 5.7 replication to grow your business.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql-replication/mysql-replication-whats-new-in-mysql-5-7-and-beyond-webinar-replay/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Upcoming Webinar &#8211; MySQL Replication: What’s New in MySQL 5.7 and Beyond</title>
		<link>./../../mysql-replication/upcoming-webinar-mysql-replication-whats-new-in-mysql-5-7-and-beyond/index.html</link>
					<comments>./../../mysql-replication/upcoming-webinar-mysql-replication-whats-new-in-mysql-5-7-and-beyond/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Mon, 24 Nov 2014 16:47:32 +0000</pubDate>
				<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[High Availability]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[Replication]]></category>
		<category><![CDATA[secondary]]></category>
		<guid isPermaLink="false">./../../index.html?p=3972</guid>

					<description><![CDATA[On Tuesday 25th November, Luís Soares and I will be hosting a webinar which explains the latest developments in MySQL Replication. As always the webinar is free but please register here. Details: Continuing in the footsteps of its predecessor, MySQL 5.7 is set to be a groundbreaking release. In this webinar, the engineers behind the]]></description>
										<content:encoded><![CDATA[<p><a href="./../../wp-content/uploads/2014/03/MySQL_Replication.png"><img loading="lazy" decoding="async" class="alignright size-medium wp-image-3803" src="./../../wp-content/uploads/2014/03/MySQL_Replication-300x101.png" alt="MySQL Replication Logo" width="300" height="101" srcset="./../../wp-content/uploads/2014/03/MySQL_Replication-300x101.png 300w, ./../../wp-content/uploads/2014/03/MySQL_Replication-1024x347.png 1024w, ./../../wp-content/uploads/2014/03/MySQL_Replication-900x305.png 900w, ./../../wp-content/uploads/2014/03/MySQL_Replication.png 1240w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a>On Tuesday 25th November, Luís Soares and I will be hosting a webinar which explains the latest developments in MySQL Replication. As always the webinar is free but please <a href="http://www.mysql.com/news-and-events/web-seminars/mysql-replication-whats-new-in-mysql-5-7-and-beyond/" title="MySQL Replication: What’s New in MySQL 5.7 and Beyond" target="_blank">register here</a>.</p>
<h3>Details:</h3>
<p>Continuing in the footsteps of its predecessor, MySQL 5.7 is set to be a groundbreaking release. In this webinar, the engineers behind the product provide insights into what’s new for MySQL replication in the latest 5.7 Development Milestone Release and review the early access features available via labs.mysql.com. The next generation of replication features cover several technical areas such as better semi-synchronous replication, an enhanced multithreaded slave (per-transaction parallelism), improved monitoring with performance schema tables, online configuration changes, options for fine-tuning replication performance, support for more-advanced topologies with multisource replication, and much more. This is also a great chance to learn about MySQL Group Replication &#8211; the next generation of active-active, update-anywhere replication for MySQL.</p>
<p>Seize the opportunity to learn how you will be able to leverage MySQL 5.7 replication to grow your business.</p>
<h3>When:</h3>
<ul>
<li>Tue, Nov 25: 09:00 Pacific time (America)</li>
<li>Tue, Nov 25: 10:00 Mountain time (America)</li>
<li>Tue, Nov 25: 11:00 Central time (America)</li>
<li>Tue, Nov 25: 12:00 Eastern time (America)</li>
<li>Tue, Nov 25: 15:00 São Paulo time</li>
<li>Tue, Nov 25: 17:00 UTC</li>
<li>Tue, Nov 25: 17:00 Western European time</li>
<li>Tue, Nov 25: 18:00 Central European time</li>
<li>Tue, Nov 25: 19:00 Eastern European time</li>
<li>Tue, Nov 25: 22:30 India, Sri Lanka</li>
<li>Wed, Nov 26: 01:00 Singapore/Malaysia/Philippines time</li>
<li>Wed, Nov 26: 01:00 China time</li>
<li>Wed, Nov 26: 02:00 日本</li>
<li>Wed, Nov 26: 04:00 NSW, ACT, Victoria, Tasmania (Australia) </li>
</ul>
<p>Even if you can&#8217;t join the live webinar, it&#8217;s worth registering as you&#8217;ll be emailed a link to the replay as soon as it&#8217;s available.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql-replication/upcoming-webinar-mysql-replication-whats-new-in-mysql-5-7-and-beyond/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Active-Active Replication, Performance Improvements &#038; Operational Enhancements &#8211; some of what&#8217;s available in the new MySQL Cluster 7.4.2 DMR</title>
		<link>./../../mysql-cluster/active-active-replication-performance-improvements-operational-enhancements-some-of-whats-available-in-the-new-mysql-cluster-7-4-2-dmr/index.html</link>
					<comments>./../../mysql-cluster/active-active-replication-performance-improvements-operational-enhancements-some-of-whats-available-in-the-new-mysql-cluster-7-4-2-dmr/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 07 Nov 2014 17:01:53 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[7.4]]></category>
		<category><![CDATA[Memory]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster 7.4]]></category>
		<category><![CDATA[Replication]]></category>
		<guid isPermaLink="false">./../../index.html?p=3969</guid>

					<description><![CDATA[Oracle have just made availble the new MySQL Cluster 7.4.2 Development Milestone Release &#8211; it can be downloaded from the development release tab here. Note that this is not a GA release and so we wouldn&#8217;t recommend using it in production. This is the second DMR for MySQL 7.4; the delta between this DMR and]]></description>
										<content:encoded><![CDATA[<p><a href="./../../wp-content/uploads/2014/07/MySQL_Cluster_400.png"><img loading="lazy" decoding="async" src="./../../wp-content/uploads/2014/07/MySQL_Cluster_400.png" alt="MySQL Cluster Logo" width="400" height="168" class="alignright size-full wp-image-3934" srcset="./../../wp-content/uploads/2014/07/MySQL_Cluster_400.png 400w, ./../../wp-content/uploads/2014/07/MySQL_Cluster_400-300x126.png 300w" sizes="auto, (max-width: 400px) 100vw, 400px" /></a></p>
<p>Oracle have just made availble the new MySQL Cluster 7.4.2 Development Milestone Release &#8211; it can be <a href="http://dev.mysql.com/downloads/cluster/" title="download the MySQL Cluster 7.4.2 Development Milestone Release" target="_blank">downloaded from the development release tab here</a>. Note that this is not a GA release and so we wouldn&#8217;t recommend using it in production.</p>
<p>This is the second DMR for MySQL 7.4; the delta between this DMR and 7.4.1 can be viewed in the <a href="http://dev.mysql.com/doc/relnotes/mysql-cluster/7.4/en/mysql-cluster-news-5-6-21-ndb-7-4-2.html" title="MySQL Cluster 7.4.2 Release Notes" target="_blank">MySQL Cluster 7.4.2 Release Notes</a></p>
<p>There are three main focus areas for this DMR and the purpose of this post is to briefly introduce them:</p>
<ul>
<li>Active-Active (Multi-Master) Replication</li>
<li>Performance</li>
<li>Operational improvements (speeding up of restarts; enhanced memory reporting)</li>
</ul>
<h2>Active-Active (Multi-Master) Replication</h2>
<p>MySQL Cluster allows bi-directional replication between two (or more) clusters. Replication within each cluster is synchronous but between clusters it is asynchronous which means the following scenario is possible:</p>
<table summary="Active-Active asynchronous replication can lead to inconsistencies between databases" width="260" border="1" align="center">
<caption align="center">Conflict with asynchronous replication</caption>
<tbody>
<tr>
<th scope="col" align="center" width="80">Site A</th>
<th scope="col" align="center" width="100">Replication</th>
<th scope="col" align="center" width="80">Site B</th>
</tr>
<tr>
<td align="center">x == 10</td>
<td></td>
<td align="center">x == 10</td>
</tr>
<tr>
<td align="center">x = 11</td>
<td></td>
<td align="center">x = 20</td>
</tr>
<tr>
<td></td>
<td align="center">&#8212; x=11 &#8211;&gt;</td>
<td align="center">x == 11</td>
</tr>
<tr>
<td align="center">x==20</td>
<td align="center">&lt;&#8211; x=20 &#8212;</td>
<td></td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>In this example a value (column for a row in a table) is set to 11 on site A and the change is queued for replication to site B. In the mean time, an application sets the value to 20 on site B and that change is queued for replication to site A. Once both sites have received and applied the replicated change from the other cluster site A contains the value 20 while site B contains 11 &#8211; in other words the databases are now inconsistent.</p>
<h2>How MySQL Cluster implements eventual consistency</h2>
<p>There are two phases to establishing consistency between both clusters after an inconsistency has been introduced:</p>
<ol>
<li>Detect that a conflict has happened</li>
<li>Resolve the inconsistency</li>
</ol>
<p>The following animation illustrates how MySQL Cluster 7.2 detects that an inconsistency has been introduced by the asynchronous, active-active replication:</p>
<div id="attachment_2149" style="width: 610px" class="wp-caption alignnone"><a href="./../../wp-content/uploads/2011/11/ReflectingGCI1.gif"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-2149" class="size-full wp-image-2149" title="ReflectingGCI" src="./../../wp-content/uploads/2011/11/ReflectingGCI1.gif" alt="" width="600" height="463" /></a><p id="caption-attachment-2149" class="wp-caption-text">Detecting conflicts</p></div>
<p>While we typically consider the 2 clusters in an active-active replication configuration to be peers, in this case we designate one to be the primary and the other the secondary. Reads and writes can still be sent to either cluster but it is the responsibility of the primary to identify that a conflict has arisen and then remove the inconsistency.</p>
<p>A logical clock is used to identify (in relative terms) when a change is made on the primary &#8211; for those who know something of the MySQL Cluster internals, we use the index of the Global Checkpoint that the update is contained in. For all tables that have this feature turned on, an extra, hidden column is automatically added on the primary &#8211; this represents the value of the logical clock when the change was made.</p>
<p>Once the change has been applied on the primary, there is a &#8220;window of conflict&#8221; for the effected row(s) during which if a different change is made to the same row(s) on the secondary then there will be an inconsistency. Once the slave on the secondary has applied the change from the primary, it will send a replication event back to the slave on the primary, containing the primary&#8217;s clock value associated with the changes that have just been applied on the secondary. (Remember that the clock is actually the Global Checkpoint Index and so this feature is sometimes referred to as Reflected GCI). Once the slave on the primary has received this event, it knows that all changes tagged with a clock value no later than the reflected GCI are now safe &#8211; the window of conflict has closed.</p>
<p>If an application modifies this same row on the secondary before the replication event from the primary was applied then it will send an associated replication event to the slave on the primary <strong>before</strong> it reflects the new GCI. The slave on the primary will process this replication event and compare the clock value recorded with the effected rows with the latest reflected GCI; as the clock value for the conflicting row is higher the primary recognises that a conflict has occured and will launch the algorithm to resolve the inconsistency.</p>
<p><a href="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15.png"><img loading="lazy" decoding="async" src="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-300x109.png" alt="Options for MySQL Cluster replication conflict detection/resolution" width="300" height="109" class="alignright size-medium wp-image-3950" srcset="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-300x109.png 300w, ./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-1024x372.png 1024w, ./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-900x327.png 900w, ./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15.png 1728w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a></p>
<p>After a conflict has been detected, you have the option of having the database simply report the conflict to the application or have it roll back just the conflicting row or the entire transaction and all subsequent transactions that were dependent on it.</p>
<p>So &#8211; what&#8217;s new in 7.4.1?</p>
<ul>
<li>Detects conflicts between inserts and updates</li>
<li>Option to roll back entire transaction (and dependent transactions) rather than just the conflicting row</li>
<li>All conflicts are handled before switching primary &#8211; avoiding potential race conditions</li>
</ul>
<p>As mentioned at the start of this post, this is pre-GA and there are some extra enhancements we plan on including in the final version:</p>
<ul>
<li>Handle deletes which conflict with other operations</li>
<li>Roll back transactions that have <strong>read</strong> a row that had been rolled back due to a conflict</li>
</ul>
<h3>Performance</h3>
<p><a href="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23.png"><img loading="lazy" decoding="async" src="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23-300x197.png" alt="MySQL CLuster 7.4.1 Read-Write Performance" width="300" height="197" class="alignright size-medium wp-image-3952" srcset="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23-300x197.png 300w, ./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23.png 864w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><br />
Being a scaled-out, in-memory, real-time database, MySQL Cluster performance has always been great but we continue to work on making it faster each release. In particular, we want to keep pace with the trend of having more and more cores rather than faster ones. 7.4 continues along the path of better exploiting multiple cores &#8211; as can be seen from these benchmark results.<br />
<a href="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15.png"><img loading="lazy" decoding="async" src="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15-300x199.png" alt="MySQL CLuster 7.4.1 Read Performance" width="300" height="199" class="alignright size-medium wp-image-3951" srcset="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15-300x199.png 300w, ./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15.png 842w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><br />
Just make sure that you&#8217;re using the multi-threaded data node (ndbmtd rather than ndbd) and have <a href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-programs-ndbmtd.html" title="MySQL Cluster - configuring multi-threaded datanodes" target="_blank">configured how many threads it should use</a>.</p>
<h3>Faster Restarts</h3>
<p>You can restart MySQL Cluster processes (nodes) without losing database service (for example if adding extra memory to a server) and so on the face of it, the speed of the restarts isn&#8217;t that important. Having said that, while the node is restarting you&#8217;ve lost some of your high-availability which for super-critical applications can make you nervous. Additionally, faster restarts mean that you can complete maintenance activities faster &#8211; for example, a software upgrade requires a rolling restart of all of the nodes &#8211; if you have 48 data nodes then you want each of the data nodes to restart as quickly as possible.</p>
<p>MySQL 7.4.1 includes a number of optimisations to the restart code and so if you&#8217;re already using MySQL Cluster, it might be interesting to see how much faster it gets for your application. We also have some extra optimisations in the works that you can expect to see in later 7.4 versions.</p>
<h3>Extra Memory Reporting</h3>
<p>MySQL Cluster presents a lot of monitoring information through the <a href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-ndbinfo.html" title="ndbinfo database" target="_blank">ndbinfo database</a> and in 7.4 we&#8217;ve added some extra information on how memory is used for individual tables.</p>
<p>For example; to see how much memory is being used by each data node for a particular table&#8230;</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql> CREATE DATABASE clusterdb;USE clusterdb;
mysql> CREATE TABLE simples (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY) ENGINE=NDB;
mysql> SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |      131072 |       5504 |        172 |
|    1 |    2 |      131072 |       1280 |         40 |
|    2 |    0 |      131072 |       5504 |        172 |
|    2 |    2 |      131072 |       1280 |         40 |
|    3 |    1 |      131072 |       3104 |         97 |
|    3 |    3 |      131072 |       4256 |        133 |
|    4 |    1 |      131072 |       3104 |         97 |
|    4 |    3 |      131072 |       4256 |        133 |
+------+------+-------------+------------+------------+
</pre>
<p>When you delete rows from a MySQL Cluster table, the memory is not actually freed up and so if you check the existing <a href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-ndbinfo-memoryusage.html" title="memoryusage table" target="_blank">memoryusage table</a> you won&#8217;t see a change. This memory will be reused when you add new rows to that same table. In MySQL Cluster 7.4, it&#8217;s possible to see how much memory is in that state for a table&#8230;</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql> SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |      131072 |       5504 |        172 |
|    1 |    2 |      131072 |       1280 |         40 |
|    2 |    0 |      131072 |       5504 |        172 |
|    2 |    2 |      131072 |       1280 |         40 |
|    3 |    1 |      131072 |       3104 |         97 |
|    3 |    3 |      131072 |       4256 |        133 |
|    4 |    1 |      131072 |       3104 |         97 |
|    4 |    3 |      131072 |       4256 |        133 |
+------+------+-------------+------------+------------+
mysql> DELETE FROM clusterdb.simples LIMIT 1;
mysql> SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |      131072 |       5504 |        172 |
|    1 |    2 |      131072 |       1312 |         41 |
|    2 |    0 |      131072 |       5504 |        172 |
|    2 |    2 |      131072 |       1312 |         41 |
|    3 |    1 |      131072 |       3104 |         97 |
|    3 |    3 |      131072 |       4288 |        134 |
|    4 |    1 |      131072 |       3104 |         97 |
|    4 |    3 |      131072 |       4288 |        134 |
+------+------+-------------+------------+------------+
</pre>
<p>As a final example, we can check whether a table is being evenly sharded accross the data nodes (in this case a realy bad sharding key was chosen)&#8230;</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql> CREATE TABLE simples (id INT NOT NULL AUTO_INCREMENT, \
        species VARCHAR(20) DEFAULT "Human", 
        PRIMARY KEY(id, species)) engine=ndb PARTITION BY KEY(species);

// Add some data

mysql> SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |           0 |          0 |          0 |
|    1 |    2 |      196608 |      11732 |        419 |
|    2 |    0 |           0 |          0 |          0 |
|    2 |    2 |      196608 |      11732 |        419 |
|    3 |    1 |           0 |          0 |          0 |
|    3 |    3 |           0 |          0 |          0 |
|    4 |    1 |           0 |          0 |          0 |
|    4 |    3 |           0 |          0 |          0 |
+------+------+-------------+------------+------------+
</pre>
<p>If you get chance to try out this new release then please let us know how you get on &#8211; either through a comment on this blog, a <a href="http://bugs.mysql.com/" title="MySQL bug report" target="_blank">MySQL bug report</a> or a post to the <a href="http://forums.mysql.com/list.php?25" title="MySQL Cluster Forum" target="_blank">MySQL Cluster Forum</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql-cluster/active-active-replication-performance-improvements-operational-enhancements-some-of-whats-available-in-the-new-mysql-cluster-7-4-2-dmr/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Active-Active Replication, Performance Improvements &#038; Operational Enhancements &#8211; some of what&#8217;s available in the new MySQL Cluster 7.4.1 DMR</title>
		<link>./../../mysql-cluster/active-active-replication-performance-improvements-operational-enhancements-some-of-whats-available-in-the-new-mysql-cluster-7-4-1-dmr/index.html</link>
					<comments>./../../mysql-cluster/active-active-replication-performance-improvements-operational-enhancements-some-of-whats-available-in-the-new-mysql-cluster-7-4-1-dmr/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 26 Sep 2014 13:35:29 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[7.4]]></category>
		<category><![CDATA[High Availability]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster 7.4]]></category>
		<category><![CDATA[Replication]]></category>
		<guid isPermaLink="false">./../../index.html?p=3948</guid>

					<description><![CDATA[Oracle have just made availble the new MySQL Cluster 7.4.1 Development Milestone Release &#8211; it can be downloaded from the development release tab here. Note that this is not a GA release and so we wouldn&#8217;t recommend using it in production. There are three main focus areas for this DMR and the purpose of this]]></description>
										<content:encoded><![CDATA[<p><a href="./../../wp-content/uploads/2014/07/MySQL_Cluster_400.png"><img loading="lazy" decoding="async" src="./../../wp-content/uploads/2014/07/MySQL_Cluster_400.png" alt="MySQL Cluster Logo" width="400" height="168" class="alignright size-full wp-image-3934" srcset="./../../wp-content/uploads/2014/07/MySQL_Cluster_400.png 400w, ./../../wp-content/uploads/2014/07/MySQL_Cluster_400-300x126.png 300w" sizes="auto, (max-width: 400px) 100vw, 400px" /></a></p>
<p>Oracle have just made availble the new MySQL Cluster 7.4.1 Development Milestone Release &#8211; it can be <a href="http://dev.mysql.com/downloads/cluster/" title="download the MySQL Cluster 7.4.1 Development Milestone Release" target="_blank">downloaded from the development release tab here</a>. Note that this is not a GA release and so we wouldn&#8217;t recommend using it in production.</p>
<p>There are three main focus areas for this DMR and the purpose of this post is to briefly introduce them:</p>
<ul>
<li>Active-Active (Multi-Master) Replication</li>
<li>Performance</li>
<li>Operational improvements (speeding up of restarts; enhanced memory reporting)</li>
</ul>
<h2>Active-Active (Multi-Master) Replication</h2>
<p>MySQL Cluster allows bi-directional replication between two (or more) clusters. Replication within each cluster is synchronous but between clusters it is asynchronous which means the following scenario is possible:</p>
<table summary="Active-Active asynchronous replication can lead to inconsistencies between databases" width="260" border="1" align="center">
<caption align="center">Conflict with asynchronous replication</caption>
<tbody>
<tr>
<th scope="col" align="center" width="80">Site A</th>
<th scope="col" align="center" width="100">Replication</th>
<th scope="col" align="center" width="80">Site B</th>
</tr>
<tr>
<td align="center">x == 10</td>
<td></td>
<td align="center">x == 10</td>
</tr>
<tr>
<td align="center">x = 11</td>
<td></td>
<td align="center">x = 20</td>
</tr>
<tr>
<td></td>
<td align="center">&#8212; x=11 &#8211;&gt;</td>
<td align="center">x == 11</td>
</tr>
<tr>
<td align="center">x==20</td>
<td align="center">&lt;&#8211; x=20 &#8212;</td>
<td></td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>In this example a value (column for a row in a table) is set to 11 on site A and the change is queued for replication to site B. In the mean time, an application sets the value to 20 on site B and that change is queued for replication to site A. Once both sites have received and applied the replicated change from the other cluster site A contains the value 20 while site B contains 11 &#8211; in other words the databases are now inconsistent.</p>
<h2>How MySQL Cluster implements eventual consistency</h2>
<p>There are two phases to establishing consistency between both clusters after an inconsistency has been introduced:</p>
<ol>
<li>Detect that a conflict has happened</li>
<li>Resolve the inconsistency</li>
</ol>
<p>The following animation illustrates how MySQL Cluster 7.2 detects that an inconsistency has been introduced by the asynchronous, active-active replication:</p>
<div id="attachment_2149" style="width: 610px" class="wp-caption alignnone"><a href="./../../wp-content/uploads/2011/11/ReflectingGCI1.gif"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-2149" class="size-full wp-image-2149" title="ReflectingGCI" src="./../../wp-content/uploads/2011/11/ReflectingGCI1.gif" alt="" width="600" height="463" /></a><p id="caption-attachment-2149" class="wp-caption-text">Detecting conflicts</p></div>
<p>While we typically consider the 2 clusters in an active-active replication configuration to be peers, in this case we designate one to be the primary and the other the secondary. Reads and writes can still be sent to either cluster but it is the responsibility of the primary to identify that a conflict has arisen and then remove the inconsistency.</p>
<p>A logical clock is used to identify (in relative terms) when a change is made on the primary &#8211; for those who know something of the MySQL Cluster internals, we use the index of the Global Checkpoint that the update is contained in. For all tables that have this feature turned on, an extra, hidden column is automatically added on the primary &#8211; this represents the value of the logical clock when the change was made.</p>
<p>Once the change has been applied on the primary, there is a &#8220;window of conflict&#8221; for the effected row(s) during which if a different change is made to the same row(s) on the secondary then there will be an inconsistency. Once the slave on the secondary has applied the change from the primary, it will send a replication event back to the slave on the primary, containing the primary&#8217;s clock value associated with the changes that have just been applied on the secondary. (Remember that the clock is actually the Global Checkpoint Index and so this feature is sometimes referred to as Reflected GCI). Once the slave on the primary has received this event, it knows that all changes tagged with a clock value no later than the reflected GCI are now safe &#8211; the window of conflict has closed.</p>
<p>If an application modifies this same row on the secondary before the replication event from the primary was applied then it will send an associated replication event to the slave on the primary <strong>before</strong> it reflects the new GCI. The slave on the primary will process this replication event and compare the clock value recorded with the effected rows with the latest reflected GCI; as the clock value for the conflicting row is higher the primary recognises that a conflict has occured and will launch the algorithm to resolve the inconsistency.</p>
<p><a href="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15.png"><img loading="lazy" decoding="async" src="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-300x109.png" alt="Options for MySQL Cluster replication conflict detection/resolution" width="300" height="109" class="alignright size-medium wp-image-3950" srcset="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-300x109.png 300w, ./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-1024x372.png 1024w, ./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15-900x327.png 900w, ./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.34.15.png 1728w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a></p>
<p>After a conflict has been detected, you have the option of having the database simply report the conflict to the application or have it roll back just the conflicting row or the entire transaction and all subsequent transactions that were dependent on it.</p>
<p>So &#8211; what&#8217;s new in 7.4.1?</p>
<ul>
<li>Detects conflicts between inserts and updates</li>
<li>Option to roll back entire transaction (and dependent transactions) rather than just the conflicting row</li>
<li>All conflicts are handled before switching primary &#8211; avoiding potential race conditions</li>
</ul>
<p>As mentioned at the start of this post, this is pre-GA and there are some extra enhancements we plan on including in the final version:</p>
<ul>
<li>Handle deletes which conflict with other operations</li>
<li>Roll back transactions that have <strong>read</strong> a row that had been rolled back due to a conflict</li>
</ul>
<h3>Performance</h3>
<p><a href="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23.png"><img loading="lazy" decoding="async" src="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23-300x197.png" alt="MySQL CLuster 7.4.1 Read-Write Performance" width="300" height="197" class="alignright size-medium wp-image-3952" srcset="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23-300x197.png 300w, ./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.23.png 864w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><br />
Being a scaled-out, in-memory, real-time database, MySQL Cluster performance has always been great but we continue to work on making it faster each release. In particular, we want to keep pace with the trend of having more and more cores rather than faster ones. 7.4 continues along the path of better exploiting multiple cores &#8211; as can be seen from these benchmark results.<br />
<a href="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15.png"><img loading="lazy" decoding="async" src="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15-300x199.png" alt="MySQL CLuster 7.4.1 Read Performance" width="300" height="199" class="alignright size-medium wp-image-3951" srcset="./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15-300x199.png 300w, ./../../wp-content/uploads/2014/09/Screen-Shot-2014-09-25-at-13.35.15.png 842w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><br />
Just make sure that you&#8217;re using the multi-threaded data node (ndbmtd rather than ndbd) and have <a href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-programs-ndbmtd.html" title="MySQL Cluster - configuring multi-threaded datanodes" target="_blank">configured how many threads it should use</a>.</p>
<h3>Faster Restarts</h3>
<p>You can restart MySQL Cluster processes (nodes) without losing database service (for example if adding extra memory to a server) and so on the face of it, the speed of the restarts isn&#8217;t that important. Having said that, while the node is restarting you&#8217;ve lost some of your high-availability which for super-critical applications can make you nervous. Additionally, faster restarts mean that you can complete maintenance activities faster &#8211; for example, a software upgrade requires a rolling restart of all of the nodes &#8211; if you have 48 data nodes then you want each of the data nodes to restart as quickly as possible.</p>
<p>MySQL 7.4.1 includes a number of optimisations to the restart code and so if you&#8217;re already using MySQL Cluster, it might be interesting to see how much faster it gets for your application. We also have some extra optimisations in the works that you can expect to see in later 7.4 versions.</p>
<h3>Extra Memory Reporting</h3>
<p>MySQL Cluster presents a lot of monitoring information through the <a href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-ndbinfo.html" title="ndbinfo database" target="_blank">ndbinfo database</a> and in 7.4 we&#8217;ve added some extra information on how memory is used for individual tables.</p>
<p>For example; to see how much memory is being used by each data node for a particular table&#8230;</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql> CREATE DATABASE clusterdb;USE clusterdb;
mysql> CREATE TABLE simples (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY) ENGINE=NDB;
mysql> SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |      131072 |       5504 |        172 |
|    1 |    2 |      131072 |       1280 |         40 |
|    2 |    0 |      131072 |       5504 |        172 |
|    2 |    2 |      131072 |       1280 |         40 |
|    3 |    1 |      131072 |       3104 |         97 |
|    3 |    3 |      131072 |       4256 |        133 |
|    4 |    1 |      131072 |       3104 |         97 |
|    4 |    3 |      131072 |       4256 |        133 |
+------+------+-------------+------------+------------+
</pre>
<p>When you delete rows from a MySQL Cluster table, the memory is not actually freed up and so if you check the existing <a href="http://dev.mysql.com/doc/refman/5.6/en/mysql-cluster-ndbinfo-memoryusage.html" title="memoryusage table" target="_blank">memoryusage table</a> you won&#8217;t see a change. This memory will be reused when you add new rows to that same table. In MySQL Cluster 7.4, it&#8217;s possible to see how much memory is in that state for a table&#8230;</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql> SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |      131072 |       5504 |        172 |
|    1 |    2 |      131072 |       1280 |         40 |
|    2 |    0 |      131072 |       5504 |        172 |
|    2 |    2 |      131072 |       1280 |         40 |
|    3 |    1 |      131072 |       3104 |         97 |
|    3 |    3 |      131072 |       4256 |        133 |
|    4 |    1 |      131072 |       3104 |         97 |
|    4 |    3 |      131072 |       4256 |        133 |
+------+------+-------------+------------+------------+
mysql> DELETE FROM clusterdb.simples LIMIT 1;
mysql> SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |      131072 |       5504 |        172 |
|    1 |    2 |      131072 |       1312 |         41 |
|    2 |    0 |      131072 |       5504 |        172 |
|    2 |    2 |      131072 |       1312 |         41 |
|    3 |    1 |      131072 |       3104 |         97 |
|    3 |    3 |      131072 |       4288 |        134 |
|    4 |    1 |      131072 |       3104 |         97 |
|    4 |    3 |      131072 |       4288 |        134 |
+------+------+-------------+------------+------------+
</pre>
<p>As a final example, we can check whether a table is being evenly sharded accross the data nodes (in this case a realy bad sharding key was chosen)&#8230;</p>
<pre style="font: normal normal normal 9px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql> CREATE TABLE simples (id INT NOT NULL AUTO_INCREMENT, \
        species VARCHAR(20) DEFAULT "Human", 
        PRIMARY KEY(id, species)) engine=ndb PARTITION BY KEY(species);

// Add some data

mysql> SELECT node_id AS node, fragment_num AS frag, \
        fixed_elem_alloc_bytes alloc_bytes, \
        fixed_elem_free_bytes AS free_bytes, \
        fixed_elem_free_rows AS spare_rows \
        FROM ndbinfo.memory_per_fragment \
        WHERE fq_name LIKE '%simples%';
+------+------+-------------+------------+------------+
| node | frag | alloc_bytes | free_bytes | spare_rows |
+------+------+-------------+------------+------------+
|    1 |    0 |           0 |          0 |          0 |
|    1 |    2 |      196608 |      11732 |        419 |
|    2 |    0 |           0 |          0 |          0 |
|    2 |    2 |      196608 |      11732 |        419 |
|    3 |    1 |           0 |          0 |          0 |
|    3 |    3 |           0 |          0 |          0 |
|    4 |    1 |           0 |          0 |          0 |
|    4 |    3 |           0 |          0 |          0 |
+------+------+-------------+------------+------------+
</pre>
<p>If you get chance to try out this new release then please let us know how you get on &#8211; either through a comment on this blog, a <a href="http://bugs.mysql.com/" title="MySQL bug report" target="_blank">MySQL bug report</a> or a post to the <a href="http://forums.mysql.com/list.php?25" title="MySQL Cluster Forum" target="_blank">MySQL Cluster Forum</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql-cluster/active-active-replication-performance-improvements-operational-enhancements-some-of-whats-available-in-the-new-mysql-cluster-7-4-1-dmr/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Advanced MySQL Replication Architectures and Latest Developments &#8211; free webinar</title>
		<link>./../../mysql-replication/advanced-mysql-replication-architectures-and-latest-developments-free-webinar-2/index.html</link>
					<comments>./../../mysql-replication/advanced-mysql-replication-architectures-and-latest-developments-free-webinar-2/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Tue, 18 Mar 2014 09:08:26 +0000</pubDate>
				<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[High Availability]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[Replication]]></category>
		<guid isPermaLink="false">./../../index.html?p=3805</guid>

					<description><![CDATA[This Thursday (20th March 2014) we&#8217;ll be hosted a free webinar covering advanced MySQL Replication topics as well as the latest developments. As always, the webinar is free but you need to register here &#8211; even if you can&#8217;t join live, you&#8217;ll then be sent a link to the replay. More details on what to]]></description>
										<content:encoded><![CDATA[<p><a href="./../../wp-content/uploads/2014/03/MySQL_Replication.png"><img loading="lazy" decoding="async" src="./../../wp-content/uploads/2014/03/MySQL_Replication-300x101.png" alt="MySQL Replication Logo" width="300" height="101" class="alignright size-medium wp-image-3803" srcset="./../../wp-content/uploads/2014/03/MySQL_Replication-300x101.png 300w, ./../../wp-content/uploads/2014/03/MySQL_Replication-1024x347.png 1024w, ./../../wp-content/uploads/2014/03/MySQL_Replication-900x305.png 900w, ./../../wp-content/uploads/2014/03/MySQL_Replication.png 1240w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><br />
This Thursday (20th March 2014) we&#8217;ll be hosted a free webinar covering advanced MySQL Replication topics as well as the latest developments. As always, the webinar is free but you need to <a href="http://www.mysql.com/news-and-events/web-seminars/advanced-mysql-replication-architectures-and-latest-developments/" title="Advanced MySQL Replication Architectures and Latest Developments - free webinar" target="_blank">register here</a> &#8211; even if you can&#8217;t join live, you&#8217;ll then be sent a link to the replay.</p>
<p>More details on what to expect&#8230;</p>
<p>The biggest Web sites in the world rely on MySQL Replication to scale-out and provide High Availability for their data. Extend your knowledge of how MySQL Replication works and what you can achieve with it; join us for this technical webinar to explore some of the more advanced replication architectures as well as some of the latest product developments:</p>
<ul>
<li>Replication topologies, including master-slave, circular and multi-master</li>
<li>Load balancing and query splitting</li>
<li>Data aggregation with multi-source replication</li>
<li>Global Transaction IDs and auto-failover with recovery</li>
<li>Getting the best replication throughput</li>
<li>Heterogeneous replication with the Binlog API</li>
</ul>
<p>WHO:</p>
<ul>
<li>Andrew Morgan, Principal MySQL Product Manager</li>
<li>Lars Thalmann, Director, MySQL Replication, Backup and Connectors</li>
</ul>
<p>WHEN:</p>
<ul>
<li>Thu, Mar 20: 09:00 Pacific time (America)</li>
<li>Thu, Mar 20: 10:00 Mountain time (America)</li>
<li>Thu, Mar 20: 11:00 Central time (America)</li>
<li>Thu, Mar 20: 12:00 Eastern time (America)</li>
<li>Thu, Mar 20: 13:00 São Paulo time</li>
<li>Thu, Mar 20: 16:00 UTC</li>
<li>Thu, Mar 20: 16:00 Western European time</li>
<li>Thu, Mar 20: 17:00 Central European time</li>
<li>Thu, Mar 20: 18:00 Eastern European time</li>
<li>Thu, Mar 20: 21:30 India, Sri Lanka</li>
<li>Fri, Mar 21: 00:00 Singapore/Malaysia/Philippines time</li>
<li>Fri, Mar 21: 00:00 China time</li>
<li>Fri, Mar 21: 01:00 日本</li>
<li>Fri, Mar 21: 03:00 NSW, ACT, Victoria, Tasmania (Australia)</li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql-replication/advanced-mysql-replication-architectures-and-latest-developments-free-webinar-2/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL Cluster Asynchronous Replication &#8211; conflict detection &#038; resolution</title>
		<link>./../../mysql-cluster/mysql-cluster-asynchronous-replication-conflict-detection-resolution1/index.html</link>
					<comments>./../../mysql-cluster/mysql-cluster-asynchronous-replication-conflict-detection-resolution1/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Wed, 11 Sep 2013 08:29:40 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[High Availability]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster CGE]]></category>
		<category><![CDATA[Replication]]></category>
		<guid isPermaLink="false">./../../index.html?p=387</guid>

					<description><![CDATA[I was rooting through past blog entries and I stumbled accross a draft post on setting up multi-master (update anywhere) asynchronous replication for MySQL Cluster. The post never quite got finished and published and while the material is now 4 years old it may still be helpfull to some and so I&#8217;m posting it now.]]></description>
										<content:encoded><![CDATA[<p>I was rooting through past blog entries and I stumbled accross a draft post on setting up multi-master (update anywhere) asynchronous replication for MySQL Cluster. The post never quite got finished and published and while the material is now 4 years old it may still be helpfull to some and so I&#8217;m posting it now. Note that a lot has happened with MySQL Cluster in the last 4 years and in this area, the most notable change has been the <a href="" target="_blank" title="Enhanced conflict resolution with MySQL Cluster active-active replication" alt="Enhanced conflict resolution with MySQL Cluster active-active replication">Enhanced conflict resolution with MySQL Cluster active-active replication</a> feature introduced in MySQL Cluster 7.2 and if you&#8217;re only dealing with a pair of Clusters, that&#8217;s your best option as it removed the need for you to maintain the timestamp columns and backs out entire transactions rather than just the conflicting rows. So when would you use this &#8220;legacy&#8221; method? The main use case is when you want conflict detection/resolution among a ring of more than 2 Clusters. Note also that MySQL 5.6 (and so MySQL Cluster 7.3) added microsecond precision to timestamps and so you may not need the custom plugin that this post referred to.</p>
<p>Anyway, here&#8217;s the original post&#8230;</p>
<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br />
MySQL Cluster asynchronous replication allows you to run in a multi-master mode with the application making changes to both sites (or more than 2 sites using a replication ring). As the replication is asynchronous, if the application(s) modified the same row on both sites at &#8216;about the same time&#8217; then there is a potential for a collision. Left to their own devices, each site would store (and provide to the application) different data indefinitely. This article explains how to use MySQL Cluster collision detection and resolution to cope with this.</p>
<div id="attachment_437" style="width: 310px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2009/08/Replication_Conflict.jpg"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-437" class="size-medium wp-image-437" title="Multi-master replication leading to inconsistencies" alt="Fig. 1 Multi-master replication leading to inconsistencies" src="./../../wp-content/uploads/2009/08/Replication_Conflict-300x178.jpg" width="300" height="178" srcset="./../../wp-content/uploads/2009/08/Replication_Conflict-300x178.jpg 300w, ./../../wp-content/uploads/2009/08/Replication_Conflict.jpg 590w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><p id="caption-attachment-437" class="wp-caption-text">Fig. 1 Multi-master replication leading to inconsistencies</p></div>
<p>Fig. 1 shows the timeline that can result in a conflict. The same or two different applications make a change to the same row in the table but to the 2 different instances of MySQL Cluster. Each cluster synchronously replicates the data amongst its local data node in order to provide local High Availability (everything there is safe!). At some point later (normally a fraction of a second), the changes are replicated to the remote site asynchronously &#8211; this delay opens a window for a conflict where Cluster 2 is updated by the application just before it receives the earlier update from Cluster 1. Cluster 2 will overwrite it&#8217;s row with the value (5) it has received but only after its earlier change (directly from the application) is written to the binary log ready for replication to Cluster 1 which in turn will cause that value (15) to be stored by Cluster 1. Each Cluster instance replicates what it believes to be the correct data to the other site &#8211; overwriting what that site had previously stored. In our example, that leaves one database holding the value 15 for key &#8216;A&#8217; while the other stores 5.</p>
<p>It&#8217;s often the case that the application will tend to go to the same site during a particular time when accessing the same data and so the chances of a conflict are reduced but the application may still want to guard against (even rare) race conditions. If replication slows down (for example due to a backlog of updates to be applied) or stops temporarily (for example due to network failure to the geographically remote site) then the chances of a collision greatly increase.</p>
<p>For information on setting up multi-master asynchronous replication with MySQL Cluster, please take a look at <a href="./../../mysql-cluster/setting-up-mysql-asynchronous-replication-for-high-availability/index.html" target="_blank">Setting up MySQL Asynchronous Replication for High Availability</a>.</p>
<h3>Conflict Detection &amp; Resolution using MySQL Cluster</h3>
<p>MySQL Cluster provides two different schemes to handle these collisions/conflicts. The first scheme (referred to as &#8220;greatest timestamp wins&#8221;) detects that a conflict occurs and automatically resolves it (the change most recently received from the application is stored on both Clusters). The second scheme (referred to as &#8220;same value wins&#8221;) detects that a conflict has occurred but <strong>does not fix it</strong> &#8211; instead the conflict is recorded in such a way that the application (or user) can figure out how best to resolve it based on a full understanding of the schema, what the data means and how it&#8217;s used. It is up to the developer which approach they use (if any) &#8211; it is selected on a per-table basis.</p>
<h3>Common prerequisite steps</h3>
<p>These steps should be followed regardless of whether you want to use conflict resolution or conflict detection (where the application decides how to resolve it).</p>
<ol>
<li>Set up multi-master replication as described in <a href="./../../mysql-cluster/setting-up-mysql-asynchronous-replication-for-high-availability/index.html" target="_blank">Setting up MySQL Asynchronous Replication for High Availability</a></li>
<li>Create the function &#8220;inttime&#8221; for use in the stored procedures as described in <a href="./../../mysql/creating-a-mysql-plugin-to-produce-an-interger-timestamp/index.html" target="_blank">Creating a MySQL plugin to produce an integer timestamp</a> <strong>Note that you will need to install inttime.so on each host</strong></li>
</ol>
<h3>Setting up Automatic Conflict Resolution (Greatest timestamp wins)</h3>
<p>This is the simplest way to handle conflicts with MySQL Cluster when implementing multi-master asynchronous replication (actually, the simplest is to do nothing and accept that if your application(s) update the same row at about the same time at both Clusters then those Clusters may be left with different data until the application(s) next update that row).</p>
<p>Remember that this mechanism works by checking that the timestamp field of the update received by the slave is later than the one already stored. In the example that follows, the &#8216;ts&#8217; column is used for the timestamp.</p>
<p>Create the database on either cluster (replication will make sure that it appears in both Clusters):</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql&gt; create database clusterdb;
</pre>
<p>Before creating the application tables, set  up the ndb_replication system table (again, in either Cluster):</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql&gt; CREATE TABLE mysql.ndb_replication ( db VARBINARY(63), table_name VARBINARY(63), server_id INT UNSIGNED, binlog_type INT UNSIGNED, conflict_fn VARBINARY(128), PRIMARY KEY USING HASH (db, table_name, server_id) ) ENGINE=NDB PARTITION BY KEY(db,table_name);

mysql&gt; insert into mysql.ndb_replication values ('clusterdb', 'tab1', 7, NULL, 'NDB$MAX(ts)');
</pre>
<p>After that, you can create the application table:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
cluster1 mysql&gt; use clusterdb;

cluster1 mysql&gt; create table tab1 (NAME varchar(30) not null primary key,VALUE int, ts BIGINT UNSIGNED default NULL) engine=ndb;
</pre>
<p>To test that the basic replication is working for this table, insert a row into cluster1, check it&#8217;s there in cluster2, add a second row to cluster2 and make sure it&#8217;s visible in cluster1:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
cluster1 mysql&gt; insert into tab1 values ('Frederick', 1, 0);

cluster2 mysql&gt; use clusterdb;
cluster2 mysql&gt; select * from tab1;
+-----------+-------+------+
| NAME      | VALUE | ts   |
+-----------+-------+------+
| Frederick |     1 |    0 |
+-----------+-------+------+
1 row in set (0.00 sec)
cluster2 mysql&gt; insert into tab1 values ('William',20,0);

cluster1 mysql&gt; select * from tab1;
+-----------+-------+------+
| NAME      | VALUE | ts   |
+-----------+-------+------+
| Frederick |     1 |    0 |
| William   |    20 |    0 |
+-----------+-------+------+
2 rows in set (0.00 sec)
</pre>
<p>For both rows, the timestamp was set to 0 to represent &#8216;the start of time&#8217;, from this point on, whenever making a change to those rows, the timestamp should be increased. Later on on in this article, I&#8217;ll show how to automate that process.</p>
<p>We&#8217;re now ready to test that the conflict resolution is working; to do so replication is stopped (in both directions) to increase the window for a conflict and the same tuple updated on each Cluster. Replication is then restarted and then I&#8217;ll confirm that the last update wins on both clusters:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
cluster1 mysql&gt; slave stop;

cluster2 mysql&gt; slave stop;

cluster1 mysql&gt; update tab1 set VALUE=10,ts=1 where NAME='Frederick';

cluster2 mysql&gt; update tab1 set VALUE=11,ts=2 where NAME='Frederick';

cluster1 mysql&gt; slave start;

cluster2 mysql&gt; slave start;

cluster1 mysql&gt; select * from tab1;
+-----------+-------+------+
| NAME      | VALUE | ts   |
+-----------+-------+------+
| William   |    20 |    0 |
| Frederick |    11 |    2 |
+-----------+-------+------+
2 rows in set (0.00 sec)

clusrer2 mysql&gt; select * from tab3;
+-----------+-------+------+
| NAME      | VALUE | ts   |
+-----------+-------+------+
| William   |    20 |    0 |
| Frederick |    11 |    2 |
+-----------+-------+------+
2 rows in set (0.00 sec)
</pre>
<p>This confirms that the later update (timestamp of 2) is stored in both Clusters &#8211; conflict resolved!</p>
<h3>Automating the timestamp column</h3>
<p>Manually setting the timestamp value is convenient when testing that the mechanism is working as expected could be a nuisance in a production environment (for example, you would need to get the clocks of all application nodes exactly in sync wherever in the world they&#8217;re located). This section describes how that can be automated using stored procedures (note that stored procedures don&#8217;t work when using the NDB API to make changes but in that situation it should be straight-forward to provide wrapper methods that manage the timestamp field). Note that the timestamp must be an integer field (and needs a high level of precision) and so you can&#8217;t use the regular MySQL TIMESTAMP type.</p>
<p>This mechanism assumes that you&#8217;ve built &#8220;inttime.so&#8221; and deployed it to the hosts running the mysqld processes for each cluster (refer to the prerequisite section).</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
cluster1 mysql&gt; create trigger tab1_insert before insert on tab3 for each row set NEW.ts=inttime;
cluster1 mysql&gt; create trigger tab1_update before update on tab3 for each row set NEW.ts=inttime;
cluster1 mysql&gt; insert into tab1 (NAME,VALUE) values ('James',10),('David',20);
cluster1 mysql&gt; select * from tab1;
+-----------+-------+------------------+
| NAME      | VALUE | ts               |
+-----------+-------+------------------+
| William   |    20 |                0 |
| David     |    20 | 1250090500370307 |
| James     |    10 | 1250090500370024 |
| Frederick |    11 |                2 |
+-----------+-------+------------------+
4 rows in set (0.00 sec)

cluster2 mysql&gt; update tab1 set VALUE=55 where NAME='William';
cluster2 mysql&gt; select * from tab1;
+-----------+-------+------------------+
| NAME      | VALUE | ts               |
+-----------+-------+------------------+
| James     |    10 | 1250090500370024 |
| Frederick |    11 |                2 |
| William   |    55 | 1250090607251846 |
| David     |    20 | 1250090500370307 |
+-----------+-------+------------------+
4 rows in set (0.00 sec)
</pre>
<h3>Setting up Conflict Detection (Same timestamp wins)</h3>
<p>With this method, conflicts are detected and recorded but not automatically resolved. The intent is to allow the application to decide how to handle the conflict based on an understanding of what the data means.</p>
<p>Create the database on either cluster (replication will make sure that it appears in both Clusters):</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql&gt; create database clusterdb;
</pre>
<p>Before creating the application tables, set  up the ndb_replication system table (again, in either Cluster):</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql&gt; CREATE TABLE mysql.ndb_replication ( db VARBINARY(63), table_name VARBINARY(63), server_id INT UNSIGNED, binlog_type INT UNSIGNED, conflict_fn VARBINARY(128), PRIMARY KEY USING HASH (db, table_name, server_id) ) ENGINE=NDB PARTITION BY KEY(db,table_name);

mysql&gt; insert into mysql.ndb_replication values ('clusterdb', 'SubStatus', 7, NULL, 'NDB$OLD(ts)');
</pre>
<p>After that, you can create the application table and its associated exception table:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
cluster1 mysql&gt; use clusterdb;
cluster1 mysql&gt; create table SubStatus$EX (server_id INT UNSIGNED,master_server_id INT UNSIGNED,master_epoch BIGINT UNSIGNED,count INT UNSIGNED,sub_id int not null,notes VARCHAR(30) DEFAULT 'To be resolved', PRIMARY KEY (server_id, master_server_id, master_epoch, count)) engine=ndb;
cluster1 mysql&gt; create table SubStatus (sub_id int not null primary key, ActivationStatus varchar(20), ts BIGINT default 0) engine=ndb;
</pre>
<p>To test that the exception table gets filled in, add some rows to the table and then cause an update conflict (in a similar way to the conflict resolution example but after setting up the timestamp automation):</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
cluster1 mysql&gt; create trigger SubStatus_insert before insert on SubStatus for each row set NEW.ts=inttime();
cluster1 mysql&gt; insert into SubStatus (sub_id, ActivationStatus) values (1,'Active'),(2,'Deactivated');
cluster1 mysql&gt; select * from SubStatus;
+--------+------------------+------------------+
| sub_id | ActivationStatus | ts               |
+--------+------------------+------------------+
|      1 | Active           | 1250094170589948 |
|      2 | Deactivated      | 1250094170590250 |
+--------+------------------+------------------+
2 rows in set (0.00 sec)

cluster2 myql&gt; use clusterdb;
cluster2 mysql&gt; select * from SubStatus;
+--------+------------------+------------------+
| sub_id | ActivationStatus | ts               |
+--------+------------------+------------------+
|      1 | Active           | 1250094170589948 |
|      2 | Deactivated      | 1250094170590250 |
+--------+------------------+------------------+
2 rows in set (0.00 sec)

cluster1 mysql&gt; slave stop;

cluster2 mysql&gt; slave stop;

...
</pre>
<p>(at this point, just go on to test as with the conflict resoultion example but in this case expect to see that the confict is <strong>not</strong> resolved but an entry is added into the conflict table).</p>
<p>Of course, you can always add a trigger on the conflict table and use that to spur the application into initiating its own conflict resolution algorithm.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql-cluster/mysql-cluster-asynchronous-replication-conflict-detection-resolution1/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL Utilities Webinar &#8211; Q&#038;A + replay now available</title>
		<link>./../../mysql/mysql-utilities-webinar-qa-replay-now-available/index.html</link>
					<comments>./../../mysql/mysql-utilities-webinar-qa-replay-now-available/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Mon, 29 Jul 2013 07:46:32 +0000</pubDate>
				<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Utilities]]></category>
		<category><![CDATA[Replication]]></category>
		<guid isPermaLink="false">./../../index.html?p=2896</guid>

					<description><![CDATA[Dr Charles Bell and I recently presented a webinar on MySQL Utilities; there was a heavy focus on what you can acheive with them and how you should use them. In case you couldn&#8217;t attend or want to listen to some of the details again, the replay from that webinar is available here. Abstract: MySQL]]></description>
										<content:encoded><![CDATA[<p><a href="./../../wp-content/uploads/2013/07/MySQL_Utilities.png"><img loading="lazy" decoding="async" class="alignright size-medium wp-image-2875" alt="MySQL Utilities logo" src="./../../wp-content/uploads/2013/07/MySQL_Utilities-300x125.png" width="300" height="125" /></a>Dr Charles Bell and I recently presented a webinar on MySQL Utilities; there was a heavy focus on what you can acheive with them and how you should use them. In case you couldn&#8217;t attend or want to listen to some of the details again, the <a title="MySQL Utilities webinar replay" href="http://w.on24.com/r.htm?e=655548&amp;s=1&amp;k=EEBAC76AC407E0017ABF67F4686C7B2F" target="_blank">replay from that webinar is available here</a>.</p>
<h3>Abstract:</h3>
<p>MySQL Utilities provide a collection of command-line utilities that are used for maintaining and administering MySQL databases, including:</p>
<ul>
<li>Admin Utilities (Clone, Copy, Compare, Diff, Export, Import)</li>
<li>Replication Utilities (Setup, Configuration, Automated Slave Promotion)</li>
<li>General Utilities (Disk Usage, Redundant Indexes, Search Meta Data)</li>
</ul>
<p>Andrew Morgan and Chuck Bell will guide you through these utilities, and many more, explaining what you can gain from these tools and how to use them (for example how a single command repeatedly checks your master server and in the event it fails, automatically promotes one of the slaves to be the new master).</p>
<h3>Question &amp; Answer Summary:</h3>
<ul>
<li><strong>Using these utilities, can we export/import routines&#8217; source as well?</strong> Yes.</li>
<li><strong>I generally run multi-master behind a proxy (haproxy). I was wondering if the replication check would work. But I guess mysql still does not support multi-master or ring replcation.</strong> It depends on want you intend to do exactly. There are some limitation, but we intend to improve the utilities over time. So, just test the utilities on your environment and your are welcome to share your feedback with us.</li>
<li><strong>Do you need the python connector if you have the utilities on workbench?</strong> No, it is bundled as part of WB.</li>
<li><strong>What does &#8220;mysqluserclone&#8221; do that &#8220;SHOW GRANTS FOR USER&#8221; doesn&#8217;t do?</strong> It actually creates the users, clone them and not simply show its privileges like SHOW GRANTS. You can find more details <a href="http://dev.mysql.com/doc/workbench/en/mysqluserclone.html" title="mysqluserclone manual" target="_blank">here</a>.</li>
<li><strong>With mysqlfailover can I set a sequence to swith specific order if a fail occurs with the master?</strong>  Yes, you can. It will follow the sequence of the defined candidates.</li>
<li><strong>Can I run mysqlfailover on a independent server that check the master and their slave servers or it can run on the master or slave servers (mandatory)?</strong> Running on an independent server is ideal. After all, you don&#8217;t want it to disappear when the master&#8217;s host fails.</li>
<li><strong>How many MySQL instances can I manage with mysqlfailover, I mean there is possible to check more than one array with the same independent server?</strong> With one mysqlfailover instance you can monitor one topology, i.e. one master and all its slaves. If you have more than one topology (using a different master) you can use a mysqlfailover instance to monitor each one.
</li>
<li><strong>If a master goes down and replication failover is successful, how hard is it to bring that old master back into the fold, assuming it was just a network disruption?</strong> You can use mysqlreplicate to set the old master as a slave of the new master resulted by the failover, that will update the old master. then you can use mysqlrpladmin to switchover the just added slave, to make it a master again, that back your original replication setup.</li>
<li><strong>Can mysqlprocgrep log what it kills?</strong> There is no option to log what it is done. But you can redirect the utility output if it contains the information you need.</li>
<li><strong>How does mysqldbcompare handle auto-increment columns?</strong> It will find the difference between auto_increment values. So, currently if it is different it will identify the difference. You will get the difference, as: changed or missing rows are shown in a standard format of GRID, CSV, TAB, or VERTICAL. you can choose in which format you want to get the difference.</li>
<li><strong>I use Pacemaker/Corosync to achieve failover. Is mysqlfailover suitable for use in that context? Do I need to add extra logic around it, some wrapper script? If so, does Oracle provide a ready-made scripts for Pacemaker/Corosync?</strong> mysqlfailover was designed to work independently, and provides some functionalities that may help with the integration with other systems (like the possibility to execute external pre- pos- failover scripts). We do not have a ready-made script for Pacemaker/Corosync. For more information <a href="http://dev.mysql.com/doc/workbench/en/mysqlfailover.html" title="mysqlfailover manual" target="_blank">check here</a>.</li>
<li><strong>How long are the frm files kept if the database is corrupt or was deleted.</strong> The .frm files are not removed in any way. So there is no deletion or removal of the .frm files. The .frm files are an integral part of the server and stored in the datadir.</li>
<li><strong>Can mysqlserverclone clone instances between separate servers? Using SSH?</strong> mysqlserverclone, starts a new instance, that mimics a running server or a offline server by taking a look to his configuration, but to copy objects like tables, to another instance you need to use mysqldbcopy. We do not currently support SSH. If you see this as a much needed feature, please open a feature request via bugs.mysql.com. That will help us understand the need and urgency.</li>
</ul>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql/mysql-utilities-webinar-qa-replay-now-available/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>New white paper &#8211; MySQL Replication &#8211; Enhancing Scalability and Availability with MySQL 5.5</title>
		<link>./../../mysql-replication/new-white-paper-mysql-replication-enhancing-scalability-and-availability-with-mysql-5-5/index.html</link>
					<comments>./../../mysql-replication/new-white-paper-mysql-replication-enhancing-scalability-and-availability-with-mysql-5-5/index.html#comments</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Wed, 13 Oct 2010 11:28:14 +0000</pubDate>
				<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[Replication]]></category>
		<category><![CDATA[White Paper]]></category>
		<guid isPermaLink="false">./../../index.html?p=1324</guid>

					<description><![CDATA[A new white paper has been published that covers MySQL Replication &#8211; background information, how it works, how to use it and what&#8217;s new in MySQL 5.5. Simply register for the white paper at mysql.com and you&#8217;ll be sent your free copy. The paper starts by covering the fundamental concepts behind replication such as the]]></description>
										<content:encoded><![CDATA[<div id="attachment_1325" style="width: 310px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2010/10/Multiple_slaves.jpg"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-1325" class="size-medium wp-image-1325" title="Multiple_slaves" src="./../../wp-content/uploads/2010/10/Multiple_slaves-300x202.jpg" alt="" width="300" height="202" /></a><p id="caption-attachment-1325" class="wp-caption-text">MySQL Replication from 1 Master to Multiple Slaves</p></div>
<p>A new white paper has been published that covers MySQL Replication &#8211; background information, how it works, how to use it and what&#8217;s new in MySQL 5.5. Simply <a href="http://www.mysql.com/why-mysql/white-papers/mysql-wp-replication.php" target="_blank">register for the white paper at mysql.com</a> and you&#8217;ll be sent your free copy.</p>
<p>The paper starts by covering the fundamental concepts behind replication such as the difference between synchronous and asynchronous replication and the idea behind semisynchronous replication.</p>
<p>It goes on to describe the common use-cases for replication &#8211; scaling out, high availability, geographic redundancy and offloading backups or analytics.</p>
<p>Various replication topologies are discussed from simple master-slave to multi-master rings.</p>
<p>As the title of the paper suggests, the paper covers the significant replication changes introduced in MySQL 5.5:</p>
<ul>
<li><strong>Semisynchronous replication</strong>: Improved resilience by having master wait for slave to persist events.</li>
<li><strong>Slave fsync tuning &amp; Automatic relay log recovery</strong>: Option to dictate when relay logs are written to disk rather than relying on default operating system behavior; set sync_relay_log=1 to ensure that no more than 1 statement or transaction is missing from the relay log after a crash. The slave can now recover from corrupted relay logs by requesting corrupt entries to be resent from the master. Three new options are introduced (sync-master-info, sync-relay-log and sync-relay-log-info)</li>
<li><strong>Replication Heartbeat</strong>: Automatically checks the status of the connection between the master and the slave(s), allowing a more precise failure detection mechanism. Can detect loss of connection within milliseconds (configurable). Avoid unnecessary relay log rotation when the master is idle.</li>
<li><strong>Per server replication filtering</strong>: When a server is removed from a replication ring, a surviving server can be selected to remove its outstanding replication messages once they’ve been applied by all servers.</li>
<li><strong>Precise Slave Type Conversions</strong>: Allows different types to be used on the master and slave,  with automatic type promotion and demotion when using row-based replication (already possible with statement-based replication)</li>
<li><strong>Individual Log Flushing</strong>: Selectively flush server logs when using &#8216;FLUSH LOGS&#8217; for greater control</li>
<li><strong>Safe logging of mixed transactions</strong>: Replicate transactions containing both InnoDB and MyISAM changes</li>
</ul>
<p>To be better able to use replication, it helps to understand the basics about how MySQL Replication has been implemented &#8211; for example the roles of the binary and relay logs and so this is covered.</p>
<p>Perhaps the most useful sections are those that actually walk through using MySQL Replication &#8211; specifically these activities:</p>
<ul>
<li>Configuring, running and testing replication</li>
<li>Migrating from traditional asynchronous replication to semisynchronous replication</li>
<li>Administering &amp; monitoring replication (including MySQL Enterprise Monitor)</li>
<li>Failover and recovery</li>
</ul>
<p>Replication is a little different when using MySQL Cluster; most significantly because you can have multiple MySQL Servers and other application nodes modifying the same database but also because the domains where MySQL Cluster has been used have required extreme High Availability and so there are Cluster-unique features such as active-active replication with conflict detection and resolution. This paper isn&#8217;t focussed on MySQL Cluster but a summary of these differences is included.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql-replication/new-white-paper-mysql-replication-enhancing-scalability-and-availability-with-mysql-5-5/feed/index.html</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
	</channel>
</rss>
