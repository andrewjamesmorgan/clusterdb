<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>MySQL 5.7 &#8211; Andrew Morgan on Databases</title>
	<atom:link href="./feed/index.html" rel="self" type="application/rss+xml" />
	<link>./../../index.html</link>
	<description>Database technologies - especially around scalability and High Availability</description>
	<lastBuildDate>Wed, 02 Apr 2014 22:17:30 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>MySQL Replication &#8211; Multi-Threaded Slave just got a whole lot faster</title>
		<link>./../../mysql-replication/mysql-replication-multi-threaded-slave-just-got-a-whole-lot-faster/index.html</link>
					<comments>./../../mysql-replication/mysql-replication-multi-threaded-slave-just-got-a-whole-lot-faster/index.html#comments</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Wed, 02 Apr 2014 22:17:30 +0000</pubDate>
				<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL 5.7]]></category>
		<guid isPermaLink="false">./../../index.html?p=3874</guid>

					<description><![CDATA[A new MySQL MySQL 5.7 Multi-threaded slave labs load has now been published on MySQL Labs. This represents a signifficant step in the process of speeding up the processing of replication events on the slave &#8211; letting it keep up with the master. The original implementation of MTS made a simple assumption about what events]]></description>
										<content:encoded><![CDATA[<p><a href="./../../wp-content/uploads/2014/03/MySQL_Replication.png"><img decoding="async" src="./../../wp-content/uploads/2014/03/MySQL_Replication-300x101.png" alt="MySQL Replication Logo" width="300" height="101" class="alignright size-medium wp-image-3803" srcset="./../../wp-content/uploads/2014/03/MySQL_Replication-300x101.png 300w, ./../../wp-content/uploads/2014/03/MySQL_Replication-1024x347.png 1024w, ./../../wp-content/uploads/2014/03/MySQL_Replication-900x305.png 900w, ./../../wp-content/uploads/2014/03/MySQL_Replication.png 1240w" sizes="(max-width: 300px) 100vw, 300px" /></a><br />
A new MySQL <a href="labs.mysql.com" title="MySQL 5.7 Multi-threaded slave labs load" target="blank">MySQL 5.7 Multi-threaded slave labs load</a> has now been published on <a href="labs.mysql.com" title="MySQL Labs" target="blank">MySQL Labs</a>. This represents a signifficant step in the process of speeding up the processing of replication events on the slave &#8211; letting it keep up with the master.</p>
<p>The original implementation of MTS made a simple assumption about what events could safely be applied in parallel (with no dependency on the ordering). That assumption was that different schemas had no dependencies on each other and so if you had 5 schemas then one event from each schema could be applied in parallel (this is described in <a href="./../../mysql-replication/mysql-5-6-ga-replication-enhancements/index.html" title="MySQL 5.6 GA – Replication Enhancements" target="blank">MySQL 5.6 GA – Replication Enhancements</a>). This approach delivered a much higher throughput on the slave but only if you were using multiple schemas &#8211; perfect for many deployments (such as multi-tenant systems) but if you only had a single database then it didn&#8217;t help.</p>
<p>Last year we released a new version which removed that dependency on multiple schemas &#8211; allowing events to be applied to the same schema in parallel. For this implementation the new assumption was that if a set of transactions were part of the same binlog group commit on the master then the locking on the master has already determined that they&#8217;re indepent of each other and so that same set of events can be applied in parallel on the slave.</p>
<p>The latest enhancement is to allow the user to tune how many transactions are likely to be in each of those BGC buckets. This is done at the expense of delaying commits on the master and can be controlled by specifying the longest time that the system should wait (<code>binlog-group-commit-delay</code>) and the maximum number of transactions that should be committed together (<code>binlog-group-commit-count</code>). Initial benchmark results are very possitive &#8211; a 6X throughput (if willing to tolerate a small impact to the latency on the master) or 3X with no impact to the master.</p>
<p><a href="./../../wp-content/uploads/2014/04/Screen-Shot-2014-04-02-at-10.03.58.png"><img fetchpriority="high" decoding="async" src="./../../wp-content/uploads/2014/04/Screen-Shot-2014-04-02-at-10.03.58.png" alt="Multi-Threaded slave performance gains" width="1480" height="930" class="aligncenter size-full wp-image-3875" srcset="./../../wp-content/uploads/2014/04/Screen-Shot-2014-04-02-at-10.03.58.png 1480w, ./../../wp-content/uploads/2014/04/Screen-Shot-2014-04-02-at-10.03.58-300x188.png 300w, ./../../wp-content/uploads/2014/04/Screen-Shot-2014-04-02-at-10.03.58-1024x643.png 1024w, ./../../wp-content/uploads/2014/04/Screen-Shot-2014-04-02-at-10.03.58-900x565.png 900w" sizes="(max-width: 1480px) 100vw, 1480px" /></a><br />
This is a feature where the mileage will definitely vary depending on your application and how you tune these two new parameters and so I&#8217;d certainly recommend that you try it out for yourselves. As always we&#8217;re anxious to get your feedback &#8211; for example through comments on this post or on the <a href="http://forums.mysql.com/list.php?26" title="MySQL Replication forum" target="blank">MySQL Replication forum</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql-replication/mysql-replication-multi-threaded-slave-just-got-a-whole-lot-faster/feed/index.html</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>Webinar &#8211; What&#8217;s New in MySQL Replication</title>
		<link>./../../mysql-replication/webinar-whats-new-in-mysql-replication/index.html</link>
					<comments>./../../mysql-replication/webinar-whats-new-in-mysql-replication/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 06 Dec 2013 17:16:04 +0000</pubDate>
				<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL 5.7]]></category>
		<guid isPermaLink="false">./../../index.html?p=2973</guid>

					<description><![CDATA[On Friday (22/11/2013), we hosted webinar covering the new replication features in the MySQL 5.7 DMR as well as in MySQL Labs. You can now view the webinar replay here. It’s a very exciting time for MySQL Replication! MySQL 5.6 contains numerous new replication features and Oracle recently announced&#8230; The second Development Milestone Release of]]></description>
										<content:encoded><![CDATA[<p><a href="./../../wp-content/uploads/2013/11/MySQL_Replication_and_HA.png"><img decoding="async" class="size-medium wp-image-2976 alignright" alt="MySQL Replication logo" src="./../../wp-content/uploads/2013/11/MySQL_Replication_and_HA-300x101.png" width="300" height="101" srcset="./../../wp-content/uploads/2013/11/MySQL_Replication_and_HA-300x101.png 300w, ./../../wp-content/uploads/2013/11/MySQL_Replication_and_HA-1024x347.png 1024w, ./../../wp-content/uploads/2013/11/MySQL_Replication_and_HA.png 1240w" sizes="(max-width: 300px) 100vw, 300px" /></a>On Friday (22/11/2013), we hosted webinar covering the new replication features in the MySQL 5.7 DMR as well as in MySQL Labs. You can now <a href="http://www.mysql.com/news-and-events/web-seminars/mysql-replication-discover-whats-new/" title="MySQL 5.7 Replication enhancements - webinar" target="_blank">view the webinar replay here</a>. </p>
<p>It’s a very exciting time for MySQL Replication! MySQL 5.6 contains numerous new replication features and Oracle recently announced&#8230;</p>
<ul>
<li>The second Development Milestone Release of MySQL 5.7, introducing yet again new replication features and enhancements including optimized multi-threaded slave, better consistency with semi-synchronous replication, and improved monitoring with new Performance Schema tables.</li>
<li>Early access to multi-source replication via <a title="Get multi-source MySQL Replication from MySQL Labs" href="http://labs.mysql.com/" target="_blank">labs.mysql.com</a></li>
</ul>
<p>During the live webinar, attendees asked questions and the MySQL Replication engineers answered them; this Q&#038;A is included here:</p>
<ul>
<li><strong>Can we have Master &#038; Slave on different versions of MySQL? Like Master is with 5.1 &#038; Slave with 5.6?</strong> In general, cross version replication to a next higher version on slave is supported unless the behaviour of SQL statements change in the different versions. For more details, please look at the <a href="http://dev.mysql.com/doc/refman/5.6/en/replication-compatibility.html" title="documentation on MySQL Replication cross-version compatibility" target="_blank"> documentation on MySQL Replication cross-version compatibility</a>.</li>
<li><strong>The MySQL Replication topology discussed here supports asynchronous replication. How is Synchronous replicaiton is possible with mysql?</strong> With the loss-less semi-synchronouse replication, you&#8217;re getting very close to synchronous replication in that when your transaction has committed, you can be sure that the change has been received by a slave and so is safe. If you want truly synchronous replication then you can use MySQL Cluster (the NDBCLUSTER storage engine); typically this synchronous replication would be within a data center but you can split the cluster if you have a real need. You can <a href="http://www.youtube.com/watch?v=DnWItDTZL2c" title="MySQL Cluster demo video" target="_blank">watch this demo video of MySQL Cluster</a>.</li>
<li><strong>When Slave says it is x seconds behind, what does that means? Does it means slave would require x seconds to recover and reach the master&#8217;s current position?</strong> When the slave SQL thread is actively processing updates, this field is the number of seconds that have elapsed since the timestamp of the most recent event on the master executed by that thread.</li>
<li><strong>What is default setting for the <a href="http://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_rpl_semi_sync_master_wait_point" title="rpl_semi_sync_master_wait_point documentation" target="_blank">rpl_semi_sync_master_wait_point</a> setting.</strong> after_sync</li>
<li><strong>What is the best mechanism in MySQL Community Edition for backing up InnoDB tables?</strong> <a href="http://dev.mysql.com/doc/refman/5.7/en/mysqldump.html" title="mysqldump database backup command">mysqldump</a> has <a href="http://dev.mysql.com/doc/refman/5.7/en/mysqldump.html#option_mysqldump_single-transaction" target="_blank">&#8211;single-transaction option</a>, which is mainly useful for InnoDB tables with REPEATABLE READ isolation level. In short, for Community Edition mysqldump is the best solution. But for Enterprise Edition, there is <a href="http://www.mysql.com/products/enterprise/backup.html" title="MySQL Enterprise Backup" target="_blank">MySQL Enterprise Backup</a>.</li>
<li><strong>How can I verify that my slave DB is in sync with the master? Is there something similar to the archive log sequence number verification in Oracle. we know there are some paramerts from show slave status output. But is there any other way to verify the sync status using MySQL tables?</strong> In MySQL 5.6, if you set master_info_repository and <a href="http://dev.mysql.com/doc/refman/5.6/en/replication-options-slave.html#sysvar_relay_log_info_repository" target="_blank">relay_log_info_repository</a> to TABLE the status information is put into the mysql.slave_relay_log_info and mysql.slave_master_info tables. And in MySQL 5.7 the status is put in performance_schema you can query the status using SQL.</li>
<li><strong>Does multi-source replication require the use of GTIDs?</strong> No &#8211; you just need to make sure that GTIDs are either enabled on the slave and all masters or disabled on all of them.</li>
<li><strong>If multi-source can work without GTIDs, how do you prevent a transaction executed on A which is replicated to B and C, from being replicated back again to C and B via the replication channel from B to C and C to B ?</strong> Without GTIDs, the transactions are re executed (in the above scenario) if the schema developer *doesn&#8217;t* take care of fixing the keys. If there is a conflict on a key, the Slave errors out. So, In short, MSR doesn&#8217;t involve itself with conflict detection and resolution. When using positions, the schema developer has to make sure that multisourced slave receives correct data to avoid reexecution of transactions.</li>
<li><strong>In loss-less semi-sync, how can the transaction be written in the binary log of the master without the master committing the transaction? Does this stall the transaction on the master (until a commit is written to the binary log)?</strong> When using this feature, a commit has two phases (which is same as an XA transaction) &#8211; first there is a prepare phase and then the commit phase. The binary log is written after the prepare phase but before commit phase(internally, it is part of the commit phase but happens before the engine commit).</li>
<li><strong>With parallel replication, is the binary logs order preserved on the slave (compared to the master), even if the transactions are applied in parallel? Asked in another way, can 2 slaves of the same master have different binlogs?</strong> No, the order will be different when multi-threaded slave feature is on.</li>
<li><strong>Are you working with an easier way to create a replication setup &#8211; like automatically copying the master database to the slave (something like you had for MyISAM before)?</strong> Take a look at <a href="http://dev.mysql.com/doc/workbench/en/utils-manuals.html" title="MySQL Utilities" target="_blank">MySQL Utilities</a> as there are lots of new tools in there 2 help setup, monitor and manage replication.</li>
<li><strong>You guys have multiple blogs and it is a shame to not present this information in a common place.</strong> That&#8217;s been something that we&#8217;ve been discussing as well. Of course they get aggregated through planet.mysql.com and there is also a <a href="./../../mysql-replication/mysql-5-7-2-dmr-and-labs-new-replication-features/index.html" title="MySQL 5.7 replication enhancements" target="_blank">summary blog</a> pointing to the others.</li>
<li><strong>In Loss-Less Semi-Sync replication, what happens if the slave dies, before it receives the change in the relay. Is there a timeout which then commits and ack the data to the master?</strong> Yes, there is a timeout. After the timeout, it commits and falls back to normal asynchronous replication. The timeout is specified by the variable <a href="http://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_rpl_semi_sync_master_timeout" target="_blank">rpl_semi_sync_master_timeout</a>. Currently you cannot turn off this behavior, but you can set the timeout very very high. For more information, see the <a href="http://dev.mysql.com/doc/refman/5.6/en/replication-semisync-installation.html" target="_blank" title="MySQL Semisynchronous Replication Installation and Configuration">configuration guide</a>.</li>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql-replication/webinar-whats-new-in-mysql-replication/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL 5.7.2 DMR and Labs &#8211; new replication features</title>
		<link>./../../mysql-replication/mysql-5-7-2-dmr-and-labs-new-replication-features/index.html</link>
					<comments>./../../mysql-replication/mysql-5-7-2-dmr-and-labs-new-replication-features/index.html#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Sat, 21 Sep 2013 16:33:57 +0000</pubDate>
				<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[High Avail]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL 5.7]]></category>
		<guid isPermaLink="false">./../../index.html?p=2953</guid>

					<description><![CDATA[With today&#8217;s announcement of the second MySQL 5.7 Development Milestone Release and a new labs release it&#8217;s a very exciting time for MySQL Replication. MySQL 5.6 contained a lot of new content to make replication faster, easier to use and more reliable (Global Transaction Identifiers, Multi-Threaded Slaves, Binary Log Group Commit, Optimized Row Based Replication,]]></description>
										<content:encoded><![CDATA[<p>With today&#8217;s <a href="http://www.oracle.com/us/corporate/press/2020378">announcement of the second MySQL 5.7 Development Milestone Release</a> and a <a href="http://labs.mysql.com/" title="Download Multi-Source replication from MySQL Labs">new labs release</a> it&#8217;s a very exciting time for MySQL Replication. <a href="./../../mysql-replication/mysql-5-6-ga-replication-enhancements/index.html">MySQL 5.6</a> contained a lot of new content to make replication faster, easier to use and more reliable (Global Transaction Identifiers, Multi-Threaded Slaves, Binary Log Group Commit, Optimized Row Based Replication, Crash Safe Replication, Replication Event Checksums, Time Delayed Replication &amp; Informational Logs) and now we want to improve things even further.</p>
<p>The new DMR has something for everyone. </p>
<p>With the improvements to Semi-Synchronous Replication, the application developer can be confident that when a transaction has been commited, the changes have been safely copied to one or more slaves and so whatever happens, that change will not be lost. Further, we now prevent other application threads seeing those changes until they&#8217;ve been received by the slave and so the application cannot start acting on the new data until it&#8217;s known to be safe. This is an important improvement in consistency which moves more of the onus from the application developer onto the database.</p>
<p>DBAs want replication to be fast &#8211; in particular for the slave(s) not to fall behind the master. <a href="./../../mysql-replication/mysql-5-6-ga-replication-enhancements/index.html">MySQL 5.6</a> made some massive improvements in this area &#8211; both on the master and the slave. A number of users though were unable to exploit the Multi-Threaded Slave (MTS) feature as relied on the use of multiple schemas (databases) to get changes applied in parallel. In the new MySQL 5.7 DMR we&#8217;ve included a new option for MTS where changes can be applied in parallel &#8211; <strong>even within the same schema</strong>. A second performance feature improves throughput on the master &#8211; where the dump thread no longer needs to lock the binary log &#8211; refer to this engineering Blog on <a href="http://my-replication-life.blogspot.com/2013/09/dump-thread-enhancement.html" title="Dump Thread Enhancement on MySQL 5.7.2 - engineering Blog">Dump Thread Enhancement in MySQL 5.7.2</a> for more details.</p>
<p>DBAs also want to monitor the status of replication and for years have relied on the <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">SHOW SLAVE STATUS</span> command. As replication has evolved, <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">SHOW SLAVE STATUS</span> has become less suitable &#8211; we needed a solution that could properly model the more sophisticated replication architectures (including GTIDs and MTS) now possible. The approach we&#8217;ve taken is to provide this information through the <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">performance_schema</span>. </p>
<p>Note that the earlier MySQL 5.7 DMR added non-blocking <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">SHOW SLAVE STATUS</span>, idempotent and <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">&#8211;rewrite-db</span> options for <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">mysqlbinlog</span> &#8211; these are still available in the new DMR.</p>
<p>The new features are described in a little more detail in the following sections (together with links to more technical content from the MySQL Engineeing team).</p>
<h2 id="loss-less-semi-synchronous-replication">Loss-less Semi-Synchronous Replication</h2>
<div id="attachment_2957" style="width: 234px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2013/09/Intra-Schema-Semi-sync-replication.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-2957" class="size-medium wp-image-2957" alt="Intra-Schema Semi-Synchronous Replication" src="./../../wp-content/uploads/2013/09/Intra-Schema-Semi-sync-replication-224x300.png" width="224" height="300" /></a><p id="caption-attachment-2957" class="wp-caption-text">Intra-Schema Semi-Synchronous Replication</p></div>
<p>When using semi-synchronous replication in previous releases, the processing of the transaction on the master would wait for the slave&#8217;s acknowledgement <em>after</em> the change had been written to the storage engine but before the commit was acknowledged to the client. This satisfied the requirement that the application could be confident that if a transaction has been commited (and an acknowledgement received for the commit) then the update would not be lost. It did however leave a window where a user on another connection could read the new data from the master (because it has been written to the storage engine and the locks have been released) before the change had been received by the slave and safely stored in its relay log &#8211; that user could then start acting on that data but if the master failed at that point then that original update could still be lost and so the user would be acting on what is now inaccurate data.</p>
<p>This feature removes the above race condition by making the master wait for the update to be received by the slave <em>before</em> writing it to the storage engine and releasing the locks.</p>
<p>The functionality is enabled by default and shouldn&#8217;t have any negative impacts (for example on peformance) but it you&#8217;d like to disable it then you can do so using <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">rpl_semi_sync_master_wait_point = AFTER_SYNC</span>.</p>
<p>You can read more details on this in this <a href="http://my-replication-life.blogspot.com/2013/09/loss-less-semi-synchronous-replication.html" title="Loss-less Semi-Synchronous Replication on MySQL 5.7.2 blog">Loss-less Semi-Synchronous Replication on MySQL 5.7.2 blog</a> from the MySQL engineering team.</p>
<h2 id="intra-schema-multi-threaded-slaves">Intra-Schema Multi-Threaded Slaves</h2>
<p>DBAs want replication to be fast &#8211; in particular for the slave(s) not to fall behind the master. If there is a short but heavy burst of writes on the master then the slave falls behind (and there is a risk of lost data if the master fails during this period) but if the write-rate is sustained then the slave would fall further and further behind indefinitely. The ongoing challenge has been that the master gets faster and faster as more cores and clients are added but applying these changes asynchronously on the slave is more complex as you need to maintain some form of ordering in order to always have a consistent data set. </p>
<p>The earliest solution to maintaining ordering/consistency was for the slave to apply all of the changes serially, in a single thread &#8211; this ensured that changes were applied in the same order as on the master and so guaranteed the slave always contained a consistent view. Unfortunately this meant that the slave applier thread could only exploit a single core which is very wasteful in modern systems.</p>
<p><a href="./../../mysql-replication/mysql-5-6-ga-replication-enhancements/index.html">MySQL 5.6</a> made some massive improvements for many use cases by allowing the slave to apply updates in parallel using multiple threads. The assumption made was that data was held in multiple schemas (databases) and that there were no dependencies between the data in those different schemas. In this way all of the updates for a schema would be applied in order by a single thread (ensuring consistency) but updates to other schemas could be handled by additional threads. This allowed the slave to work many times faster but was limited to those use cases that met the assumptions.</p>
<p>In the second MySQL 5.7 DMR we introduce a new option that enables the slave to safely apply updates in parallel &#8211; even when all of the data is held within a single schema and no assumptions can be made about the independence between any rows from any tables. To avoid conflicts/divergence from the master, the slave must ensure that any transactions that are applied in parallel don&#8217;t read or write any overlapping rows. The good news is that this grouping on non-overlapping transactions is already being figured out on the master as part of the binary log group commit functionality (introduced in <a href="./../../mysql-replication/mysql-5-6-ga-replication-enhancements/index.html">MySQL 5.6</a>) as row level locking means that overlapping transactions cannot be part of the same group commit. </p>
<p>MySQL 5.7 adds a logical clock/counter to the master which is used to tag transactions that are part of the same group commit&#8217;s prepare phase. The slave can then use that information &#8211; knowing that it is safe to apply all of the transactions with the same logical clock value in any order (and so can use multiple threads). </p>
<p>Activating the functionality is very straight-forward and the key step is to set <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">slave-parallel-type = LOGICAL_CLOCK</span> but see this blog from the MySQL engineering team: <a href="http://binlogtorelaylog.blogspot.com/2013/09/enhancedMTS-configuration.html" title="MySQL 5.7 Enhanced MTS: configuring slave for Intra-database parallelization">using the intra-schema MTS functionality</a> for more detailed instructions. Note that there is another blog in the series &#8211; that <a href="http://binlogtorelaylog.blogspot.com/2013/09/enhancedMTS-deepdive.html" title="MySQL 5.7: MySQL 5.7: Enhanced Multi-threaded slaves">blog provides a detailed view of how the intra-schema MTS is implemented</a>.</p>
<h2 id="replication-performance-schema">Replication Performance Schema</h2>
<p>With the ever increasing sophistication of MySQL Replication, presenting all of the information in <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">SHOW SLAVE STATUS</span> has become unwieldy with data for multiple slave applier threads, GTID sets etc. What would be much more convenient is if this information were presented in tables so that the user could get exactly the information they needed using SQL queries (plus of course we can lay out the data in an understandable (relational) way and can access the information from stored procedures). MySQL 5.7.2 does just this by adding MySQL Replication tables to the <a href="http://dev.mysql.com/doc/refman/5.7/en/performance-schema-replication-tables.html" title="MySQL performance_schema documentation">MySQL performance_schema</a>.</p>
<p>This feature introduces 6 new <a href="http://dev.mysql.com/doc/refman/5.7/en/performance-schema-replication-tables.html" title="MySQL performance_schema documentation">performance_schema</a> tables: <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">replication_connection_configuration, replication_connection_status, replication_execute_configuration, replication_execute_status, replication_execute_status_by_coordinator, replication_execute_status_by_worker</span>.</p>
<p>Shivji from the MySQL engineering team has written a great <a href="http://shivjijha.blogspot.com/2013/09/Introducing-the-performance-schema-tables-to-monitor-MySQL-replication.html" title="Introducing the performance schema tables to monitor MySQL replication">blog post on what&#8217;s in the new performance_schema tables and how to interpret the results</a>.</p>
<h2 id="multi-source-replication-labs">Multi-Source Replication &#8211; <em>LABS</em></h2>
<div id="attachment_2956" style="width: 310px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2013/09/Multi-Source-Replication.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-2956" src="./../../wp-content/uploads/2013/09/Multi-Source-Replication-300x261.png" alt="Multi-Source Replication" width="300" height="261" class="size-medium wp-image-2956" /></a><p id="caption-attachment-2956" class="wp-caption-text">Multi-Source Replication</p></div>
<p>MySQL replication is very flexible in the way that networks of masters and slaves that can be built up; a master can replicate to multiple slaves, a master can itself be a slave of another master, you can create a replication ring&#8230;. The one caveat to this has always been that a slave server can only have a single master (MySQL Cluster is an exception to this rule).</p>
<p>Why might you want to do this? There are a few use cases around consolidating data from multiple MySQL Servers into one:<br />
  &#8211; Where each of the masters is for a different shard (where the application is responsible for the sharding) and you want to be able to run reports over all of that data to produce a consolidated view<br />
  &#8211; You want to avoid the expense of dedicating a slave server to each master server<br />
  &#8211; A remote location may require less throughput and so a single server can service all of the traffic for all of the data &#8211; the &#8216;super-slave&#8217; gives it a low-overhead, local database to access all of the data<br />
  &#8211; The &#8216;super-slave&#8217; is used as a point where you can perform backups for all of the data</p>
<p>It&#8217;s possible to have a slave time-slice between multiple masters with a bit of scripting but that isn&#8217;t an ideal solution. You can also add an additional repliation layer (such as writing your own code to use the binary log API) but it would be much simpler if it were built into MySQL itself.</p>
<p>In this <a href="http://labs.mysql.com/" title="Download multi-source replication from MySQL Labs">labs</a> (i.e. for test only, not to be deployed!) release we allow a slave to simultaneously receive and process replication events from multiple masters &#8211; exactly what our users have been asking for.</p>
<p>What&#8217;s more, we&#8217;ve also ensured that this new functionality is compatible with the other enhancements that have been made to the MySQL Replication architecture &#8211; this includes loss-less semi-synchronus replication; and intra-schema multi-threaded slaves (as well as the existing per-database MTS). This means that you don&#8217;t have to choose between all of these tempting features &#8211; the keys to the candy store are yours! </p>
<p>It&#8217;s likely that not all of the masters will be the same, have the same maintenance schedules etc. and so it makes sense to be able to manage each of the relationships independently. In this <a href="http://labs.mysql.com/" title="Download multi-source replication from MySQL Labs">labs</a> release you can manage each master independently, including the relevant server variables <em>but</em> the same replication filters are currently applied to the replication events from all of the masters &#8211; we recognise that this isn&#8217;t ideal but this is cuurently an early access release and it&#8217;s something we intend to address in future versions.</p>
<p>At the moment there&#8217;s no limit to the number of masters that can replicate to a specific slave &#8211; in the final version we&#8217;re likely to apply a configurable limit.</p>
<p>Because this further complicates the information that would need to be included in <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">SHOW SLAVE STATUS</span>, most of the detailed information is instead presented in the Performance Schema.</p>
<p>It should be pointed out that there is no conflict detection or resolution built into this feature &#8211; it is the responsibility of the application to make sure that the masters are working on distinct data sets (or that they&#8217;re comfortable with the results of any conflicts).</p>
<p>For more technical details, refer to this <a href="http://on-mysql-replication.blogspot.com/2013/09/feature-preview-mysql-multi-source-replication.html" title="Multi-Source Replication blog post">engineering blog post on multi-source replication</a>.</p>
<h2 id="summary">Summary</h2>
<p>There&#8217;s a lot of exciting new content in the MySQL 5.7.2 DMR (<a href="http://dev.mysql.com/downloads/mysql/#downloads" title="Download MySQL 5.7.2 Development Milestone Release">download here</a>) and the Mulit-Source Replication labs release (<a href="http://labs.mysql.com/" title="Download multi-source replication from MySQL Labs">download here</a>). The reason these features has been released is that we value early feedback from our community and customers &#8211; please try them out and let us know what we&#8217;re getting right and what needs to be enhanced!</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql-replication/mysql-5-7-2-dmr-and-labs-new-replication-features/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
