<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>distribution aware &#8211; Andrew Morgan on Databases</title>
	<atom:link href="./feed/index.html" rel="self" type="application/rss+xml" />
	<link>./../../index.html</link>
	<description>Database technologies - especially around scalability and High Availability</description>
	<lastBuildDate>Mon, 06 Jul 2009 15:36:25 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>Intelligent user-controlled partitioning and writing distribution-aware NDB API Applications</title>
		<link>./../../mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications/index.html</link>
					<comments>./../../mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications/index.html#comments</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Mon, 06 Jul 2009 15:36:25 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[distribution aware]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster CGE]]></category>
		<category><![CDATA[NDB API]]></category>
		<category><![CDATA[partition]]></category>
		<guid isPermaLink="false">./../../index.html?p=248</guid>

					<description><![CDATA[Default partitioning When adding rows to a table that&#8217;s using MySQL Cluster as the storage engine, each row is assigned to a partition where that partition is mastered by a particular data node in the Cluster. The best performance comes when all of the data required to satisfy a transaction is held within a single]]></description>
										<content:encoded><![CDATA[<h3>Default partitioning</h3>
<div id="attachment_246" style="width: 310px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2009/07/poor_partitioning.jpg"><img fetchpriority="high" decoding="async" aria-describedby="caption-attachment-246" class="size-medium wp-image-246" title="Default partitioning" src="./../../wp-content/uploads/2009/07/poor_partitioning-300x174.jpg" alt="By default, Cluster will partition based on primary key" width="300" height="174" srcset="./../../wp-content/uploads/2009/07/poor_partitioning-300x174.jpg 300w, ./../../wp-content/uploads/2009/07/poor_partitioning.jpg 800w" sizes="(max-width: 300px) 100vw, 300px" /></a><p id="caption-attachment-246" class="wp-caption-text">By default, Cluster will partition based on primary key</p></div>
<p>When adding rows to a table that&#8217;s using MySQL Cluster as the storage engine, each row is assigned to a partition where that partition is mastered by a particular data node in the Cluster. The best performance comes when all of the data required to satisfy a transaction is held within a single partition so that it can be satisfied within  a single data node rather than being bounced back and forth between multiple nodes where  extra latency will be introduced.</p>
<p>By default, Cluster partions the data by hashing the primary key. This is not always optimal.</p>
<p>For example, if we have 2 tables, the first using a single-column primary key (sub_id) and the second using a composite key (sub_id, service_name)&#8230;</p>
<pre style="padding-left: 30px; font-size: 11px;color: #993300;">mysql&gt; describe names;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| sub_id | int(11)     | NO   | PRI | NULL    |       |
| name   | varchar(30) | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+

mysql&gt; describe services;
+--------------+-------------+------+-----+---------+-------+
| Field        | Type        | Null | Key | Default | Extra |
+--------------+-------------+------+-----+---------+-------+
| sub_id       | int(11)     | NO   | PRI | 0       |       |
| service_name | varchar(30) | NO   | PRI |         |       |
| service_parm | int(11)     | YES  |     | NULL    |       |
+--------------+-------------+------+-----+---------+-------+</pre>
<p>If we then add data to these (initially empty) tables, we can then use the &#8216;explain&#8217; command to see which partitions (and hence phyical hosts) are used to store the data for this single subscriber&#8230;</p>
<pre style="padding-left: 30px; font-size: 11px;color: #993300;">mysql&gt; insert into names values (1,'Billy');

mysql&gt; insert into services values (1,'VoIP',20),(1,'Video',654),(1,'IM',878),(1,'ssh',666);

mysql&gt; explain partitions select * from names where sub_id=1;
+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+-------+
| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref   | rows | Extra |
+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+-------+
|  1 | SIMPLE      | names | p3         | const | PRIMARY       | PRIMARY | 4       | const |    1 |       |
+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+-------+

mysql&gt; explain partitions select * from services where sub_id=1;
+----+-------------+----------+-------------+------+---------------+---------+---------+-------+------+-------+
| id | select_type | table    | partitions  | type | possible_keys | key     | key_len | ref   | rows | Extra |
+----+-------------+----------+-------------+------+---------------+---------+---------+-------+------+-------+
|  1 | SIMPLE      | services | p0,p1,p2,p3 | ref  | PRIMARY       | PRIMARY | 4       | const |   10 |       |
+----+-------------+----------+-------------+------+---------------+---------+---------+-------+------+-------+</pre>
<p>The service records for the same subscriber (sub_id = 1) are split accross 4 diffent partitions (p0, p1, p2 &amp; p3). This means that the query results in messages being passed backwards and forwards between the 4 different data nodes which cnsumes extra CPU time and incurs extra latency.</p>
<h3>User-defined partitioning to the rescue</h3>
<p>We can override the default behaviour by telling Cluster which fields should be fed into the hash algorithm. For our example, it&#8217;s reasonable to expect a transaction to access multiple records for the same subscriber (identified by their sub_id) and so the application will perform best if all of the rows for that sub_id are held in the same partition&#8230;</p>
<pre style="padding-left: 30px; font-size: 11px;color: #993300;">mysql&gt; drop table services;

mysql&gt; create table services (sub_id int, service_name varchar (30), service_parm int, primary key (sub_id, service_name)) engine = ndb
-&gt; partition by key (sub_id);

mysql&gt; insert into services values (1,'VoIP',20),(1,'Video',654),(1,'IM',878),(1,'ssh',666);

mysql&gt; explain partitions select * from services where sub_id=1;
+----+-------------+----------+------------+------+---------------+---------+---------+-------+------+-------+
| id | select_type | table    | partitions | type | possible_keys | key     | key_len | ref   | rows | Extra |
+----+-------------+----------+------------+------+---------------+---------+---------+-------+------+-------+
|  1 | SIMPLE      | services | p3         | ref  | PRIMARY       | PRIMARY | 4       | const |   10 |       |
+----+-------------+----------+------------+------+---------------+---------+---------+-------+------+-------+</pre>
<p>Now all of the rows for sub_id=1 from the services table are now held within a single partition (p3) which is the same as that holding the row for the same sub_id in the names table. Note that it wasn&#8217;t necessary to drop, recreate and re-provision the services table, the following command would have had the same effect:</p>
<pre style="padding-left: 30px; font-size: 11px;color: #993300;">mysql&gt; alter table services partition by key (sub_id);</pre>
<h3>Writing a distribution-aware application using the NDB API</h3>
<div id="attachment_247" style="width: 310px" class="wp-caption alignright"><a href="./../../wp-content/uploads/2009/07/distribution_aware.jpg"><img decoding="async" aria-describedby="caption-attachment-247" class="size-medium wp-image-247" title="Distribution unaware application" src="./../../wp-content/uploads/2009/07/distribution_aware-300x169.jpg" alt="Distribution unaware NDB API application" width="300" height="169" srcset="./../../wp-content/uploads/2009/07/distribution_aware-300x169.jpg 300w, ./../../wp-content/uploads/2009/07/distribution_aware.jpg 461w" sizes="(max-width: 300px) 100vw, 300px" /></a><p id="caption-attachment-247" class="wp-caption-text">Distribution unaware NDB API application</p></div>
<p>In our example, the data is nicely partitioned for optimum performance when accessing all of the subscriber&#8217;s data &#8211; a single data node holding all of their data. However, there is another step to take to get the best out of your NDB-API based application. By default, the NDB API will use the Transaction Coordinator (TC) on a &#8216;random&#8217; data node to handle the transaction &#8211; we could get lucky and the guess is correct but it&#8217;s more likely that it will be sent to the wrong data node which with then have to proxy it to the correct data node. The probability of getting it right first time reduces as the number of node groups increases and so can prevent linear scaling.</p>
<p>It&#8217;s very simple to modify this behaviour so that the best data node/TC is hit first time, every time. When creating the transaction, the application can include parameters telling the NDB API one of the tables to be accessed and for what key(s). The NDB API will then use that information to identify the best TC to use&#8230;</p>
<pre style="padding-left: 30px; font-size: 11px;color: #993300;">
const NdbDictionary::Dictionary* myDict= myNdb.getDictionary();
const NdbDictionary::Table *namesTable= myDict-&gt;getTable("names");
const NdbDictionary::Table *servicesTable= myDict-&gt;getTable("services");

NdbRecAttr *myRecAttr;

Ndb::Key_part_ptr dist_key[2];
dist_key[0].ptr = (const void*) &amp;sub_id;
dist_key[0].len = sizeof(sub_id);
dist_key[1].ptr = NULL;
dist_key[1].len = NULL;

if (namesTable == NULL)
APIERROR(myDict-&gt;getNdbError());

if (servicesTable == NULL)
APIERROR(myDict-&gt;getNdbError());

NdbTransaction *myTransaction= myNdb.startTransaction(namesTable,
dist_key);
if (myTransaction == NULL) APIERROR(myNdb.getNdbError());

NdbOperation *myOperation= myTransaction-&gt;getNdbOperation(namesTable);
if (myOperation == NULL) APIERROR(myTransaction-&gt;getNdbError());

myOperation-&gt;readTuple(NdbOperation::LM_Read);
myOperation-&gt;equal("sub_id",sub_id);

myRecAttr= myOperation-&gt;getValue("name", NULL);
if (myRecAttr == NULL) APIERROR(myTransaction-&gt;getNdbError());

// Perform operations on "services" table as well as part of another operation
// if required; the subscriber's data will be in the same data node

if (myTransaction-&gt;execute( NdbTransaction::Commit ) == -1)
APIERROR(myTransaction-&gt;getNdbError());

printf(" %2d    %sn",
sub_id, myRecAttr-&gt;aRef());

myNdb.closeTransaction(myTransaction);
</pre>
<p>Note that as the services table has been configured to use the same field (sub_id) for partitioning as the names table, the startTransaction method only needs to know about the namesTable as the TC that the NDB API selects will serve just as well for this subscriber&#8217;s data from the services table. The rest of the code can be found in <a href='./../../wp-content/uploads/2009/07/distaware.cpp'>distaware</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>./../../mysql-cluster/intelligent-user-controlled-partitioning-and-writing-distribution-aware-ndb-api-applications/feed/index.html</wfw:commentRss>
			<slash:comments>8</slash:comments>
		
		
			</item>
	</channel>
</rss>
