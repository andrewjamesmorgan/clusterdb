<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>MySQL Replication &#8211; Andrew Morgan on Databases</title>
	<atom:link href="/category/mysql-replication/feed" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Database technologies - especially around scalability and High Availability</description>
	<lastBuildDate>Mon, 01 Dec 2014 09:23:23 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>MySQL Replication: What’s New in MySQL 5.7 and Beyond &#8211; webinar replay</title>
		<link>/mysql-replication/mysql-replication-whats-new-in-mysql-5-7-and-beyond-webinar-replay</link>
					<comments>/mysql-replication/mysql-replication-whats-new-in-mysql-5-7-and-beyond-webinar-replay#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Mon, 01 Dec 2014 09:23:23 +0000</pubDate>
				<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[High Availability]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[Replication]]></category>
		<category><![CDATA[secondary]]></category>
		<guid isPermaLink="false">/?p=3980</guid>

					<description><![CDATA[Luís Soares and I recently hosted a webinar which explained the latest developments in MySQL Replication. The webinar replay is now available to download from here. Details: Continuing in the footsteps of its predecessor, MySQL 5.7 is set to be a groundbreaking release. In this webinar, the engineers behind the product provide insights into what’s]]></description>
										<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2014/03/MySQL_Replication.png"><img decoding="async" class="alignright size-medium wp-image-3803" src="/wp-content/uploads/2014/03/MySQL_Replication-300x101.png" alt="MySQL Replication Logo" width="300" height="101" srcset="/wp-content/uploads/2014/03/MySQL_Replication-300x101.png 300w, /wp-content/uploads/2014/03/MySQL_Replication-1024x347.png 1024w, /wp-content/uploads/2014/03/MySQL_Replication-900x305.png 900w, /wp-content/uploads/2014/03/MySQL_Replication.png 1240w" sizes="(max-width: 300px) 100vw, 300px" /></a>Luís Soares and I recently hosted a webinar which explained the latest developments in MySQL Replication.</p>
<p>The webinar replay is now <a title="MySQL 5.7 latest developments" href="http://event.on24.com/eventRegistration/EventLobbyServlet?target=lobby.jsp&amp;eventid=880903&amp;sessionid=1&amp;key=C7FC018C0640492A4A758F6DCE77C87F&amp;eventuserid=109013173" target="_blank">available to download from here</a>.</p>
<p><iframe src="//www.slideshare.net/slideshow/embed_code/42205145" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></p>
<h3>Details:</h3>
<p>Continuing in the footsteps of its predecessor, MySQL 5.7 is set to be a groundbreaking release. In this webinar, the engineers behind the product provide insights into what’s new for MySQL replication in the latest 5.7 Development Milestone Release and review the early access features available via labs.mysql.com. The next generation of replication features cover several technical areas such as better semi-synchronous replication, an enhanced multithreaded slave (per-transaction parallelism), improved monitoring with performance schema tables, online configuration changes, options for fine-tuning replication performance, support for more-advanced topologies with multisource replication, and much more. This is also a great chance to learn about MySQL Group Replication &#8211; the next generation of active-active, update-anywhere replication for MySQL.</p>
<p>Seize the opportunity to learn how you will be able to leverage MySQL 5.7 replication to grow your business.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-replication/mysql-replication-whats-new-in-mysql-5-7-and-beyond-webinar-replay/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Upcoming Webinar &#8211; MySQL Replication: What’s New in MySQL 5.7 and Beyond</title>
		<link>/mysql-replication/upcoming-webinar-mysql-replication-whats-new-in-mysql-5-7-and-beyond</link>
					<comments>/mysql-replication/upcoming-webinar-mysql-replication-whats-new-in-mysql-5-7-and-beyond#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Mon, 24 Nov 2014 16:47:32 +0000</pubDate>
				<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[High Availability]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[Replication]]></category>
		<category><![CDATA[secondary]]></category>
		<guid isPermaLink="false">/?p=3972</guid>

					<description><![CDATA[On Tuesday 25th November, Luís Soares and I will be hosting a webinar which explains the latest developments in MySQL Replication. As always the webinar is free but please register here. Details: Continuing in the footsteps of its predecessor, MySQL 5.7 is set to be a groundbreaking release. In this webinar, the engineers behind the]]></description>
										<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2014/03/MySQL_Replication.png"><img decoding="async" class="alignright size-medium wp-image-3803" src="/wp-content/uploads/2014/03/MySQL_Replication-300x101.png" alt="MySQL Replication Logo" width="300" height="101" srcset="/wp-content/uploads/2014/03/MySQL_Replication-300x101.png 300w, /wp-content/uploads/2014/03/MySQL_Replication-1024x347.png 1024w, /wp-content/uploads/2014/03/MySQL_Replication-900x305.png 900w, /wp-content/uploads/2014/03/MySQL_Replication.png 1240w" sizes="(max-width: 300px) 100vw, 300px" /></a>On Tuesday 25th November, Luís Soares and I will be hosting a webinar which explains the latest developments in MySQL Replication. As always the webinar is free but please <a href="http://www.mysql.com/news-and-events/web-seminars/mysql-replication-whats-new-in-mysql-5-7-and-beyond/" title="MySQL Replication: What’s New in MySQL 5.7 and Beyond" target="_blank">register here</a>.</p>
<h3>Details:</h3>
<p>Continuing in the footsteps of its predecessor, MySQL 5.7 is set to be a groundbreaking release. In this webinar, the engineers behind the product provide insights into what’s new for MySQL replication in the latest 5.7 Development Milestone Release and review the early access features available via labs.mysql.com. The next generation of replication features cover several technical areas such as better semi-synchronous replication, an enhanced multithreaded slave (per-transaction parallelism), improved monitoring with performance schema tables, online configuration changes, options for fine-tuning replication performance, support for more-advanced topologies with multisource replication, and much more. This is also a great chance to learn about MySQL Group Replication &#8211; the next generation of active-active, update-anywhere replication for MySQL.</p>
<p>Seize the opportunity to learn how you will be able to leverage MySQL 5.7 replication to grow your business.</p>
<h3>When:</h3>
<ul>
<li>Tue, Nov 25: 09:00 Pacific time (America)</li>
<li>Tue, Nov 25: 10:00 Mountain time (America)</li>
<li>Tue, Nov 25: 11:00 Central time (America)</li>
<li>Tue, Nov 25: 12:00 Eastern time (America)</li>
<li>Tue, Nov 25: 15:00 São Paulo time</li>
<li>Tue, Nov 25: 17:00 UTC</li>
<li>Tue, Nov 25: 17:00 Western European time</li>
<li>Tue, Nov 25: 18:00 Central European time</li>
<li>Tue, Nov 25: 19:00 Eastern European time</li>
<li>Tue, Nov 25: 22:30 India, Sri Lanka</li>
<li>Wed, Nov 26: 01:00 Singapore/Malaysia/Philippines time</li>
<li>Wed, Nov 26: 01:00 China time</li>
<li>Wed, Nov 26: 02:00 日本</li>
<li>Wed, Nov 26: 04:00 NSW, ACT, Victoria, Tasmania (Australia) </li>
</ul>
<p>Even if you can&#8217;t join the live webinar, it&#8217;s worth registering as you&#8217;ll be emailed a link to the replay as soon as it&#8217;s available.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-replication/upcoming-webinar-mysql-replication-whats-new-in-mysql-5-7-and-beyond/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL Replication &#8211; Multi-Threaded Slave just got a whole lot faster</title>
		<link>/mysql-replication/mysql-replication-multi-threaded-slave-just-got-a-whole-lot-faster</link>
					<comments>/mysql-replication/mysql-replication-multi-threaded-slave-just-got-a-whole-lot-faster#comments</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Wed, 02 Apr 2014 22:17:30 +0000</pubDate>
				<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL 5.7]]></category>
		<guid isPermaLink="false">/?p=3874</guid>

					<description><![CDATA[A new MySQL MySQL 5.7 Multi-threaded slave labs load has now been published on MySQL Labs. This represents a signifficant step in the process of speeding up the processing of replication events on the slave &#8211; letting it keep up with the master. The original implementation of MTS made a simple assumption about what events]]></description>
										<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2014/03/MySQL_Replication.png"><img loading="lazy" decoding="async" src="/wp-content/uploads/2014/03/MySQL_Replication-300x101.png" alt="MySQL Replication Logo" width="300" height="101" class="alignright size-medium wp-image-3803" srcset="/wp-content/uploads/2014/03/MySQL_Replication-300x101.png 300w, /wp-content/uploads/2014/03/MySQL_Replication-1024x347.png 1024w, /wp-content/uploads/2014/03/MySQL_Replication-900x305.png 900w, /wp-content/uploads/2014/03/MySQL_Replication.png 1240w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><br />
A new MySQL <a href="labs.mysql.com" title="MySQL 5.7 Multi-threaded slave labs load" target="blank">MySQL 5.7 Multi-threaded slave labs load</a> has now been published on <a href="labs.mysql.com" title="MySQL Labs" target="blank">MySQL Labs</a>. This represents a signifficant step in the process of speeding up the processing of replication events on the slave &#8211; letting it keep up with the master.</p>
<p>The original implementation of MTS made a simple assumption about what events could safely be applied in parallel (with no dependency on the ordering). That assumption was that different schemas had no dependencies on each other and so if you had 5 schemas then one event from each schema could be applied in parallel (this is described in <a href="/mysql-replication/mysql-5-6-ga-replication-enhancements" title="MySQL 5.6 GA – Replication Enhancements" target="blank">MySQL 5.6 GA – Replication Enhancements</a>). This approach delivered a much higher throughput on the slave but only if you were using multiple schemas &#8211; perfect for many deployments (such as multi-tenant systems) but if you only had a single database then it didn&#8217;t help.</p>
<p>Last year we released a new version which removed that dependency on multiple schemas &#8211; allowing events to be applied to the same schema in parallel. For this implementation the new assumption was that if a set of transactions were part of the same binlog group commit on the master then the locking on the master has already determined that they&#8217;re indepent of each other and so that same set of events can be applied in parallel on the slave.</p>
<p>The latest enhancement is to allow the user to tune how many transactions are likely to be in each of those BGC buckets. This is done at the expense of delaying commits on the master and can be controlled by specifying the longest time that the system should wait (<code>binlog-group-commit-delay</code>) and the maximum number of transactions that should be committed together (<code>binlog-group-commit-count</code>). Initial benchmark results are very possitive &#8211; a 6X throughput (if willing to tolerate a small impact to the latency on the master) or 3X with no impact to the master.</p>
<p><a href="/wp-content/uploads/2014/04/Screen-Shot-2014-04-02-at-10.03.58.png"><img loading="lazy" decoding="async" src="/wp-content/uploads/2014/04/Screen-Shot-2014-04-02-at-10.03.58.png" alt="Multi-Threaded slave performance gains" width="1480" height="930" class="aligncenter size-full wp-image-3875" srcset="/wp-content/uploads/2014/04/Screen-Shot-2014-04-02-at-10.03.58.png 1480w, /wp-content/uploads/2014/04/Screen-Shot-2014-04-02-at-10.03.58-300x188.png 300w, /wp-content/uploads/2014/04/Screen-Shot-2014-04-02-at-10.03.58-1024x643.png 1024w, /wp-content/uploads/2014/04/Screen-Shot-2014-04-02-at-10.03.58-900x565.png 900w" sizes="auto, (max-width: 1480px) 100vw, 1480px" /></a><br />
This is a feature where the mileage will definitely vary depending on your application and how you tune these two new parameters and so I&#8217;d certainly recommend that you try it out for yourselves. As always we&#8217;re anxious to get your feedback &#8211; for example through comments on this post or on the <a href="http://forums.mysql.com/list.php?26" title="MySQL Replication forum" target="blank">MySQL Replication forum</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-replication/mysql-replication-multi-threaded-slave-just-got-a-whole-lot-faster/feed</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>Advanced MySQL Replication Architectures and Latest Developments &#8211; On-Demand webinar + Q&#038;A</title>
		<link>/mysql-replication/advanced-mysql-replication-architectures-and-latest-developments-on-demand-webinar-qa</link>
					<comments>/mysql-replication/advanced-mysql-replication-architectures-and-latest-developments-on-demand-webinar-qa#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Thu, 27 Mar 2014 16:01:35 +0000</pubDate>
				<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[High Availability]]></category>
		<category><![CDATA[MySQL]]></category>
		<guid isPermaLink="false">/?p=3864</guid>

					<description><![CDATA[We recently hosted a live webinar covering advanced MySQL Replication topics as well as the latest developments. The webinar charts and replay are now available here. Below, you&#8217;ll find the questions raised by the audience together with the responses given. More details on what was covered&#8230; The biggest Web sites in the world rely on]]></description>
										<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2014/03/MySQL_Replication.png"><img loading="lazy" decoding="async" src="/wp-content/uploads/2014/03/MySQL_Replication-300x101.png" alt="MySQL Replication Logo" width="300" height="101" class="alignright size-medium wp-image-3803" srcset="/wp-content/uploads/2014/03/MySQL_Replication-300x101.png 300w, /wp-content/uploads/2014/03/MySQL_Replication-1024x347.png 1024w, /wp-content/uploads/2014/03/MySQL_Replication-900x305.png 900w, /wp-content/uploads/2014/03/MySQL_Replication.png 1240w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><br />
We recently hosted a live webinar covering advanced MySQL Replication topics as well as the latest developments. <a href="http://www.mysql.com/news-and-events/web-seminars/advanced-mysql-replication-architectures-and-latest-developments/" title="Advanced MySQL Replication Architectures and Latest Developments - on-demand webinar" target="blank">The webinar charts and replay are now available here</a>. Below, you&#8217;ll find the questions raised by the audience together with the responses given.</p>
<p>More details on what was covered&#8230;</p>
<p>The biggest Web sites in the world rely on MySQL Replication to scale-out and provide High Availability for their data. Extend your knowledge of how MySQL Replication works and what you can achieve with it; join us for this technical webinar to explore some of the more advanced replication architectures as well as some of the latest product developments:</p>
<ul>
<li>Replication topologies, including master-slave, circular and multi-master</li>
<li>Load balancing and query splitting</li>
<li>Data aggregation with multi-source replication</li>
<li>Global Transaction IDs and auto-failover with recovery</li>
<li>Getting the best replication throughput</li>
<li>Heterogeneous replication with the Binlog API</li>
</ul>
<h2>Questions &#038; Answers</h2>
<ul>
<li><strong>Is the <code>server_uuid</code> constant in the lifetime of a MySQL server?</strong>: Yes, <code>server_uuid</code> it&#8217;s persisted in a file in the <code>data_dir</code>.</li>
<li><strong>How are the servers syncronized after a failure?</strong>: When slave connects to master it will inform master which GTIDs it already has, (whether just received or actually or applied), and the master will send what is missing.</li>
<li><strong>Are all the features being described available now in the latest community MySQL version?</strong>: Everything that is described is available to the community. Some features are currently in Development Milestone or labs releases but that is made clear in the charts.</li>
<li><strong>What is the maximum number of Slaves per Master and are there restrictions to the distance between Master and Slave?</strong>: There is no maximum number of slaves per master, that value depends on hardware and workload. There is an overhead on the master for each of the slaves (though this is reducing); you always have the option of replicating to another one or MySQL Servers and then use them as replication masters to fan out to many more slaves (those servers can even use the Black Hole storage engine so that they don&#8217;t even store the data. No distance limits, but with longer distances the network latency will increase. If using the default asynchronous replication, this latency has not effect other than possibly the slave(s) running slightly further behind but if using semi-synchronous replication then the transactions will take longer to commit.</li>
<li><strong>Is there a maximum number of worker threads that can be configured, or is it just dependient on your server hardware?</strong>: The maximum number of worker thread is 1024, but the real limitation is hardware.</li>
<li><strong>Is there a form of automatic client rerouting as a result of Switch/Failover?</strong>: Yes &#8211; MySQL Fabric which is also covered in this session.</li>
<li><strong>what&#8217;s the resolution of the timestamp?</strong>: Replication timestamp resolution is microseconds.</li>
<li><strong>Are all of these replication features available in both Synchronous and Asynchronous modes?</strong>: There is no synchronous mode, but they all work with both asynchronous and  semi-synchronous replication.</li>
<li><strong>Why is semi-sync replication only available as plugin? It makes it harder to setup with the present restrictions.</strong>: By implementing features as plugins, we can evolve the software faster by implementing them in new modules rather than in the large, complex MySQL Server code base. It also means that we can iterate more frequently as it doesn&#8217;t need to be tied to a MySQL Server release.</li>
<li><strong>Does semi-synchronous replication wait for all slaves or just a single one?</strong>: You can specify  how many slaves need to respond with the <clode>rpl_semi_sync_master_wait_slave_count</clode> option.</li>
<li><strong>In case of one master one slave, where slave can overtake master role in case of crash. Won&#8217;t it introduce split-brain scenario ? Does mysql have rollback settings in case of master crash?</strong>: Monitoring tools should ensure that the master has crashed crashed, or if it suspects that it became irresponsible then it should kill the master before performing the failover. Alternatively, take a look at MySQL Fabric.</li>
<li><strong>For now I have impression that if I want clients to automatically load balance read &#038; writes between masters/slaves then I should do this using mysql proxy. Is this still the best practice?</strong>: What language are you using &#8211; this functionality is built into some connectors (for exampe for PHP and Java)? Alternatively you could look at MySQL Fabric or hardware or software load ballancers.	</li>
<li><strong>How are autoincrement columns handled in MySQL Fabric when you have mulitiple HA Groups?</strong>: The first thing to point out is that an auto-increment column cannot be used as the sharding key. You can use <code>auto_increment_increment</code> and <code>auto_increment_offset</code> to make sure that you don&#8217;t repeat values on different shards (e.g. if you have 2 shards then odd values coule be on one and even on the other.</li>
<li><strong>Is MySQL Fabric queried for every transaction or query (and so becomes a single-point-of-falire)?</strong>: No, the connectors hold a cache of the routing data and so will use that rather than constantly querying the MySQL Fabric process.</li>
<li><strong>Does the Replication include DDL changes, not just DML?</strong>: Yes it does.</li>
<li><strong>How do I scale out write operation in MySQL 5.6</strong>: That&#8217;s where MySQL Fabric comes in, when we reach the write saturation point on master.</li>
<li><strong>Is NDB storage engine is good option for write operation scale out?</strong>: It can be a great solution but it will depend on how your data is structured and accessed. Take a look at the<a href="http://www.mysql.com/why-mysql/white-papers/mysql-cluster-evaluation-guide/" title="MySQL Cluster Evaluation Guide - Designing, Evaluating and Benchmarking MySQL Cluster" target="blank">MySQL Cluster Evaluation Guide &#8211; Designing, Evaluating and Benchmarking MySQL Cluster</a> as this will help you figure out if MySQL Cluster (NDB) is going to be the right option for your application</li>
<li><strong>But fabric still in beta version right?</strong>: Correct &#8211; it isn&#8217;t ready for production yet (at the time of writing this is true but be sure to check if you&#8217;re reading this laster!).</li>
<li><strong>Are the benchmarks of <code>sync_binlog</code> done with SSD or HDD machines?</strong>: SSD &#8211; see <a href="http://mysqlmusings.blogspot.fr/2012/06/binary-log-group-commit-in-mysql-56.html" title="Binary Log Group Commit in MySQL 5.6" target="blank">this blog post</a>. <strong>Should we expect the same results with HDDs?</strong>: Yes, but with different orders of magnitude. Note that all benchmarks were made with SSDs, so we are comparing equal hardware on 5.5 and 5.6.</li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-replication/advanced-mysql-replication-architectures-and-latest-developments-on-demand-webinar-qa/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Advanced MySQL Replication Architectures and Latest Developments &#8211; free webinar</title>
		<link>/mysql-replication/advanced-mysql-replication-architectures-and-latest-developments-free-webinar-2</link>
					<comments>/mysql-replication/advanced-mysql-replication-architectures-and-latest-developments-free-webinar-2#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Tue, 18 Mar 2014 09:08:26 +0000</pubDate>
				<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[High Availability]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[Replication]]></category>
		<guid isPermaLink="false">/?p=3805</guid>

					<description><![CDATA[This Thursday (20th March 2014) we&#8217;ll be hosted a free webinar covering advanced MySQL Replication topics as well as the latest developments. As always, the webinar is free but you need to register here &#8211; even if you can&#8217;t join live, you&#8217;ll then be sent a link to the replay. More details on what to]]></description>
										<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2014/03/MySQL_Replication.png"><img loading="lazy" decoding="async" src="/wp-content/uploads/2014/03/MySQL_Replication-300x101.png" alt="MySQL Replication Logo" width="300" height="101" class="alignright size-medium wp-image-3803" srcset="/wp-content/uploads/2014/03/MySQL_Replication-300x101.png 300w, /wp-content/uploads/2014/03/MySQL_Replication-1024x347.png 1024w, /wp-content/uploads/2014/03/MySQL_Replication-900x305.png 900w, /wp-content/uploads/2014/03/MySQL_Replication.png 1240w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><br />
This Thursday (20th March 2014) we&#8217;ll be hosted a free webinar covering advanced MySQL Replication topics as well as the latest developments. As always, the webinar is free but you need to <a href="http://www.mysql.com/news-and-events/web-seminars/advanced-mysql-replication-architectures-and-latest-developments/" title="Advanced MySQL Replication Architectures and Latest Developments - free webinar" target="_blank">register here</a> &#8211; even if you can&#8217;t join live, you&#8217;ll then be sent a link to the replay.</p>
<p>More details on what to expect&#8230;</p>
<p>The biggest Web sites in the world rely on MySQL Replication to scale-out and provide High Availability for their data. Extend your knowledge of how MySQL Replication works and what you can achieve with it; join us for this technical webinar to explore some of the more advanced replication architectures as well as some of the latest product developments:</p>
<ul>
<li>Replication topologies, including master-slave, circular and multi-master</li>
<li>Load balancing and query splitting</li>
<li>Data aggregation with multi-source replication</li>
<li>Global Transaction IDs and auto-failover with recovery</li>
<li>Getting the best replication throughput</li>
<li>Heterogeneous replication with the Binlog API</li>
</ul>
<p>WHO:</p>
<ul>
<li>Andrew Morgan, Principal MySQL Product Manager</li>
<li>Lars Thalmann, Director, MySQL Replication, Backup and Connectors</li>
</ul>
<p>WHEN:</p>
<ul>
<li>Thu, Mar 20: 09:00 Pacific time (America)</li>
<li>Thu, Mar 20: 10:00 Mountain time (America)</li>
<li>Thu, Mar 20: 11:00 Central time (America)</li>
<li>Thu, Mar 20: 12:00 Eastern time (America)</li>
<li>Thu, Mar 20: 13:00 São Paulo time</li>
<li>Thu, Mar 20: 16:00 UTC</li>
<li>Thu, Mar 20: 16:00 Western European time</li>
<li>Thu, Mar 20: 17:00 Central European time</li>
<li>Thu, Mar 20: 18:00 Eastern European time</li>
<li>Thu, Mar 20: 21:30 India, Sri Lanka</li>
<li>Fri, Mar 21: 00:00 Singapore/Malaysia/Philippines time</li>
<li>Fri, Mar 21: 00:00 China time</li>
<li>Fri, Mar 21: 01:00 日本</li>
<li>Fri, Mar 21: 03:00 NSW, ACT, Victoria, Tasmania (Australia)</li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-replication/advanced-mysql-replication-architectures-and-latest-developments-free-webinar-2/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Webinar &#8211; What&#8217;s New in MySQL Replication</title>
		<link>/mysql-replication/webinar-whats-new-in-mysql-replication</link>
					<comments>/mysql-replication/webinar-whats-new-in-mysql-replication#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Fri, 06 Dec 2013 17:16:04 +0000</pubDate>
				<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL 5.7]]></category>
		<guid isPermaLink="false">/?p=2973</guid>

					<description><![CDATA[On Friday (22/11/2013), we hosted webinar covering the new replication features in the MySQL 5.7 DMR as well as in MySQL Labs. You can now view the webinar replay here. It’s a very exciting time for MySQL Replication! MySQL 5.6 contains numerous new replication features and Oracle recently announced&#8230; The second Development Milestone Release of]]></description>
										<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2013/11/MySQL_Replication_and_HA.png"><img loading="lazy" decoding="async" class="size-medium wp-image-2976 alignright" alt="MySQL Replication logo" src="/wp-content/uploads/2013/11/MySQL_Replication_and_HA-300x101.png" width="300" height="101" srcset="/wp-content/uploads/2013/11/MySQL_Replication_and_HA-300x101.png 300w, /wp-content/uploads/2013/11/MySQL_Replication_and_HA-1024x347.png 1024w, /wp-content/uploads/2013/11/MySQL_Replication_and_HA.png 1240w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a>On Friday (22/11/2013), we hosted webinar covering the new replication features in the MySQL 5.7 DMR as well as in MySQL Labs. You can now <a href="http://www.mysql.com/news-and-events/web-seminars/mysql-replication-discover-whats-new/" title="MySQL 5.7 Replication enhancements - webinar" target="_blank">view the webinar replay here</a>. </p>
<p>It’s a very exciting time for MySQL Replication! MySQL 5.6 contains numerous new replication features and Oracle recently announced&#8230;</p>
<ul>
<li>The second Development Milestone Release of MySQL 5.7, introducing yet again new replication features and enhancements including optimized multi-threaded slave, better consistency with semi-synchronous replication, and improved monitoring with new Performance Schema tables.</li>
<li>Early access to multi-source replication via <a title="Get multi-source MySQL Replication from MySQL Labs" href="http://labs.mysql.com/" target="_blank">labs.mysql.com</a></li>
</ul>
<p>During the live webinar, attendees asked questions and the MySQL Replication engineers answered them; this Q&#038;A is included here:</p>
<ul>
<li><strong>Can we have Master &#038; Slave on different versions of MySQL? Like Master is with 5.1 &#038; Slave with 5.6?</strong> In general, cross version replication to a next higher version on slave is supported unless the behaviour of SQL statements change in the different versions. For more details, please look at the <a href="http://dev.mysql.com/doc/refman/5.6/en/replication-compatibility.html" title="documentation on MySQL Replication cross-version compatibility" target="_blank"> documentation on MySQL Replication cross-version compatibility</a>.</li>
<li><strong>The MySQL Replication topology discussed here supports asynchronous replication. How is Synchronous replicaiton is possible with mysql?</strong> With the loss-less semi-synchronouse replication, you&#8217;re getting very close to synchronous replication in that when your transaction has committed, you can be sure that the change has been received by a slave and so is safe. If you want truly synchronous replication then you can use MySQL Cluster (the NDBCLUSTER storage engine); typically this synchronous replication would be within a data center but you can split the cluster if you have a real need. You can <a href="http://www.youtube.com/watch?v=DnWItDTZL2c" title="MySQL Cluster demo video" target="_blank">watch this demo video of MySQL Cluster</a>.</li>
<li><strong>When Slave says it is x seconds behind, what does that means? Does it means slave would require x seconds to recover and reach the master&#8217;s current position?</strong> When the slave SQL thread is actively processing updates, this field is the number of seconds that have elapsed since the timestamp of the most recent event on the master executed by that thread.</li>
<li><strong>What is default setting for the <a href="http://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_rpl_semi_sync_master_wait_point" title="rpl_semi_sync_master_wait_point documentation" target="_blank">rpl_semi_sync_master_wait_point</a> setting.</strong> after_sync</li>
<li><strong>What is the best mechanism in MySQL Community Edition for backing up InnoDB tables?</strong> <a href="http://dev.mysql.com/doc/refman/5.7/en/mysqldump.html" title="mysqldump database backup command">mysqldump</a> has <a href="http://dev.mysql.com/doc/refman/5.7/en/mysqldump.html#option_mysqldump_single-transaction" target="_blank">&#8211;single-transaction option</a>, which is mainly useful for InnoDB tables with REPEATABLE READ isolation level. In short, for Community Edition mysqldump is the best solution. But for Enterprise Edition, there is <a href="http://www.mysql.com/products/enterprise/backup.html" title="MySQL Enterprise Backup" target="_blank">MySQL Enterprise Backup</a>.</li>
<li><strong>How can I verify that my slave DB is in sync with the master? Is there something similar to the archive log sequence number verification in Oracle. we know there are some paramerts from show slave status output. But is there any other way to verify the sync status using MySQL tables?</strong> In MySQL 5.6, if you set master_info_repository and <a href="http://dev.mysql.com/doc/refman/5.6/en/replication-options-slave.html#sysvar_relay_log_info_repository" target="_blank">relay_log_info_repository</a> to TABLE the status information is put into the mysql.slave_relay_log_info and mysql.slave_master_info tables. And in MySQL 5.7 the status is put in performance_schema you can query the status using SQL.</li>
<li><strong>Does multi-source replication require the use of GTIDs?</strong> No &#8211; you just need to make sure that GTIDs are either enabled on the slave and all masters or disabled on all of them.</li>
<li><strong>If multi-source can work without GTIDs, how do you prevent a transaction executed on A which is replicated to B and C, from being replicated back again to C and B via the replication channel from B to C and C to B ?</strong> Without GTIDs, the transactions are re executed (in the above scenario) if the schema developer *doesn&#8217;t* take care of fixing the keys. If there is a conflict on a key, the Slave errors out. So, In short, MSR doesn&#8217;t involve itself with conflict detection and resolution. When using positions, the schema developer has to make sure that multisourced slave receives correct data to avoid reexecution of transactions.</li>
<li><strong>In loss-less semi-sync, how can the transaction be written in the binary log of the master without the master committing the transaction? Does this stall the transaction on the master (until a commit is written to the binary log)?</strong> When using this feature, a commit has two phases (which is same as an XA transaction) &#8211; first there is a prepare phase and then the commit phase. The binary log is written after the prepare phase but before commit phase(internally, it is part of the commit phase but happens before the engine commit).</li>
<li><strong>With parallel replication, is the binary logs order preserved on the slave (compared to the master), even if the transactions are applied in parallel? Asked in another way, can 2 slaves of the same master have different binlogs?</strong> No, the order will be different when multi-threaded slave feature is on.</li>
<li><strong>Are you working with an easier way to create a replication setup &#8211; like automatically copying the master database to the slave (something like you had for MyISAM before)?</strong> Take a look at <a href="http://dev.mysql.com/doc/workbench/en/utils-manuals.html" title="MySQL Utilities" target="_blank">MySQL Utilities</a> as there are lots of new tools in there 2 help setup, monitor and manage replication.</li>
<li><strong>You guys have multiple blogs and it is a shame to not present this information in a common place.</strong> That&#8217;s been something that we&#8217;ve been discussing as well. Of course they get aggregated through planet.mysql.com and there is also a <a href="/mysql-replication/mysql-5-7-2-dmr-and-labs-new-replication-features" title="MySQL 5.7 replication enhancements" target="_blank">summary blog</a> pointing to the others.</li>
<li><strong>In Loss-Less Semi-Sync replication, what happens if the slave dies, before it receives the change in the relay. Is there a timeout which then commits and ack the data to the master?</strong> Yes, there is a timeout. After the timeout, it commits and falls back to normal asynchronous replication. The timeout is specified by the variable <a href="http://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_rpl_semi_sync_master_timeout" target="_blank">rpl_semi_sync_master_timeout</a>. Currently you cannot turn off this behavior, but you can set the timeout very very high. For more information, see the <a href="http://dev.mysql.com/doc/refman/5.6/en/replication-semisync-installation.html" target="_blank" title="MySQL Semisynchronous Replication Installation and Configuration">configuration guide</a>.</li>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-replication/webinar-whats-new-in-mysql-replication/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL 5.7.2 DMR and Labs &#8211; new replication features</title>
		<link>/mysql-replication/mysql-5-7-2-dmr-and-labs-new-replication-features</link>
					<comments>/mysql-replication/mysql-5-7-2-dmr-and-labs-new-replication-features#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Sat, 21 Sep 2013 16:33:57 +0000</pubDate>
				<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[High Avail]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL 5.7]]></category>
		<guid isPermaLink="false">/?p=2953</guid>

					<description><![CDATA[With today&#8217;s announcement of the second MySQL 5.7 Development Milestone Release and a new labs release it&#8217;s a very exciting time for MySQL Replication. MySQL 5.6 contained a lot of new content to make replication faster, easier to use and more reliable (Global Transaction Identifiers, Multi-Threaded Slaves, Binary Log Group Commit, Optimized Row Based Replication,]]></description>
										<content:encoded><![CDATA[<p>With today&#8217;s <a href="http://www.oracle.com/us/corporate/press/2020378">announcement of the second MySQL 5.7 Development Milestone Release</a> and a <a href="http://labs.mysql.com/" title="Download Multi-Source replication from MySQL Labs">new labs release</a> it&#8217;s a very exciting time for MySQL Replication. <a href="/mysql-replication/mysql-5-6-ga-replication-enhancements/">MySQL 5.6</a> contained a lot of new content to make replication faster, easier to use and more reliable (Global Transaction Identifiers, Multi-Threaded Slaves, Binary Log Group Commit, Optimized Row Based Replication, Crash Safe Replication, Replication Event Checksums, Time Delayed Replication &amp; Informational Logs) and now we want to improve things even further.</p>
<p>The new DMR has something for everyone. </p>
<p>With the improvements to Semi-Synchronous Replication, the application developer can be confident that when a transaction has been commited, the changes have been safely copied to one or more slaves and so whatever happens, that change will not be lost. Further, we now prevent other application threads seeing those changes until they&#8217;ve been received by the slave and so the application cannot start acting on the new data until it&#8217;s known to be safe. This is an important improvement in consistency which moves more of the onus from the application developer onto the database.</p>
<p>DBAs want replication to be fast &#8211; in particular for the slave(s) not to fall behind the master. <a href="/mysql-replication/mysql-5-6-ga-replication-enhancements/">MySQL 5.6</a> made some massive improvements in this area &#8211; both on the master and the slave. A number of users though were unable to exploit the Multi-Threaded Slave (MTS) feature as relied on the use of multiple schemas (databases) to get changes applied in parallel. In the new MySQL 5.7 DMR we&#8217;ve included a new option for MTS where changes can be applied in parallel &#8211; <strong>even within the same schema</strong>. A second performance feature improves throughput on the master &#8211; where the dump thread no longer needs to lock the binary log &#8211; refer to this engineering Blog on <a href="http://my-replication-life.blogspot.com/2013/09/dump-thread-enhancement.html" title="Dump Thread Enhancement on MySQL 5.7.2 - engineering Blog">Dump Thread Enhancement in MySQL 5.7.2</a> for more details.</p>
<p>DBAs also want to monitor the status of replication and for years have relied on the <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">SHOW SLAVE STATUS</span> command. As replication has evolved, <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">SHOW SLAVE STATUS</span> has become less suitable &#8211; we needed a solution that could properly model the more sophisticated replication architectures (including GTIDs and MTS) now possible. The approach we&#8217;ve taken is to provide this information through the <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">performance_schema</span>. </p>
<p>Note that the earlier MySQL 5.7 DMR added non-blocking <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">SHOW SLAVE STATUS</span>, idempotent and <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">&#8211;rewrite-db</span> options for <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">mysqlbinlog</span> &#8211; these are still available in the new DMR.</p>
<p>The new features are described in a little more detail in the following sections (together with links to more technical content from the MySQL Engineeing team).</p>
<h2 id="loss-less-semi-synchronous-replication">Loss-less Semi-Synchronous Replication</h2>
<div id="attachment_2957" style="width: 234px" class="wp-caption alignright"><a href="/wp-content/uploads/2013/09/Intra-Schema-Semi-sync-replication.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-2957" class="size-medium wp-image-2957" alt="Intra-Schema Semi-Synchronous Replication" src="/wp-content/uploads/2013/09/Intra-Schema-Semi-sync-replication-224x300.png" width="224" height="300" /></a><p id="caption-attachment-2957" class="wp-caption-text">Intra-Schema Semi-Synchronous Replication</p></div>
<p>When using semi-synchronous replication in previous releases, the processing of the transaction on the master would wait for the slave&#8217;s acknowledgement <em>after</em> the change had been written to the storage engine but before the commit was acknowledged to the client. This satisfied the requirement that the application could be confident that if a transaction has been commited (and an acknowledgement received for the commit) then the update would not be lost. It did however leave a window where a user on another connection could read the new data from the master (because it has been written to the storage engine and the locks have been released) before the change had been received by the slave and safely stored in its relay log &#8211; that user could then start acting on that data but if the master failed at that point then that original update could still be lost and so the user would be acting on what is now inaccurate data.</p>
<p>This feature removes the above race condition by making the master wait for the update to be received by the slave <em>before</em> writing it to the storage engine and releasing the locks.</p>
<p>The functionality is enabled by default and shouldn&#8217;t have any negative impacts (for example on peformance) but it you&#8217;d like to disable it then you can do so using <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">rpl_semi_sync_master_wait_point = AFTER_SYNC</span>.</p>
<p>You can read more details on this in this <a href="http://my-replication-life.blogspot.com/2013/09/loss-less-semi-synchronous-replication.html" title="Loss-less Semi-Synchronous Replication on MySQL 5.7.2 blog">Loss-less Semi-Synchronous Replication on MySQL 5.7.2 blog</a> from the MySQL engineering team.</p>
<h2 id="intra-schema-multi-threaded-slaves">Intra-Schema Multi-Threaded Slaves</h2>
<p>DBAs want replication to be fast &#8211; in particular for the slave(s) not to fall behind the master. If there is a short but heavy burst of writes on the master then the slave falls behind (and there is a risk of lost data if the master fails during this period) but if the write-rate is sustained then the slave would fall further and further behind indefinitely. The ongoing challenge has been that the master gets faster and faster as more cores and clients are added but applying these changes asynchronously on the slave is more complex as you need to maintain some form of ordering in order to always have a consistent data set. </p>
<p>The earliest solution to maintaining ordering/consistency was for the slave to apply all of the changes serially, in a single thread &#8211; this ensured that changes were applied in the same order as on the master and so guaranteed the slave always contained a consistent view. Unfortunately this meant that the slave applier thread could only exploit a single core which is very wasteful in modern systems.</p>
<p><a href="/mysql-replication/mysql-5-6-ga-replication-enhancements/">MySQL 5.6</a> made some massive improvements for many use cases by allowing the slave to apply updates in parallel using multiple threads. The assumption made was that data was held in multiple schemas (databases) and that there were no dependencies between the data in those different schemas. In this way all of the updates for a schema would be applied in order by a single thread (ensuring consistency) but updates to other schemas could be handled by additional threads. This allowed the slave to work many times faster but was limited to those use cases that met the assumptions.</p>
<p>In the second MySQL 5.7 DMR we introduce a new option that enables the slave to safely apply updates in parallel &#8211; even when all of the data is held within a single schema and no assumptions can be made about the independence between any rows from any tables. To avoid conflicts/divergence from the master, the slave must ensure that any transactions that are applied in parallel don&#8217;t read or write any overlapping rows. The good news is that this grouping on non-overlapping transactions is already being figured out on the master as part of the binary log group commit functionality (introduced in <a href="/mysql-replication/mysql-5-6-ga-replication-enhancements/">MySQL 5.6</a>) as row level locking means that overlapping transactions cannot be part of the same group commit. </p>
<p>MySQL 5.7 adds a logical clock/counter to the master which is used to tag transactions that are part of the same group commit&#8217;s prepare phase. The slave can then use that information &#8211; knowing that it is safe to apply all of the transactions with the same logical clock value in any order (and so can use multiple threads). </p>
<p>Activating the functionality is very straight-forward and the key step is to set <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">slave-parallel-type = LOGICAL_CLOCK</span> but see this blog from the MySQL engineering team: <a href="http://binlogtorelaylog.blogspot.com/2013/09/enhancedMTS-configuration.html" title="MySQL 5.7 Enhanced MTS: configuring slave for Intra-database parallelization">using the intra-schema MTS functionality</a> for more detailed instructions. Note that there is another blog in the series &#8211; that <a href="http://binlogtorelaylog.blogspot.com/2013/09/enhancedMTS-deepdive.html" title="MySQL 5.7: MySQL 5.7: Enhanced Multi-threaded slaves">blog provides a detailed view of how the intra-schema MTS is implemented</a>.</p>
<h2 id="replication-performance-schema">Replication Performance Schema</h2>
<p>With the ever increasing sophistication of MySQL Replication, presenting all of the information in <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">SHOW SLAVE STATUS</span> has become unwieldy with data for multiple slave applier threads, GTID sets etc. What would be much more convenient is if this information were presented in tables so that the user could get exactly the information they needed using SQL queries (plus of course we can lay out the data in an understandable (relational) way and can access the information from stored procedures). MySQL 5.7.2 does just this by adding MySQL Replication tables to the <a href="http://dev.mysql.com/doc/refman/5.7/en/performance-schema-replication-tables.html" title="MySQL performance_schema documentation">MySQL performance_schema</a>.</p>
<p>This feature introduces 6 new <a href="http://dev.mysql.com/doc/refman/5.7/en/performance-schema-replication-tables.html" title="MySQL performance_schema documentation">performance_schema</a> tables: <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">replication_connection_configuration, replication_connection_status, replication_execute_configuration, replication_execute_status, replication_execute_status_by_coordinator, replication_execute_status_by_worker</span>.</p>
<p>Shivji from the MySQL engineering team has written a great <a href="http://shivjijha.blogspot.com/2013/09/Introducing-the-performance-schema-tables-to-monitor-MySQL-replication.html" title="Introducing the performance schema tables to monitor MySQL replication">blog post on what&#8217;s in the new performance_schema tables and how to interpret the results</a>.</p>
<h2 id="multi-source-replication-labs">Multi-Source Replication &#8211; <em>LABS</em></h2>
<div id="attachment_2956" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2013/09/Multi-Source-Replication.png"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-2956" src="/wp-content/uploads/2013/09/Multi-Source-Replication-300x261.png" alt="Multi-Source Replication" width="300" height="261" class="size-medium wp-image-2956" /></a><p id="caption-attachment-2956" class="wp-caption-text">Multi-Source Replication</p></div>
<p>MySQL replication is very flexible in the way that networks of masters and slaves that can be built up; a master can replicate to multiple slaves, a master can itself be a slave of another master, you can create a replication ring&#8230;. The one caveat to this has always been that a slave server can only have a single master (MySQL Cluster is an exception to this rule).</p>
<p>Why might you want to do this? There are a few use cases around consolidating data from multiple MySQL Servers into one:<br />
  &#8211; Where each of the masters is for a different shard (where the application is responsible for the sharding) and you want to be able to run reports over all of that data to produce a consolidated view<br />
  &#8211; You want to avoid the expense of dedicating a slave server to each master server<br />
  &#8211; A remote location may require less throughput and so a single server can service all of the traffic for all of the data &#8211; the &#8216;super-slave&#8217; gives it a low-overhead, local database to access all of the data<br />
  &#8211; The &#8216;super-slave&#8217; is used as a point where you can perform backups for all of the data</p>
<p>It&#8217;s possible to have a slave time-slice between multiple masters with a bit of scripting but that isn&#8217;t an ideal solution. You can also add an additional repliation layer (such as writing your own code to use the binary log API) but it would be much simpler if it were built into MySQL itself.</p>
<p>In this <a href="http://labs.mysql.com/" title="Download multi-source replication from MySQL Labs">labs</a> (i.e. for test only, not to be deployed!) release we allow a slave to simultaneously receive and process replication events from multiple masters &#8211; exactly what our users have been asking for.</p>
<p>What&#8217;s more, we&#8217;ve also ensured that this new functionality is compatible with the other enhancements that have been made to the MySQL Replication architecture &#8211; this includes loss-less semi-synchronus replication; and intra-schema multi-threaded slaves (as well as the existing per-database MTS). This means that you don&#8217;t have to choose between all of these tempting features &#8211; the keys to the candy store are yours! </p>
<p>It&#8217;s likely that not all of the masters will be the same, have the same maintenance schedules etc. and so it makes sense to be able to manage each of the relationships independently. In this <a href="http://labs.mysql.com/" title="Download multi-source replication from MySQL Labs">labs</a> release you can manage each master independently, including the relevant server variables <em>but</em> the same replication filters are currently applied to the replication events from all of the masters &#8211; we recognise that this isn&#8217;t ideal but this is cuurently an early access release and it&#8217;s something we intend to address in future versions.</p>
<p>At the moment there&#8217;s no limit to the number of masters that can replicate to a specific slave &#8211; in the final version we&#8217;re likely to apply a configurable limit.</p>
<p>Because this further complicates the information that would need to be included in <span style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; color: #000080;">SHOW SLAVE STATUS</span>, most of the detailed information is instead presented in the Performance Schema.</p>
<p>It should be pointed out that there is no conflict detection or resolution built into this feature &#8211; it is the responsibility of the application to make sure that the masters are working on distinct data sets (or that they&#8217;re comfortable with the results of any conflicts).</p>
<p>For more technical details, refer to this <a href="http://on-mysql-replication.blogspot.com/2013/09/feature-preview-mysql-multi-source-replication.html" title="Multi-Source Replication blog post">engineering blog post on multi-source replication</a>.</p>
<h2 id="summary">Summary</h2>
<p>There&#8217;s a lot of exciting new content in the MySQL 5.7.2 DMR (<a href="http://dev.mysql.com/downloads/mysql/#downloads" title="Download MySQL 5.7.2 Development Milestone Release">download here</a>) and the Mulit-Source Replication labs release (<a href="http://labs.mysql.com/" title="Download multi-source replication from MySQL Labs">download here</a>). The reason these features has been released is that we value early feedback from our community and customers &#8211; please try them out and let us know what we&#8217;re getting right and what needs to be enhanced!</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-replication/mysql-5-7-2-dmr-and-labs-new-replication-features/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL Cluster Asynchronous Replication &#8211; conflict detection &#038; resolution</title>
		<link>/mysql-cluster/mysql-cluster-asynchronous-replication-conflict-detection-resolution1</link>
					<comments>/mysql-cluster/mysql-cluster-asynchronous-replication-conflict-detection-resolution1#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Wed, 11 Sep 2013 08:29:40 +0000</pubDate>
				<category><![CDATA[MySQL Cluster]]></category>
		<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[High Availability]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Cluster CGE]]></category>
		<category><![CDATA[Replication]]></category>
		<guid isPermaLink="false">/?p=387</guid>

					<description><![CDATA[I was rooting through past blog entries and I stumbled accross a draft post on setting up multi-master (update anywhere) asynchronous replication for MySQL Cluster. The post never quite got finished and published and while the material is now 4 years old it may still be helpfull to some and so I&#8217;m posting it now.]]></description>
										<content:encoded><![CDATA[<p>I was rooting through past blog entries and I stumbled accross a draft post on setting up multi-master (update anywhere) asynchronous replication for MySQL Cluster. The post never quite got finished and published and while the material is now 4 years old it may still be helpfull to some and so I&#8217;m posting it now. Note that a lot has happened with MySQL Cluster in the last 4 years and in this area, the most notable change has been the <a href="" target="_blank" title="Enhanced conflict resolution with MySQL Cluster active-active replication" alt="Enhanced conflict resolution with MySQL Cluster active-active replication">Enhanced conflict resolution with MySQL Cluster active-active replication</a> feature introduced in MySQL Cluster 7.2 and if you&#8217;re only dealing with a pair of Clusters, that&#8217;s your best option as it removed the need for you to maintain the timestamp columns and backs out entire transactions rather than just the conflicting rows. So when would you use this &#8220;legacy&#8221; method? The main use case is when you want conflict detection/resolution among a ring of more than 2 Clusters. Note also that MySQL 5.6 (and so MySQL Cluster 7.3) added microsecond precision to timestamps and so you may not need the custom plugin that this post referred to.</p>
<p>Anyway, here&#8217;s the original post&#8230;</p>
<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br />
MySQL Cluster asynchronous replication allows you to run in a multi-master mode with the application making changes to both sites (or more than 2 sites using a replication ring). As the replication is asynchronous, if the application(s) modified the same row on both sites at &#8216;about the same time&#8217; then there is a potential for a collision. Left to their own devices, each site would store (and provide to the application) different data indefinitely. This article explains how to use MySQL Cluster collision detection and resolution to cope with this.</p>
<div id="attachment_437" style="width: 310px" class="wp-caption alignright"><a href="/wp-content/uploads/2009/08/Replication_Conflict.jpg"><img loading="lazy" decoding="async" aria-describedby="caption-attachment-437" class="size-medium wp-image-437" title="Multi-master replication leading to inconsistencies" alt="Fig. 1 Multi-master replication leading to inconsistencies" src="/wp-content/uploads/2009/08/Replication_Conflict-300x178.jpg" width="300" height="178" srcset="/wp-content/uploads/2009/08/Replication_Conflict-300x178.jpg 300w, /wp-content/uploads/2009/08/Replication_Conflict.jpg 590w" sizes="auto, (max-width: 300px) 100vw, 300px" /></a><p id="caption-attachment-437" class="wp-caption-text">Fig. 1 Multi-master replication leading to inconsistencies</p></div>
<p>Fig. 1 shows the timeline that can result in a conflict. The same or two different applications make a change to the same row in the table but to the 2 different instances of MySQL Cluster. Each cluster synchronously replicates the data amongst its local data node in order to provide local High Availability (everything there is safe!). At some point later (normally a fraction of a second), the changes are replicated to the remote site asynchronously &#8211; this delay opens a window for a conflict where Cluster 2 is updated by the application just before it receives the earlier update from Cluster 1. Cluster 2 will overwrite it&#8217;s row with the value (5) it has received but only after its earlier change (directly from the application) is written to the binary log ready for replication to Cluster 1 which in turn will cause that value (15) to be stored by Cluster 1. Each Cluster instance replicates what it believes to be the correct data to the other site &#8211; overwriting what that site had previously stored. In our example, that leaves one database holding the value 15 for key &#8216;A&#8217; while the other stores 5.</p>
<p>It&#8217;s often the case that the application will tend to go to the same site during a particular time when accessing the same data and so the chances of a conflict are reduced but the application may still want to guard against (even rare) race conditions. If replication slows down (for example due to a backlog of updates to be applied) or stops temporarily (for example due to network failure to the geographically remote site) then the chances of a collision greatly increase.</p>
<p>For information on setting up multi-master asynchronous replication with MySQL Cluster, please take a look at <a href="/mysql-cluster/setting-up-mysql-asynchronous-replication-for-high-availability/" target="_blank">Setting up MySQL Asynchronous Replication for High Availability</a>.</p>
<h3>Conflict Detection &amp; Resolution using MySQL Cluster</h3>
<p>MySQL Cluster provides two different schemes to handle these collisions/conflicts. The first scheme (referred to as &#8220;greatest timestamp wins&#8221;) detects that a conflict occurs and automatically resolves it (the change most recently received from the application is stored on both Clusters). The second scheme (referred to as &#8220;same value wins&#8221;) detects that a conflict has occurred but <strong>does not fix it</strong> &#8211; instead the conflict is recorded in such a way that the application (or user) can figure out how best to resolve it based on a full understanding of the schema, what the data means and how it&#8217;s used. It is up to the developer which approach they use (if any) &#8211; it is selected on a per-table basis.</p>
<h3>Common prerequisite steps</h3>
<p>These steps should be followed regardless of whether you want to use conflict resolution or conflict detection (where the application decides how to resolve it).</p>
<ol>
<li>Set up multi-master replication as described in <a href="/mysql-cluster/setting-up-mysql-asynchronous-replication-for-high-availability/" target="_blank">Setting up MySQL Asynchronous Replication for High Availability</a></li>
<li>Create the function &#8220;inttime&#8221; for use in the stored procedures as described in <a href="/mysql/creating-a-mysql-plugin-to-produce-an-interger-timestamp/" target="_blank">Creating a MySQL plugin to produce an integer timestamp</a> <strong>Note that you will need to install inttime.so on each host</strong></li>
</ol>
<h3>Setting up Automatic Conflict Resolution (Greatest timestamp wins)</h3>
<p>This is the simplest way to handle conflicts with MySQL Cluster when implementing multi-master asynchronous replication (actually, the simplest is to do nothing and accept that if your application(s) update the same row at about the same time at both Clusters then those Clusters may be left with different data until the application(s) next update that row).</p>
<p>Remember that this mechanism works by checking that the timestamp field of the update received by the slave is later than the one already stored. In the example that follows, the &#8216;ts&#8217; column is used for the timestamp.</p>
<p>Create the database on either cluster (replication will make sure that it appears in both Clusters):</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql&gt; create database clusterdb;
</pre>
<p>Before creating the application tables, set  up the ndb_replication system table (again, in either Cluster):</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql&gt; CREATE TABLE mysql.ndb_replication ( db VARBINARY(63), table_name VARBINARY(63), server_id INT UNSIGNED, binlog_type INT UNSIGNED, conflict_fn VARBINARY(128), PRIMARY KEY USING HASH (db, table_name, server_id) ) ENGINE=NDB PARTITION BY KEY(db,table_name);

mysql&gt; insert into mysql.ndb_replication values ('clusterdb', 'tab1', 7, NULL, 'NDB$MAX(ts)');
</pre>
<p>After that, you can create the application table:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
cluster1 mysql&gt; use clusterdb;

cluster1 mysql&gt; create table tab1 (NAME varchar(30) not null primary key,VALUE int, ts BIGINT UNSIGNED default NULL) engine=ndb;
</pre>
<p>To test that the basic replication is working for this table, insert a row into cluster1, check it&#8217;s there in cluster2, add a second row to cluster2 and make sure it&#8217;s visible in cluster1:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
cluster1 mysql&gt; insert into tab1 values ('Frederick', 1, 0);

cluster2 mysql&gt; use clusterdb;
cluster2 mysql&gt; select * from tab1;
+-----------+-------+------+
| NAME      | VALUE | ts   |
+-----------+-------+------+
| Frederick |     1 |    0 |
+-----------+-------+------+
1 row in set (0.00 sec)
cluster2 mysql&gt; insert into tab1 values ('William',20,0);

cluster1 mysql&gt; select * from tab1;
+-----------+-------+------+
| NAME      | VALUE | ts   |
+-----------+-------+------+
| Frederick |     1 |    0 |
| William   |    20 |    0 |
+-----------+-------+------+
2 rows in set (0.00 sec)
</pre>
<p>For both rows, the timestamp was set to 0 to represent &#8216;the start of time&#8217;, from this point on, whenever making a change to those rows, the timestamp should be increased. Later on on in this article, I&#8217;ll show how to automate that process.</p>
<p>We&#8217;re now ready to test that the conflict resolution is working; to do so replication is stopped (in both directions) to increase the window for a conflict and the same tuple updated on each Cluster. Replication is then restarted and then I&#8217;ll confirm that the last update wins on both clusters:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
cluster1 mysql&gt; slave stop;

cluster2 mysql&gt; slave stop;

cluster1 mysql&gt; update tab1 set VALUE=10,ts=1 where NAME='Frederick';

cluster2 mysql&gt; update tab1 set VALUE=11,ts=2 where NAME='Frederick';

cluster1 mysql&gt; slave start;

cluster2 mysql&gt; slave start;

cluster1 mysql&gt; select * from tab1;
+-----------+-------+------+
| NAME      | VALUE | ts   |
+-----------+-------+------+
| William   |    20 |    0 |
| Frederick |    11 |    2 |
+-----------+-------+------+
2 rows in set (0.00 sec)

clusrer2 mysql&gt; select * from tab3;
+-----------+-------+------+
| NAME      | VALUE | ts   |
+-----------+-------+------+
| William   |    20 |    0 |
| Frederick |    11 |    2 |
+-----------+-------+------+
2 rows in set (0.00 sec)
</pre>
<p>This confirms that the later update (timestamp of 2) is stored in both Clusters &#8211; conflict resolved!</p>
<h3>Automating the timestamp column</h3>
<p>Manually setting the timestamp value is convenient when testing that the mechanism is working as expected could be a nuisance in a production environment (for example, you would need to get the clocks of all application nodes exactly in sync wherever in the world they&#8217;re located). This section describes how that can be automated using stored procedures (note that stored procedures don&#8217;t work when using the NDB API to make changes but in that situation it should be straight-forward to provide wrapper methods that manage the timestamp field). Note that the timestamp must be an integer field (and needs a high level of precision) and so you can&#8217;t use the regular MySQL TIMESTAMP type.</p>
<p>This mechanism assumes that you&#8217;ve built &#8220;inttime.so&#8221; and deployed it to the hosts running the mysqld processes for each cluster (refer to the prerequisite section).</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
cluster1 mysql&gt; create trigger tab1_insert before insert on tab3 for each row set NEW.ts=inttime;
cluster1 mysql&gt; create trigger tab1_update before update on tab3 for each row set NEW.ts=inttime;
cluster1 mysql&gt; insert into tab1 (NAME,VALUE) values ('James',10),('David',20);
cluster1 mysql&gt; select * from tab1;
+-----------+-------+------------------+
| NAME      | VALUE | ts               |
+-----------+-------+------------------+
| William   |    20 |                0 |
| David     |    20 | 1250090500370307 |
| James     |    10 | 1250090500370024 |
| Frederick |    11 |                2 |
+-----------+-------+------------------+
4 rows in set (0.00 sec)

cluster2 mysql&gt; update tab1 set VALUE=55 where NAME='William';
cluster2 mysql&gt; select * from tab1;
+-----------+-------+------------------+
| NAME      | VALUE | ts               |
+-----------+-------+------------------+
| James     |    10 | 1250090500370024 |
| Frederick |    11 |                2 |
| William   |    55 | 1250090607251846 |
| David     |    20 | 1250090500370307 |
+-----------+-------+------------------+
4 rows in set (0.00 sec)
</pre>
<h3>Setting up Conflict Detection (Same timestamp wins)</h3>
<p>With this method, conflicts are detected and recorded but not automatically resolved. The intent is to allow the application to decide how to handle the conflict based on an understanding of what the data means.</p>
<p>Create the database on either cluster (replication will make sure that it appears in both Clusters):</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql&gt; create database clusterdb;
</pre>
<p>Before creating the application tables, set  up the ndb_replication system table (again, in either Cluster):</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
mysql&gt; CREATE TABLE mysql.ndb_replication ( db VARBINARY(63), table_name VARBINARY(63), server_id INT UNSIGNED, binlog_type INT UNSIGNED, conflict_fn VARBINARY(128), PRIMARY KEY USING HASH (db, table_name, server_id) ) ENGINE=NDB PARTITION BY KEY(db,table_name);

mysql&gt; insert into mysql.ndb_replication values ('clusterdb', 'SubStatus', 7, NULL, 'NDB$OLD(ts)');
</pre>
<p>After that, you can create the application table and its associated exception table:</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
cluster1 mysql&gt; use clusterdb;
cluster1 mysql&gt; create table SubStatus$EX (server_id INT UNSIGNED,master_server_id INT UNSIGNED,master_epoch BIGINT UNSIGNED,count INT UNSIGNED,sub_id int not null,notes VARCHAR(30) DEFAULT 'To be resolved', PRIMARY KEY (server_id, master_server_id, master_epoch, count)) engine=ndb;
cluster1 mysql&gt; create table SubStatus (sub_id int not null primary key, ActivationStatus varchar(20), ts BIGINT default 0) engine=ndb;
</pre>
<p>To test that the exception table gets filled in, add some rows to the table and then cause an update conflict (in a similar way to the conflict resolution example but after setting up the timestamp automation):</p>
<pre style="font: normal normal normal 12px/18px Consolas, Monaco, 'Courier New', Courier, monospace; padding-left: 30px; color: #000080;">
cluster1 mysql&gt; create trigger SubStatus_insert before insert on SubStatus for each row set NEW.ts=inttime();
cluster1 mysql&gt; insert into SubStatus (sub_id, ActivationStatus) values (1,'Active'),(2,'Deactivated');
cluster1 mysql&gt; select * from SubStatus;
+--------+------------------+------------------+
| sub_id | ActivationStatus | ts               |
+--------+------------------+------------------+
|      1 | Active           | 1250094170589948 |
|      2 | Deactivated      | 1250094170590250 |
+--------+------------------+------------------+
2 rows in set (0.00 sec)

cluster2 myql&gt; use clusterdb;
cluster2 mysql&gt; select * from SubStatus;
+--------+------------------+------------------+
| sub_id | ActivationStatus | ts               |
+--------+------------------+------------------+
|      1 | Active           | 1250094170589948 |
|      2 | Deactivated      | 1250094170590250 |
+--------+------------------+------------------+
2 rows in set (0.00 sec)

cluster1 mysql&gt; slave stop;

cluster2 mysql&gt; slave stop;

...
</pre>
<p>(at this point, just go on to test as with the conflict resoultion example but in this case expect to see that the confict is <strong>not</strong> resolved but an entry is added into the conflict table).</p>
<p>Of course, you can always add a trigger on the conflict table and use that to spur the application into initiating its own conflict resolution algorithm.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-cluster/mysql-cluster-asynchronous-replication-conflict-detection-resolution1/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Standalone MySQL Utilities Now GA! Includes running mysqlfailover as a daemon</title>
		<link>/mysql-replication/standalone-mysql-utilities-now-ga-includes-running-mysqlfailover-as-a-daemon</link>
					<comments>/mysql-replication/standalone-mysql-utilities-now-ga-includes-running-mysqlfailover-as-a-daemon#comments</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Mon, 05 Aug 2013 12:54:05 +0000</pubDate>
				<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[HA]]></category>
		<category><![CDATA[High Availability]]></category>
		<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL 5.6]]></category>
		<category><![CDATA[MySQL Utilities]]></category>
		<guid isPermaLink="false">/?p=2905</guid>

					<description><![CDATA[With the release of MySQL Utilities 1.3.4, the standalone (not bundled with the MySQL WorkBench GUI) package is now Generally Available and fully supported. This post will focus on a very important change (the ability to run as a daemon rather than in a terminal) to the mysqlfailover utility which allows you to build a]]></description>
										<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2013/08/MySQL_Utilities-GA.png"><img loading="lazy" decoding="async" class="alignright size-medium wp-image-2906" alt="MySQL Utilities are now GA - logo" src="/wp-content/uploads/2013/08/MySQL_Utilities-GA-300x125.png" width="300" height="125" /></a>With the release of MySQL Utilities 1.3.4, the standalone (not bundled with the MySQL WorkBench GUI) package is now Generally Available and fully supported. This post will focus on a very important change (the ability to run as a daemon rather than in a terminal) to the <span style="color: #008080;">mysqlfailover </span>utility which allows you to build a light-weight HA database solution using MySQL Replication.</p>
<p>For a general overview of MySQL Utilities, <a title="MySQL Utilities Webinar – Q&amp;A + replay" href="/mysql/mysql-utilities-webinar-qa-replay-now-available/" target="_blank">take a look at this recent webinar</a> or for a deeper dive into using them to setup replication and adding auto-failover of the master function to slaves <a title="Replication and auto-failover made easy with MySQL Utilities" href="/mysql/replication-and-auto-failover-made-easy-with-mysql-utilities/" target="_blank">watch this video and worked example</a>.</p>
<p>When we first released the <span style="color: #008080;">mysqlfailover</span> utility, the reaction was very positive but the feedback also told us that to really use this to provide High Availability in a production system two enhancements were critical:</p>
<ol>
<li>The ability to not have the database password visible when someone queries the status of the process (for example, using the <span style="color: #008080;">ps</span> command). This was addressed by allowing the connection string to be specified using a <span style="color: #008080;">login-path</span> (referring to an entry in .mylogin.cnf &#8211; see <a title="Setting up .mylogin.cnf using  mysql_config_editor utility" href="https://dev.mysql.com/doc/refman/5.6/en/mysql-config-editor.html" target="_blank">https://dev.mysql.com/doc/refman/5.6/en/mysql-config-editor.html</a>) in place of <span style="color: #008080;">&lt;user&gt;[:&lt;passwd&gt;]@&lt;host&gt;</span>. This is a vital security enhancement added in MySQL Utilities 1.3.1.</li>
<li>Allowing <span style="color: #008080;">mysqlfailover</span> to be run as a daemon rather than being tied to the terminal from where it had to be manually launched. This option is key to enabling the user to build a reslient HA system that doesn&#8217;t rely on mysqlfailover being launched from a terminal and that terminal then never going away.</li>
</ol>
<p>The rest of this post focuses on how to run <span style="color: #008080;">mysqlfailover</span> as a daemon.</p>
<p>By default, <span style="color: #008080;">mysqlfailover </span>runs as an interactive program within the terminal it was run from; it constantly refreshes, providing a summary of the status of the replication topology as shown below.</p>
<pre><span style="color: #008080;">mysql@mini servers]$ mysqlfailover --master=root@192.168.1.101:5001 
  --discover-slaves-login=root --rediscover

MySQL Replication Failover Utility
Failover Mode = auto     Next Interval = Thu Aug  1 23:34:56 2013

Master Information
------------------
Binary Log File   Position  Binlog_Do_DB  Binlog_Ignore_DB
mini1-bin.000001  581

GTID Executed Set
1aca3d80-faf9-11e2-a214-0800272b8804:1-2

WARNING: Errant transaction(s) found on slave(s).
Replication Health Status
+----------------+-------+---------+--------+------------+---------+
| host           | port  | role    | state  | gtid_mode  | health  |
+----------------+-------+---------+--------+------------+---------+
| 192.168.1.101  | 5001  | MASTER  | UP     | ON         | OK      |
| 192.168.1.101  | 5002  | SLAVE   | UP     | ON         | OK      |
| 192.168.1.101  | 5003  | SLAVE   | UP     | ON         | OK      |
| 192.168.1.101  | 5004  | SLAVE   | UP     | ON         | OK      |
+----------------+-------+---------+--------+------------+---------+

Q-quit R-refresh H-health G-GTID Lists U-UUIDs
</span></pre>
<p>To run <span style="color: #008080;">mysqlfailover</span> as a daemon, the first new command-line option you must provide is <span style="color: #008080;">&#8211;daemon=start</span>; as you&#8217;d expect this runs the process as a daemon. In this mode, you won&#8217;t get to see the output from <span style="color: #008080;">mysqlfailover</span> at your terminal and so you should make sure that you know what log file is being used &#8211; so it&#8217;s best to specify it with <span style="color: #008080;">&#8211;log=&lt;path-to-log-file&gt;</span>. You can also control what information is periodically written to the log file using <span style="color: #008080;">&#8211;report-values=&lt;list-of-attributes from health,gtid,uuid&gt;</span>.  As you&#8217;ll likely to want to be able to manage the daemon without having to be in the same directory (and also likely to manage it from scripts that are automatically run when the server starts and stops) it makes sense to specify where the process ID file should be stored using <span style="color: #008080;">&#8211;pid=&lt;path-to-pid-file&gt;</span>.</p>
<p>The final incantation might look something like the following:</p>
<pre><span style="color: #008080;">mysqlfailover --master=root@192.168.1.101:5001 
  --discover-slaves-login=root 
  --rediscover 
  --log=/home/mysql/servers/mysqlfailover.log 
  --pidfile=/home/mysql/servers/mysqlfailover.pid 
  --daemon=start 
  --report-values=health,gtid,uuid
</span></pre>
<p>and the resulting log file could then contain information such as this:</p>
<pre><span style="color: #008080;">2013-08-02 01:10:34 AM INFO Getting health for master: 192.168.1.101:5001.
2013-08-02 01:10:35 AM INFO Health Status:
2013-08-02 01:10:35 AM INFO host: 192.168.1.101, port: 5001, role: MASTER, state: UP, gtid_mode: ON, health: OK
2013-08-02 01:10:35 AM INFO host: 192.168.1.101, port: 5002, role: SLAVE, state: UP, gtid_mode: ON, health: OK
2013-08-02 01:10:35 AM INFO host: 192.168.1.101, port: 5003, role: SLAVE, state: UP, gtid_mode: ON, health: OK
2013-08-02 01:10:35 AM INFO host: 192.168.1.101, port: 5004, role: SLAVE, state: UP, gtid_mode: ON, health: OK
2013-08-02 01:10:35 AM INFO GTID Status - Transactions executed on the servers:
2013-08-02 01:10:35 AM INFO host: 192.168.1.101, port: 5001, role: MASTER, gtid: 1aca3d80-faf9-11e2-a214-0800272b8804:1-2
2013-08-02 01:10:35 AM INFO host: 192.168.1.101, port: 5002, role: SLAVE, gtid: 1aca3d80-faf9-11e2-a214-0800272b8804:1-2
2013-08-02 01:10:35 AM INFO host: 192.168.1.101, port: 5002, role: SLAVE, gtid: 1db19050-faf9-11e2-a214-0800272b8804:1
2013-08-02 01:10:35 AM INFO host: 192.168.1.101, port: 5003, role: SLAVE, gtid: 1aca3d80-faf9-11e2-a214-0800272b8804:1-2
2013-08-02 01:10:35 AM INFO host: 192.168.1.101, port: 5003, role: SLAVE, gtid: 200f8139-faf9-11e2-a214-0800272b8804:1
2013-08-02 01:10:35 AM INFO host: 192.168.1.101, port: 5004, role: SLAVE, gtid: 1aca3d80-faf9-11e2-a214-0800272b8804:1-2
2013-08-02 01:10:35 AM INFO host: 192.168.1.101, port: 5004, role: SLAVE, gtid: 22842441-faf9-11e2-a214-0800272b8804:1
2013-08-02 01:10:35 AM INFO UUID Status:
2013-08-02 01:10:35 AM INFO host: 192.168.1.101, port: 5001, role: MASTER, uuid: 1aca3d80-faf9-11e2-a214-0800272b8804
2013-08-02 01:10:35 AM INFO host: 192.168.1.101, port: 5002, role: SLAVE, uuid: 1db19050-faf9-11e2-a214-0800272b8804
2013-08-02 01:10:35 AM INFO host: 192.168.1.101, port: 5003, role: SLAVE, uuid: 200f8139-faf9-11e2-a214-0800272b8804
2013-08-02 01:10:35 AM INFO host: 192.168.1.101, port: 5004, role: SLAVE, uuid: 22842441-faf9-11e2-a214-0800272b8804
</span></pre>
<p>As you&#8217;d expect, you can also stop the daemon:</p>
<pre><span style="color: #008080;">mysqlfailover 
    --log=/home/mysql/servers/mysqlfailover.log 
    --pidfile=/home/mysql/servers/mysqlfailover.pid 
    --daemon=stop
</span></pre>
<p>and restart it:</p>
<pre><span style="color: #008080;">mysqlfailover 
    --log=/home/mysql/servers/mysqlfailover.log 
    --pidfile=/home/mysql/servers/mysqlfailover.pid 
    --daemon=restart
</span></pre>
<p>The final option for <span style="color: #008080;">daemon=</span> is <span style="color: #008080;">daemon=nodetach</span> which is like start but the terminal that it&#8217;s run from will continue to view the output from the daemon.</p>
<p>One thing to note is that when the server is restarted, <span style="color: #008080;">mysqlfailover</span> needs to be started again and this is not something that is automatically configured when you run it as a daemon &#8211; rather, it&#8217;s your responsibility to ensure that it&#8217;s restarted (for example, including it in an <span style="color: #008080;">init</span> script.</p>
<p>Please try it out and (as always) let us know how you get on &#8211; the addition of these extra options is a direct result of the user feedback received for the earlier versions.</p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql-replication/standalone-mysql-utilities-now-ga-includes-running-mysqlfailover-as-a-daemon/feed</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
		<item>
		<title>MySQL Utilities Webinar</title>
		<link>/mysql/mysql-utilities-webinar</link>
					<comments>/mysql/mysql-utilities-webinar#respond</comments>
		
		<dc:creator><![CDATA[andrew]]></dc:creator>
		<pubDate>Tue, 16 Jul 2013 12:50:09 +0000</pubDate>
				<category><![CDATA[MySQL]]></category>
		<category><![CDATA[MySQL Replication]]></category>
		<category><![CDATA[MySQL 5.6]]></category>
		<category><![CDATA[MySQL Utilities]]></category>
		<category><![CDATA[MySQL Workbench]]></category>
		<guid isPermaLink="false">/?p=2876</guid>

					<description><![CDATA[On Thursday, Dr Charles Bell and I will be presenting a webinar on MySQL Utilities; there will be a heavy focus on what you can acheive with them and how you should use them. As well as listening to the presentation, this is a great chance to get your questions answered by the experts (Israel]]></description>
										<content:encoded><![CDATA[<p><a href="/wp-content/uploads/2013/07/MySQL_Utilities.png"><img loading="lazy" decoding="async" src="/wp-content/uploads/2013/07/MySQL_Utilities-300x125.png" alt="MySQL Utilities logo" width="300" height="125" class="alignright size-medium wp-image-2875" /></a>On Thursday, Dr Charles Bell and I will be presenting a webinar on MySQL Utilities; there will be a heavy focus on what you can acheive with them and how you should use them. As well as listening to the presentation, this is a great chance to get your questions answered by the experts (Israel Gomez from the engineering team will also be on-line to help with the questions). As always, the webinar is free but you should <a href="http://www.mysql.com/news-and-events/web-seminars/focus-on-mysql-utilities/" title="MySQL Utilities webinar - registration" target="_blank">register in advance here</a>. If the time isn&#8217;t convenient, register anyway and you&#8217;ll be sent a link to the replay when it&#8217;s available.</p>
<h3>Abstract:</h3>
<p>MySQL Utilities provide a collection of command-line utilities that are used for maintaining and administering MySQL databases, including:</p>
<ul>
<li>Admin Utilities (Clone, Copy, Compare, Diff, Export, Import)</li>
<li>Replication Utilities (Setup, Configuration, Automated Slave Promotion)</li>
<li>General Utilities (Disk Usage, Redundant Indexes, Search Meta Data)</li>
</ul>
<p>Andrew Morgan and Chuck Bell will guide you through these utilities, and many more, explaining what you can gain from these tools and how to use them (for example how a single command repeatedly checks your master server and in the event it fails, automatically promotes one of the slaves to be the new master). This is your opportunity to listen to the development lead describe what he and his team have created, and to get your questions answered by the experts.</p>
<p>WHO:<br />
Andrew Morgan, Principal Product Manager<br />
Chuck Bell, Software Development Manager</p>
<p>WHEN:<br />
Thu, Jul 18: 09:00 Pacific time (America)<br />
Thu, Jul 18: 10:00 Mountain time (America)<br />
Thu, Jul 18: 11:00 Central time (America)<br />
Thu, Jul 18: 12:00 Eastern time (America)<br />
Thu, Jul 18: 16:00 UTC<br />
Thu, Jul 18: 17:00 Western European time<br />
Thu, Jul 18: 18:00 Central European time<br />
Thu, Jul 18: 19:00 Eastern European time<br />
Thu, Jul 18: 21:30 India, Sri Lanka<br />
Fri, Jul 19: 00:00 Singapore/Malaysia/Philippines time<br />
Fri, Jul 19: 00:00 China time<br />
Fri, Jul 19: 01:00 日本<br />
Fri, Jul 19: 02:00 NSW, ACT, Victoria, Tasmania (Australia) </p>
<p>The presentation will be approximately 60 minutes long followed by Q&#038;A. </p>
]]></content:encoded>
					
					<wfw:commentRss>/mysql/mysql-utilities-webinar/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
